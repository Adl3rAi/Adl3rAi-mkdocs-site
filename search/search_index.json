{"config":{"lang":["en","de"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"algorithm/array/2dtraverse/","title":"2D-Array Traverse","text":"Difficulty LeetCode Note \ud83d\udfe0 48. Rotate Image 48. Rotate Image \ud83d\udfe0 54. Spiral Matrix 54. Spiral Matrix \ud83d\udfe0 59. Spiral Matrix II 59. Spiral Matrix II"},{"location":"algorithm/array/2dtraverse/#48-rotate-image","title":"48. Rotate Image","text":"<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by 90 degrees (clockwise).</p> <p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> </ul> <pre><code>class Solution {\npublic void rotate(int[][] matrix) {\nint n = matrix.length;\nfor(int i = 0; i &lt; n; i++) {\nfor(int j = 0; j &lt;= i; j++) {\nint temp = matrix[i][j];\nmatrix[i][j] = matrix[j][i];\nmatrix[j][i] = temp;\n}\n}\nfor(int[] row : matrix) {\nreverse(row);\n}\n}\nprivate void reverse(int[] arr) {\nint i = 0;\nint j = arr.length - 1;\nwhile(j &gt; i) {\nint temp = arr[i];\narr[i] = arr[j];\narr[j] = temp;\ni++;\nj--;\n}\n}\n}\n</code></pre>"},{"location":"algorithm/array/2dtraverse/#54-spiral-matrix","title":"54. Spiral Matrix","text":"<p>Given an <code>m x n</code> <code>matrix</code>, return all elements of the <code>matrix</code> in spiral order.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic List&lt;Integer&gt; spiralOrder(int[][] matrix) {\nint m = matrix.length;\nint n = matrix[0].length;\nint upper = 0;\nint lower = m - 1;\nint left = 0;\nint right = n - 1;\nList&lt;Integer&gt; res = new LinkedList&lt;&gt;();\nwhile(res.size() &lt; m * n) {\nif(upper &lt;= lower) {\nfor(int j = left; j &lt;= right; j++) {\nres.add(matrix[upper][j]);\n}\nupper++;\n}\nif(left &lt;= right) {\nfor(int i = upper; i &lt;= lower; i++) {\nres.add(matrix[i][right]);\n}\nright--;\n}\nif(upper &lt;= lower) {\nfor(int j = right; j &gt;= left; j--) {\nres.add(matrix[lower][j]);\n}\nlower--;\n}\nif(left &lt;= right) {\nfor(int i = lower; i &gt;= upper; i--) {\nres.add(matrix[i][left]);\n}\nleft++;\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/array/2dtraverse/#59-spiral-matrix-ii","title":"59. Spiral Matrix II","text":"<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n2</code> in spiral order.</p> <p>Example 1:</p> <p></p> <pre><code>Input: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 1\nOutput: [[1]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> </ul> <pre><code>class Solution {\npublic int[][] generateMatrix(int n) {\nint[][] matrix = new int[n][n];\nint upper = 0;\nint lower = n-1;\nint left = 0;\nint right = n-1;\nint num = 1;\nwhile(num &lt;= n * n) {\nif(upper &lt;= lower) {\nfor(int j = left; j &lt;= right; j++) {\nmatrix[upper][j] = num++;\n}\nupper++;\n}\nif(left &lt;= right) {\nfor(int i = upper; i &lt;= lower; i++) {\nmatrix[i][right] = num++;\n}\nright--;\n}\nif(upper &lt;= lower) {\nfor(int j = right; j &gt;= left; j--) {\nmatrix[lower][j] = num++;\n}\nlower--;\n}\nif(left &lt;= right) {\nfor(int i = lower; i &gt;= upper; i--) {\nmatrix[i][left] = num++;\n}\nleft++;\n}\n}\nreturn matrix;\n}\n}\n</code></pre>"},{"location":"algorithm/array/advantage/","title":"Greedy Advantage Shuffle","text":"Difficulty LeetCode Note \ud83d\udfe0 870. Advantage Shuffle 870. Advanage Shuffle <p>\u7ed9\u5b9a\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u6570\u7ec4<code>nums1</code>\u548c<code>nums2</code>\uff0c\u91cd\u65b0\u7ec4\u7ec7<code>nums1</code>\u4e2d\u7684\u5143\u7d20\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u6709\u5c3d\u53ef\u80fd\u591a\u7684<code>nums1[i]&gt;nums2[i]</code></p> <pre><code>int n = nums1.length;\nsort(nums1);\nsort(nums2);\nfor(int i = n-1; i &gt;= 0; i--) {\nif(nums1[i] &gt; nums2[i]) {\n// comparable\n}\nelse {\n// change to the weakest\n}\n}\n</code></pre>"},{"location":"algorithm/array/advantage/#870-advantage-shuffle","title":"870. Advantage Shuffle","text":"<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> both of the same length. The advantage of <code>nums1</code> with respect to <code>nums2</code> is the number of indices <code>i</code> for which <code>nums1[i] &gt; nums2[i]</code>.</p> <p>Return any permutation of <code>nums1</code> that maximizes its advantage with respect to <code>nums2</code>.</p> <p>Example 1:</p> <pre><code>Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\nOutput: [2,11,7,15]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\nOutput: [24,32,8,12]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= 105</code></li> <li><code>nums2.length == nums1.length</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 109</code></li> </ul> <pre><code>class Solution {\npublic int[] advantageCount(int[] nums1, int[] nums2) {\nint n = nums1.length;\nPriorityQueue&lt;int[]&gt; maxpq = new PriorityQueue&lt;&gt;(\n(int[] pair1, int[] pair2) -&gt; {\nreturn pair2[1] - pair1[1];\n}\n);\nfor(int i = 0; i &lt; n; i++) {\nmaxpq.offer(new int[]{i, nums2[i]});\n}\nArrays.sort(nums1);\nint left = 0;\nint right = n - 1;\nint[] res = new int[n];\n\nwhile(!maxpq.isEmpty()) {\nint[] pair = maxpq.poll();\nint i = pair[0];\nint maxVal = pair[1];\nif(maxVal &lt; nums1[right]) {\nres[i] = nums1[right];\nright--;\n}\nelse {\nres[i] = nums1[left];\nleft++;\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/array/bs/","title":"Binary Search","text":"Difficulty LeetCode Note \ud83d\udfe2 704. Binary Search 704. Binary Search \ud83d\udfe0 34. Find First and Last Position of Element in Sorted Array 34. Find First and Last Position of Element in Sorted Array <p>\u4e8c\u5206\u67e5\u627e\u6846\u67b6</p> <pre><code>int binarySearch(int[] nums, int target) {\nint left = 0;\nint right = ... ;\nwhile(...) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\n...\n}\nelse if(nums[mid] &lt; target) {\nleft = ...\n}\nelse if(nums[mid] &gt; target) {\nright = ...\n}\n}\nreturn ...;\n}\n</code></pre>"},{"location":"algorithm/array/bs/#704-binary-search","title":"704. Binary Search","text":"<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-104 &lt; nums[i], target &lt; 104</code></li> <li>All the integers in <code>nums</code> are unique.</li> <li><code>nums</code> is sorted in ascending order.</li> </ul> <pre><code>class Solution {\npublic int search(int[] nums, int target) {\nint left = 0;\nint right = nums.length - 1;\nwhile(left &lt;= right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\nreturn mid;\n}\nelse if(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid - 1;\n}\n}\nreturn -1;\n}\n}\n</code></pre> <ol> <li><code>while</code>\u5faa\u73af\u7684\u6761\u4ef6\u662f<code>&lt;=</code>\u800c\u975e<code>&lt;</code>\uff0c\u7531\u4e8e\u521d\u59cb\u5316\u65f6<code>right == nums.length-1</code>\uff0c\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u533a\u95f4\u662f<code>[left,right]</code>\uff0c<code>while(left &lt;= right)</code>\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6\u662f<code>left == right + 1</code>\uff0c\u800c<code>while(left &lt; right)</code>\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6\u662f<code>left == right</code>\uff0c\u533a\u95f4<code>[right,right]</code>\u975e\u7a7a\uff0c\u6f0f\u53bb\u4e86\u7d22\u5f15<code>right</code></li> <li>\u540c\u4e0a\u8ff0\u7406\u7531\uff0c\u641c\u7d22\u533a\u95f4\u4e3a<code>[left,right]</code>\u90a3\u4e48\uff0c\u5f53<code>nums[mid]</code>\u5df2\u7ecf\u88ab\u67e5\u627e\u8fc7\u540e\uff0c\u641c\u7d22\u533a\u95f4\u7684\u7ec8\u70b9\u6216\u8d77\u70b9\u5e94\u8be5\u4e3a<code>nums[mid-1]</code>\u6216<code>nums[mid+1]</code></li> <li>\u8be5\u7b97\u6cd5\u7684\u7f3a\u9677\u5728\u4e8e\u5f53\u5b58\u5728\u91cd\u590d\u5143\u7d20\u65f6\uff0c\u53ea\u4f1a\u8fd4\u56de\u6700\u4e2d\u95f4\u7684\u5143\u7d20</li> </ol> <p>\u5982\u679c\u9700\u8981\u5bfb\u627e\u5de6\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u641c\u7d22</p> <pre><code>int left_bound(int[] nums, int target) {\nint left = 0;\nint right = nums.length;\nwhile(left &lt; right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\nright = mid;\n}\nelse if(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid;\n}\n}\nreturn left;\n}\n</code></pre> <ol> <li><code>while(left &lt; right)</code>\uff0c<code>right = nums.length</code>\u800c\u975e<code>nums.length-1</code></li> </ol> <p>\u6bcf\u6b21\u5faa\u73af\u7684\u641c\u7d22\u533a\u95f4\u662f<code>[left,right)</code></p> <p><code>while(left &lt; right)</code>\u7684\u7ec8\u6b62\u6761\u4ef6\u662f<code>right == left</code>\uff0c\u533a\u95f4<code>[left,left)</code>\u4e3a\u7a7a</p> <ol> <li> <p>\u4e0d\u5b58\u5728<code>return -1</code>\u7684\u64cd\u4f5c\uff0c\u5982\u679c<code>nums</code>\u4e2d\u4e0d\u5b58\u5728<code>target</code>\uff0c\u5728\u8fd4\u56de\u65f6\u989d\u5916\u5224\u65ad\u4e00\u4e0b<code>nums[left]</code>\u662f\u5426\u7b49\u4e8e<code>target</code></p> </li> <li> <p><code>left = mid + 1, right = mid</code>\uff0c\u641c\u7d22\u533a\u95f4\u4e3a<code>[left,right)</code>\uff0c\u5f53<code>nums[mid]</code>\u88ab\u68c0\u6d4b\u8fc7\uff0c\u5de6\u4fa7\u641c\u7d22\u533a\u95f4\u4e3a<code>[left,mid)</code>\uff0c\u53f3\u4fa7\u641c\u7d22\u533a\u95f4\u4e3a<code>[mid+1,right)</code></p> </li> <li> <p><code>nums[mid] == target; right = mid</code>\u4f7f\u5f97\u7b97\u6cd5\u80fd\u591f\u641c\u7d22\u5de6\u4fa7\u8fb9\u754c</p> </li> <li> <p><code>return left</code>\u7b49\u4ef7\u4e8e<code>return right</code>\uff0c\u56e0\u4e3a<code>while</code>\u5faa\u73af\u7ec8\u7ed3\u7684\u6761\u4ef6\u5c31\u662f<code>left == right</code></p> </li> </ol> <pre><code>int left_bound(int[] nums, int target) {\nint left = 0;\nint right = nums.length - 1;\nwhile(left &lt;= right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid - 1;\n}\nelse if(nums[mid] == target) {\nright == mid - 1;\n}\n}\nif(left == nums.length) return -1;\nreturn nums[left] == target ? left : -1;\n}\n</code></pre> <p>\u5bfb\u627e\u53f3\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u67e5\u627e</p> <pre><code>int right_bound(int[] nums, int target) {\nint left = 0;\nint right = nums.length;\nwhile(left &lt; right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid;\n}\n}\nreturn left - 1;\n}\n</code></pre> <p>\u8fd4\u56de<code>left-1</code>\u6216<code>right-1</code>\uff0c\u800c\u4e0d\u662f<code>left</code>\u6216<code>right</code>\uff0c\u539f\u56e0\u5728\u4e8e\uff0c\u641c\u7d22\u53f3\u4fa7\u8fb9\u754c\u65f6\u9501\u5b9a\u53f3\u8fb9\u754c\u7684\u6761\u4ef6\u5224\u65ad\u662f</p> <pre><code>if(nums[mid] == target) {\nleft = mid + 1;\n}\n</code></pre> <p><code>mid = left - 1</code>\uff0c<code>return mid</code>\u7b49\u4ef7\u4e8e<code>return left-1</code></p> <pre><code>while(left &lt; right) {\n...\n}\nif(left - 1 &lt; 0) return -1;\nreturn nums[left-1] == target ? (left - 1) : -1;\n</code></pre>"},{"location":"algorithm/array/bs/#34-find-first-and-last-position-of-element-in-sorted-array","title":"34. Find First and Last Position of Element in Sorted Array","text":"<p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p> <p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [], target = 0\nOutput: [-1,-1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 105</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>nums</code> is a non-decreasing array.</li> <li><code>-109 &lt;= target &lt;= 109</code></li> </ul> <pre><code>class Solution {\npublic int[] searchRange(int[] nums, int target) {\nint left = leftBound(nums,target);\nint right = rightBound(nums,target);\nreturn new int[]{left,right};\n}\npublic int leftBound(int[] nums, int target) {\nint left = 0;\nint right = nums.length-1;\nwhile(left &lt;= right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\nright = mid - 1;\n}\nelse if(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid - 1;\n}\n}\nif(left == nums.length) return -1;\nreturn nums[left] == target ? left : -1;\n}\npublic int rightBound(int[] nums, int target) {\nint left = 0;\nint right = nums.length - 1;\nwhile(left &lt;= right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid - 1;\n}\n}\nif(left - 1 &lt; 0) return -1;\nreturn nums[left-1] == target ? (left-1) : -1;\n}\n}\n</code></pre>"},{"location":"algorithm/array/diff/","title":"Difference Array","text":"Difficulty LeetCode Note \ud83d\udfe0 1109. Corporate Fight Bookings 1109. Corporate Fight Bookings \ud83d\udfe0 1094. Car Pooling 1094. Car Pooling <p>\u524d\u7f00\u548c\u6570\u7ec4PreSum Array\u5e94\u7528\u4e8e\u539f\u59cb\u6570\u7ec4<code>nums</code>\u5143\u7d20\u4e0d\u4f1a\u6539\u53d8\u7684\u60c5\u51b5\u4e0b</p> <pre><code>class PrefixSum {\nprivate int[] prefix;\npublic PrefixSum(int[] nums) {\nprefix = new int[nums.length+1];\nfor(int i = 1; i &lt; prefix.length; i++) {\nprefix[i] = prefix[i-1] + nums[i-1];\n// prefix[i]\u8868\u793anums[0...,i-1]\u7684\u548c\n}\n}\npublic int query(int i, int j) {\nreturn prefix[j+1] - prefix[i];\n}\n}\n</code></pre> <p>\u800c\u5dee\u5206\u6570\u7ec4\u7684\u9002\u7528\u573a\u666f\u662f\u9891\u7e41\u5bf9\u539f\u59cb\u6570\u7ec4\u7684\u67d0\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u8fdb\u884c\u589e\u51cf</p> <pre><code>int[] diff = new int[nums.length];\ndiff[0] = nums[0];\nfor(int i = 1; i &lt; nums.length; i++) {\ndiff[i] = nums[i] - nums[i-1];\n}\n</code></pre> <p>\u6839\u636e<code>diff</code>\u5dee\u5206\u6570\u7ec4\u53ef\u4ee5\u53cd\u63a8\u51fa\u539f\u59cb\u6570\u7ec4<code>nums</code></p> <pre><code>int[] res = new int[diff.length];\nres[0] = diff[0];\nfor(int i = 1; i &lt; diff.length; i++) {\nres[i] = res[i-1] + diff[i];\n}\n</code></pre> <p>\u5982\u679c\u9700\u8981\u5feb\u901f\u8fdb\u884c\u533a\u95f4\u589e\u51cf\uff0c\u4f8b\u5982\u9700\u8981\u5bf9\u533a\u95f4<code>nums[i..j]</code>\u7684\u5143\u7d20\u5168\u90e8<code>+3</code>\uff0c\u90a3\u4e48\u53ea\u9700\u8981<code>diff[i] += 3</code>\uff0c\u7136\u540e\u518d\u8ba9<code>diff[j+1] -= 3</code></p> <pre><code>class Difference {\nprivate int[] diff;\npublic Difference(int[] nums) {\nassert nums.length &gt; 0;\ndiff = new int[nums.length];\ndiff[0] = nums[0];\nfor(int i = 1; i &lt; nums.length; i++) {\ndiff[i] = nums[i] - nums[i-1];\n}\n}\npublic void increment(int i, int j, int val) {\ndiff[i] += val;\nif(j+1 &lt; diff.length) {\ndiff[j+1] -= val;\n}\n}\npublic int[] result() {\nint[] res = new int[diff.length];\nres[0] = diff[0];\nfor(int i = 1; i &lt; diff.length; i++) {\nres[i] = res[i-1] + diff[i];\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/array/diff/#1109-corporate-flight-bookings","title":"1109. Corporate Flight Bookings","text":"<p>There are <code>n</code> flights that are labeled from <code>1</code> to <code>n</code>.</p> <p>You are given an array of flight bookings <code>bookings</code>, where <code>bookings[i] = [firsti, lasti, seatsi]</code> represents a booking for flights <code>firsti</code> through <code>lasti</code> (inclusive) with <code>seatsi</code> seats reserved for each flight in the range.</p> <p>Return an array <code>answer</code> of length <code>n</code>, where <code>answer[i]</code> is the total number of seats reserved for flight <code>i</code>.</p> <p>Example 1:</p> <pre><code>Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]\n</code></pre> <p>Example 2:</p> <pre><code>Input: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>1 &lt;= bookings.length &lt;= 2 * 104</code></li> <li><code>bookings[i].length == 3</code></li> <li><code>1 &lt;= firsti &lt;= lasti &lt;= n</code></li> <li><code>1 &lt;= seatsi &lt;= 104</code></li> </ul> <pre><code>class Solution {\npublic int[] corpFlightBookings(int[][] bookings, int n) {\nint[] nums = new int[n];\nDifference df = new Difference(nums);\nfor(int[] booking : bookings) {\nint i = booking[0] - 1;\nint j = booking[1] - 1;\nint val = booking[2];\ndf.increment(i,j,val);\n}\nreturn df.result();\n}\n}\nclass Difference {\nprivate int[] diff;\npublic Difference(int[] nums) {\nassert nums.length &gt; 0;\ndiff = new int[nums.length];\ndiff[0] = nums[0];\nfor(int i = 1; i &lt; nums.length; i++) {\ndiff[i] = nums[i] - nums[i-1];\n}\n}\npublic void increment(int i, int j, int val) {\ndiff[i] += val;\nif(j+1 &lt; diff.length) {\ndiff[j+1] -= val;\n}\n}\npublic int[] result() {\nint[] res = new int[diff.length];\nres[0] = diff[0];\nfor(int i = 1; i &lt; diff.length; i++) {\nres[i] = res[i-1] + diff[i];\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/array/diff/#1094-car-pooling","title":"1094. Car Pooling","text":"<p>There is a car with <code>capacity</code> empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p> <p>You are given the integer <code>capacity</code> and an array <code>trips</code> where <code>trips[i] = [numPassengersi, fromi, toi]</code> indicates that the <code>ith</code> trip has <code>numPassengersi</code> passengers and the locations to pick them up and drop them off are <code>fromi</code> and <code>toi</code> respectively. The locations are given as the number of kilometers due east from the car's initial location.</p> <p>Return <code>true</code> if it is possible to pick up and drop off all passengers for all the given trips, or <code>false</code> otherwise.</p> <p>Example 1:</p> <pre><code>Input: trips = [[2,1,5],[3,3,7]], capacity = 4\nOutput: false\n</code></pre> <p>Example 2:</p> <pre><code>Input: trips = [[2,1,5],[3,3,7]], capacity = 5\nOutput: true\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= trips.length &lt;= 1000</code></li> <li><code>trips[i].length == 3</code></li> <li><code>1 &lt;= numPassengersi &lt;= 100</code></li> <li><code>0 &lt;= fromi &lt; toi &lt;= 1000</code></li> <li><code>1 &lt;= capacity &lt;= 105</code></li> </ul> <pre><code>class Solution {\npublic boolean carPooling(int[][] trips, int capacity) {\nint[] nums = new int[1001];\nDifference df = new Difference(nums);\nfor(int[] trip : trips) {\nint val = trip[0];\nint i = trip[1];\nint j = trip[2] - 1;\ndf.increment(i,j,val);\n}\nint[] res = df.result();\nfor(int i = 0; i &lt; res.length; i++) {\nif(capacity &lt; res[i]) {\nreturn false;\n}\n}\nreturn true;\n}\n}\nclass Difference {\nprivate int[] diff;\npublic Difference(int[] nums) {\nassert nums.length &gt; 0;\ndiff = new int[nums.length];\ndiff[0] = nums[0];\nfor(int i = 1; i &lt; nums.length; i++) {\ndiff[i] = nums[i] - nums[i-1];\n}\n}\npublic void increment(int i, int j, int val) {\ndiff[i] += val;\nif(j+1 &lt; diff.length) {\ndiff[j+1] -= val;\n}\n}\npublic int[] result() {\nint[] res = new int[diff.length];\nres[0] = diff[0];\nfor(int i = 1; i &lt; diff.length; i++) {\nres[i] = res[i-1] + diff[i];\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/array/double/","title":"Two Pointer","text":"Difficulty LeetCode Note \ud83d\udfe2 26. Remove Duplicates from Sorted Array 26. Remove Duplicates from Sorted Array \ud83d\udfe2 27. Remove Element 27. Remove Element \ud83d\udfe2 344. Reverse String 344. Reverse String \ud83d\udfe0 5. Longest Palindrome Substring 5. Longest Palindrome Substring"},{"location":"algorithm/array/double/#26-remove-duplicates-from-sorted-array","title":"26. Remove Duplicates from Sorted Array","text":"<p>Given an integer array <code>nums</code> sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p> <p>Return <code>k</code> after placing the final result in the first <code>k</code> slots of <code>nums</code>.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre><code>int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</code></pre> <p>If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul> <pre><code>class Solution {\npublic int removeDuplicates(int[] nums) {\nif(nums.length == 0) return 0;\nint slow = 0;\nint fast = 0;\nwhile(fast &lt; nums.length) {\nif(nums[fast] != nums[slow]) {\nslow++;\nnums[slow] = nums[fast];\n}\nfast++;\n}\nreturn slow+1;\n}\n}\n</code></pre>"},{"location":"algorithm/array/double/#27-remove-element","title":"27. Remove Element","text":"<p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> in-place. The relative order of the elements may be changed.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p> <p>Return <code>k</code> after placing the final result in the first <code>k</code> slots of <code>nums</code>.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre><code>int[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</code></pre> <p>If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <pre><code>Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic int removeElement(int[] nums, int val) {\nint fast = 0;\nint slow = 0;\nwhile(fast &lt; nums.length) {\nif(nums[fast] != val) {\nnums[slow] = nums[fast];\nslow++;\n}\nfast++;\n}\nreturn slow;\n}\n}\n</code></pre>"},{"location":"algorithm/array/double/#344-reverse-string","title":"344. Reverse String","text":"<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p> <p>You must do this by modifying the input array in-place with <code>O(1)</code> extra memory.</p> <p>Example 1:</p> <pre><code>Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s[i]</code> is a printable ascii character.</li> </ul> <pre><code>class Solution {\npublic void reverseString(char[] s) {\nint left = 0;\nint right = s.length - 1;\nwhile(left &lt; right) {\nchar temp = s[left];\ns[left] = s[right];\ns[right] = temp;\nleft++;\nright--;\n}\n}\n}\n</code></pre>"},{"location":"algorithm/array/double/#5-longest-palindromic-substring","title":"5. Longest Palindromic Substring","text":"<p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p> <p>Example 1:</p> <pre><code>Input: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"cbbd\"\nOutput: \"bb\"\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of only digits and English letters.</li> </ul> <pre><code>class Solution {\npublic String longestPalindrome(String s) {\nString res = \"\";\nfor(int i = 0; i &lt; s.length(); i++) {\nString s1 = palindrome(s,i,i);\nString s2 = palindrome(s,i,i+1);\nres = res.length() &gt; s1.length() ? res : s1;\nres = res.length() &gt; s2.length() ? res : s2;\n}\nreturn res;\n}\nprivate String palindrome(String s, int l, int r) {\nwhile(l &gt;= 0 &amp;&amp; r &lt; s.length() &amp;&amp; s.charAt(l) == s.charAt(r)) {\nl--;\nr++;\n}\nreturn s.substring(l+1,r);\n}\n}\n</code></pre>"},{"location":"algorithm/array/extre/","title":"Extremum and Binary Search","text":"Difficulty LeetCode Note \ud83d\udfe0 875. Koko Eating Bananas 875. Koko Eating Bananas \ud83d\udfe0 1011. Capacity To Ship Packages Within D Days 1011. Capacity To Ship Packages Within D Days \ud83d\udd34 410. Split Array Largest Sum 410. Split Array Largest Sum <p>\u5df2\u77e5\u81ea\u53d8\u91cf<code>x</code>\uff0c\u5173\u4e8e<code>x</code>\u7684\u5355\u8c03\u51fd\u6570<code>f(x)</code>\uff0c\u76ee\u6807\u503c<code>target</code>\uff0c\u8bd5\u6c42\u7ea6\u675f\u6761\u4ef6<code>f(x) == target</code>\u65f6<code>x=?</code></p>"},{"location":"algorithm/array/extre/#875-koko-eating-bananas","title":"875. Koko Eating Bananas","text":"<p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>ith</code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p> <p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p> <p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p> <p>Return the minimum integer <code>k</code> such that she can eat all the bananas within <code>h</code> hours.</p> <p>Example 1:</p> <pre><code>Input: piles = [3,6,7,11], h = 8\nOutput: 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: piles = [30,11,23,4,20], h = 5\nOutput: 30\n</code></pre> <p>Example 3:</p> <pre><code>Input: piles = [30,11,23,4,20], h = 6\nOutput: 23\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= piles.length &lt;= 104</code></li> <li><code>piles.length &lt;= h &lt;= 109</code></li> <li><code>1 &lt;= piles[i] &lt;= 109</code></li> </ul> <pre><code>class Solution {\npublic int minEatingSpeed(int[] piles, int h) {\nint left = 1;\nint right = 1000000000 + 1;\nwhile(left &lt; right) {\nint mid = left + (right - left) / 2;\nif(f(piles, mid) == h) {\nright = mid;\n}\nelse if(f(piles, mid) &lt; h) {\nright = mid;\n}\nelse if(f(piles, mid) &gt; h) {\nleft = mid + 1;\n}\n}\nreturn left;\n}\nprivate int f(int[] piles, int x) {\nint hours = 0;\nfor(int i = 0; i &lt; piles.length; i++) {\nhours += piles[i] / x;\nif(piles[i] % x &gt; 0) {\nhours++;\n}\n}\nreturn hours;\n}\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u672c\u4f8b\u4e2d\u51fd\u6570<code>f(x)</code>\u662f\u9012\u51cf\u7684\uff0c\u5f53<code>f(piles, mid) != h</code>\u65f6\uff0c\u6ce8\u610f<code>left</code>\u4e0e<code>right</code>\u7684\u4fee\u6539</p>"},{"location":"algorithm/array/extre/#1011-capacity-to-ship-packages-within-d-days","title":"1011. Capacity To Ship Packages Within D Days","text":"<p>A conveyor belt has packages that must be shipped from one port to another within <code>days</code> days.</p> <p>The <code>ith</code> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p> <p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>days</code> days.</p> <p>Example 1:</p> <pre><code>Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</code></pre> <p>Example 2:</p> <pre><code>Input: weights = [3,2,2,4,1,4], days = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</code></pre> <p>Example 3:</p> <pre><code>Input: weights = [1,2,3,1,1], days = 4\nOutput: 3\nExplanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= days &lt;= weights.length &lt;= 5 * 104</code></li> <li><code>1 &lt;= weights[i] &lt;= 500</code></li> </ul> <pre><code>class Solution {\npublic int shipWithinDays(int[] weights, int days) {\nint left = 0;\nint right = 1;\nfor(int w : weights) {\nleft = Math.max(left, w);\nright += w;\n}\nwhile(left &lt; right) {\nint mid = left + (right - left) / 2;\nif(f(weights, mid) == days) {\nright = mid;\n}\nelse if(f(weights, mid) &lt; days) {\nright = mid;\n}\nelse if(f(weights, mid) &gt; days) {\nleft = mid + 1;\n}\n}\nreturn left;\n}\nprivate int f(int[] weights, int x) {\nint days = 0;\nfor(int i = 0; i &lt; weights.length;) {\nint cap = x;\nwhile(i &lt; weights.length) {\nif(cap &lt; weights[i]) break;\nelse cap -= weights[i];\ni++;\n}\ndays++;\n}\nreturn days;\n}\n}\n</code></pre>"},{"location":"algorithm/array/extre/#410-split-array-largest-sum","title":"410. Split Array Largest Sum","text":"<p>Given an array <code>nums</code> which consists of non-negative integers and an integer <code>m</code>, you can split the array into <code>m</code> non-empty continuous subarrays.</p> <p>Write an algorithm to minimize the largest sum among these <code>m</code> subarrays.</p> <p>Example 1:</p> <pre><code>Input: nums = [7,2,5,10,8], m = 2\nOutput: 18\nExplanation:\nThere are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,3,4,5], m = 2\nOutput: 9\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1,4,4], m = 3\nOutput: 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 106</code></li> <li><code>1 &lt;= m &lt;= min(50, nums.length)</code></li> </ul> <p>\u672c\u9898\u7b49\u4ef7\u4e8e1011</p> <pre><code>class Solution {\npublic int splitArray(int[] nums, int m) {\nint left = 0;\nint right = 1;\nfor(int i = 0; i &lt; nums.length; i++) {\nleft = Math.max(left, nums[i]);\nright += nums[i];\n}\nwhile(left &lt; right) {\nint mid = left + (right - left) / 2;\nif(f(nums, mid) == m) {\nright = mid;\n}\nelse if(f(nums, mid) &lt; m) {\nright = mid;\n}\nelse if(f(nums, mid) &gt; m) {\nleft = mid + 1;\n}\n}\nreturn left;\n}\nprivate int f(int[] nums, int x) {\nint m = 0;\nfor(int i = 0; i &lt; nums.length;) {\nint sum = x;\nwhile(i &lt; nums.length) {\nif(sum &lt; nums[i]) break;\nelse sum -= nums[i];\ni++;\n}\nm++;\n}\nreturn m;\n}\n}\n</code></pre>"},{"location":"algorithm/array/o1/","title":"Delete and Search in an Array with O(1)","text":"Difficulty LeetCode Note \ud83d\udfe0 380. Insert Delete GetRandom O(1) 380. Insert Delete GetRandom O(1) \ud83d\udd34 710. Random Pick with Blacklist 710. Random Pick with Blacklist"},{"location":"algorithm/array/o1/#380-insert-delete-getrandom-o1","title":"380. Insert Delete GetRandom O(1)","text":"<p>Implement the <code>RandomizedSet</code> class:</p> <ul> <li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li> <li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li> <li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li> <li><code>int getRandom()</code> Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</li> </ul> <p>You must implement the functions of the class such that each function works in average <code>O(1)</code> time complexity.</p> <p>Example 1:</p> <pre><code>Input\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>-231 &lt;= val &lt;= 231 - 1</code></li> <li>At most <code>2 * ``105</code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li> <li>There will be at least one element in the data structure when <code>getRandom</code> is called.</li> </ul> <pre><code>class RandomizedSet {\npublic ArrayList&lt;Integer&gt; nums;\npublic HashMap&lt;Integer, Integer&gt; valToIndex;\n\npublic RandomizedSet() {\nnums = new ArrayList&lt;&gt;();\nvalToIndex = new HashMap&lt;&gt;();\n}\n\npublic boolean insert(int val) {\nif(valToIndex.containsKey(val)) {\nreturn false;\n}\nvalToIndex.put(val, nums.size());\nnums.add(val);\nreturn true;\n}\n\npublic boolean remove(int val) {\nif(!valToIndex.containsKey(val)) {\nreturn false;\n}\nint index = valToIndex.get(val); // \u662f\u4e00\u4e2aindex\nint back = nums.get(nums.size()-1); // \u662f\u4e00\u4e2avalue\nvalToIndex.put(back, index); // (val,index)\nint temp = nums.get(index); // \u662f\u4e00\u4e2aval\nnums.set(index, back);\nnums.set(nums.size()-1, temp);\nnums.remove(nums.size()-1);\nvalToIndex.remove(val);\nreturn true;\n}\n\npublic int getRandom() {\nRandom rand = new Random();\nreturn nums.get((int)(Math.random() * nums.size()));\n}\n}\n</code></pre>"},{"location":"algorithm/array/o1/#710-random-pick-with-blacklist","title":"710. Random Pick with Blacklist","text":"<p>You are given an integer <code>n</code> and an array of unique integers <code>blacklist</code>. Design an algorithm to pick a random integer in the range <code>[0, n - 1]</code> that is not in <code>blacklist</code>. Any integer that is in the mentioned range and not in <code>blacklist</code> should be equally likely to be returned.</p> <p>Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(int n, int[] blacklist)</code> Initializes the object with the integer <code>n</code> and the blacklisted integers <code>blacklist</code>.</li> <li><code>int pick()</code> Returns a random integer in the range <code>[0, n - 1]</code> and not in <code>blacklist</code>.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\nOutput\n[null, 0, 4, 1, 6, 1, 0, 4]\n\nExplanation\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 109</code></li> <li><code>0 &lt;= blacklist.length &lt;= min(105, n - 1)</code></li> <li><code>0 &lt;= blacklist[i] &lt; n</code></li> <li>All the values of <code>blacklist</code> are unique.</li> <li>At most <code>2 * 104</code> calls will be made to <code>pick</code>.</li> </ul> <pre><code>class Solution {\npublic:\nint sz;\nunordered_map&lt;int, int&gt; mapping;\n\nSolution(int n, vector&lt;int&gt;&amp; blacklist) {\nsz = n - blacklist.size();\nfor (int b : blacklist) {\nmapping[b] = 666;\n}\n\nint last = n - 1;\nfor (int b : blacklist) {\nif (b &gt;= sz) {\ncontinue;\n}\nwhile(mapping.count(last)) {\nlast--;\n}\nmapping[b] = last;\nlast--;\n}\n}\n\nint pick() {\nint index = rand() % sz;\nif(mapping.count(index)) {\nreturn mapping[index];\n}\nreturn index;\n}\n};\n</code></pre> <p>\u901a\u8fc7\u54c8\u5e0c\u8868\u7684\u952e\u503c\u5bf9\uff0c\u5bf9\u5728<code>sz</code>\u5de6\u4fa7\u7684<code>blacklist</code>\u5143\u7d20\u548c\u53f3\u4fa7\u7684\u975e<code>blacklist</code>\u5143\u7d20\u5efa\u7acb\u8fde\u63a5\uff0c\u5f53\u968f\u673a\u6570\u53d6\u5230\u5de6\u4fa7\u7684<code>blacklist</code>\u5143\u7d20\uff0c\u8fd4\u56de\u503c\u5e94\u53d8\u4e3a\u5176\u76f8\u5173\u8054\u7684\u53f3\u4fa7\u975e<code>blacklist</code>\u5143\u7d20\u5bf9\u5e94\u7684\u7d22\u5f15\uff0c\u4ece\u800c\u5b9e\u73b0\u5b8c\u5168\u968f\u673a</p>"},{"location":"algorithm/array/presum/","title":"Prefix Sum Array","text":"Difficulty LeetCode Note \ud83d\udfe2 303. Range Sum Query - Immutable 303. Range Sum Query - Immutable \ud83d\udfe0 304. Range Sum Query 2D - Immutable 304. Range Sum Query 2D - Immutable"},{"location":"algorithm/array/presum/#303-range-sum-query-immutable","title":"303. Range Sum Query - Immutable","text":"<p>Given an integer array <code>nums</code>, handle multiple queries of the following type:</p> <ol> <li>Calculate the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive where <code>left &lt;= right</code>.</li> </ol> <p>Implement the <code>NumArray</code> class:</p> <ul> <li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li> <li><code>int sumRange(int left, int right)</code> Returns the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-105 &lt;= nums[i] &lt;= 105</code></li> <li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li> <li>At most <code>104</code> calls will be made to <code>sumRange</code>.</li> </ul> <pre><code>class Solution {\nprivate int[] preSum;\npublic NumArray(int[] nums) {\npreSum = new int[nums.length+1];\nfor(int i = 1; i &lt; preSum.length; i++) {\npreSum[i] = preSum[i-1] + nums[i-1];\n}\n}\npublic int sumRange(int left, int right) {\nreturn preSum[right+1] - preSum[left];\n}\n}\n</code></pre>"},{"location":"algorithm/array/presum/#304-range-sum-query-2d-immutable","title":"304. Range Sum Query 2D - Immutable","text":"<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p> <ul> <li>Calculate the sum of the elements of <code>matrix</code> inside the rectangle defined by its upper left corner <code>(row1, col1)</code> and lower right corner <code>(row2, col2)</code>.</li> </ul> <p>Implement the <code>NumMatrix</code> class:</p> <ul> <li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li> <li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the sum of the elements of <code>matrix</code> inside the rectangle defined by its upper left corner <code>(row1, col1)</code> and lower right corner <code>(row2, col2)</code>.</li> </ul> <p>You must design an algorithm where <code>sumRegion</code> works on <code>O(1)</code> time complexity.</p> <p>Example 1:</p> <p></p> <pre><code>Input\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\n\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-104 &lt;= matrix[i][j] &lt;= 104</code></li> <li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li> <li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li> <li>At most <code>104</code> calls will be made to <code>sumRegion</code>.</li> </ul> <pre><code>class Matrix {\nprivate int[][] preSum;\npublic NumMatrix(int[][] matrix) {\nint m = matrix.length;\nint n = matrix[0].length;\nif(m == 0 || n == 0) return;\npreSum = new int[m+1][n+1];\nfor(int i = 1; i &lt;= m; i++) {\nfor(int j = 1; j &lt;= n; j++) {\npreSum[i][j] = preSum[i-1][j] + preSum[i][j-1] - preSum[i-1][j-1] + matrix[i-1][j-1];\n}\n}\n}\npublic int sumRegion(int row1, int col1, int row2, int col2) {\nreturn preSum[row2+1][col2+1] - preSum[row1][col2+1] - preSum[row2+1][col1] + preSum[row1][col1];\n}\n}\n</code></pre>"},{"location":"algorithm/array/randweight/","title":"Random Pick with Weight","text":"Difficulty LeetCode Note \ud83d\udfe0 528. Random Pick with Weight 528. Random Pick with Weight <p>\u4e8c\u5206\u641c\u7d22\u7b97\u6cd5\u4e2d\uff0c\u5f53\u76ee\u6807\u5143\u7d20<code>target</code>\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4<code>nums</code>\u4e2d\u65f6\uff0c\u641c\u7d22\u5de6\u4fa7\u8fb9\u754c\u7684\u4e8c\u5206\u641c\u7d22\u7684\u8fd4\u56de\u503c\u4e3a\uff1a</p> <ol> <li>\u8fd4\u56de\u7684\u8fd9\u4e2a\u503c\u662f<code>nums</code>\u4e2d\u5927\u4e8e\u7b49\u4e8e<code>target</code>\u7684\u6700\u5c0f\u5143\u7d20\u7d22\u5f15</li> <li>\u8fd4\u56de\u7684\u8fd9\u4e2a\u503c\u662f<code>target</code>\u5e94\u8be5\u63d2\u5165\u5728<code>nums</code>\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e</li> <li>\u8fd4\u56de\u7684\u8fd9\u4e2a\u503c\u662f<code>nums</code>\u4e2d\u5c0f\u4e8e<code>target</code>\u7684\u5143\u7d20\u4e2a\u6570</li> </ol>"},{"location":"algorithm/array/randweight/#528-random-pick-with-weight","title":"528. Random Pick with Weight","text":"<p>You are given a 0-indexed array of positive integers <code>w</code> where <code>w[i]</code> describes the weight of the <code>ith</code> index.</p> <p>You need to implement the function <code>pickIndex()</code>, which randomly picks an index in the range <code>[0, w.length - 1]</code> (inclusive) and returns it. The probability of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p> <ul> <li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput\n[null,0]\n\nExplanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n</code></pre> <p>Example 2:</p> <pre><code>Input\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput\n[null,1,1,1,1,0]\n\nExplanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= w.length &lt;= 104</code></li> <li><code>1 &lt;= w[i] &lt;= 105</code></li> <li><code>pickIndex</code> will be called at most <code>104</code> times.</li> </ul> <pre><code>class Solution {\nprivate int[] preSum;\nprivate Random rand = new Random();\npublic Solution(int[] w) {\nint n = w.length;\npreSum = new int[n+1];\npreSum[0] = 0;\nfor(int i = 1; i &lt;= n; i++) {\npreSum[i] = preSum[i-1] + w[i-1];\n}\n}\n\npublic int pickIndex() {\nint n = preSum.length;\nint target = rand.nextInt(preSum[n-1]) + 1;\nreturn leftBound(preSum, target) - 1;\n}\n\nprivate int leftBound(int[] nums, int target) {\nif(nums.length == 0) return -1;\nint left = 0;\nint right = nums.length;\nwhile(left &lt; right) {\nint mid = left + (right - left) / 2;\nif(nums[mid] == target) {\nright = mid;\n}\nelse if(nums[mid] &lt; target) {\nleft = mid + 1;\n}\nelse if(nums[mid] &gt; target) {\nright = mid;\n}\n}\nreturn left;\n}\n}\n</code></pre>"},{"location":"algorithm/array/rk/","title":"Rabin-Karp Algorithm","text":"Difficulty LeetCode Note \ud83d\udfe0 187. Repeated DNA Sequences 187. Repeated DNA Sequences \ud83d\udfe2 28. Implement strStr() 28. Implement strStr()"},{"location":"algorithm/array/rk/#187-repeated-dna-sequences","title":"187. Repeated DNA Sequences","text":"<p>The DNA sequence is composed of a series of nucleotides abbreviated as <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, and <code>'T'</code>.</p> <ul> <li>For example, <code>\"ACGAATTCCG\"</code> is a DNA sequence.</li> </ul> <p>When studying DNA, it is useful to identify repeated sequences within the DNA.</p> <p>Given a string <code>s</code> that represents a DNA sequence, return all the <code>10</code>-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s[i]</code> is either <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, or <code>'T'</code>.</li> </ul> <p>Sliding Window\u5199\u6cd5</p> <pre><code>class Solution {\npublic List&lt;String&gt; findRepeatedDnaSequences(String s) {\nHashSet&lt;String&gt; seen = new HashSet&lt;&gt;();\nHashSet&lt;String&gt; res = new HashSet&lt;&gt;();\nString window = \"\";\nint left = 0;\nint right = 0;\nint len = 10;\nwhile(right &lt; s.length()) {\nchar c = s.charAt(right);\nwindow += c;\nright++;\nif(right - left == len) {\nif(seen.contains(window)) {\nres.add(window);\n}\nelse {\nseen.add(window);\n}\nwindow = window.substring(1);\nleft++;\n}\n}\nList&lt;String&gt; finalRes = new LinkedList&lt;&gt;(res);\nreturn finalRes;\n}\n}\n</code></pre> <pre><code>class Solution {\nList&lt;String&gt; findRepeatedDnaSequences(String s) {\nint[] nums = new int[s.length()];\nfor(int i = 0; i &lt; nums.length; i++) {\nswitch(s.charAt(i)) {\ncase 'A':\nnums[i] = 0;\nbreak;\ncase 'G':\nnums[i] = 1;\nbreak;\ncase 'C':\nnums[i] = 2;\nbreak;\ncase 'T':\nnums[i] = 3;\nbreak;\n}\n}\nHashSet&lt;Integer&gt; seen = new HashSet&lt;&gt;();\nHashSet&lt;String&gt; res = new HashSet&lt;&gt;();\nint L = 10;\nint R = 4;\nint RL = (int) Math.pow(R, L-1);\nint windowHash = 0;\nint left = 0;\nint right = 0;\nwhile(right &lt; nums.length) {\nwindowHash = R * windowHash + nums[right];\nright++;\nif(right - left == L) {\nif(seen.contains(windowHash)) {\nres.add(s.substring(left,right));\n}\nelse {\nseen.add(windowHash);\n}\nwindowHash = windowHash - nums[left] * RL;\nleft++;\n}\n}\nreturn new LinkedList&lt;&gt;(res);\n}\n}\n</code></pre> <p>\u4e0d\u8981\u6bcf\u6b21\u90fd\u53bb\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u7b26\u5730\u6bd4\u8f83\u5b50\u4e32\u548c\u6a21\u5f0f\u4e32\uff0c\u800c\u662f\u7ef4\u62a4\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u8fd0\u7528\u6ed1\u52a8\u54c8\u5e0c\u7b97\u6cd5\u4e00\u8fb9\u6ed1\u52a8\u4e00\u8fb9\u8ba1\u7b97\u5b57\u7b26\u4e2d\u7684\u54c8\u5e0c\u503c\uff0c\u4f7f\u7528\u54c8\u5e0c\u503c\u53bb\u548c\u6a21\u5f0f\u4e32\u7684\u54c8\u5e0c\u503c\u6bd4\u8f83\uff0c\u4ece\u800c\u907f\u514d\u622a\u53d6\u5b50\u4e32\uff0c\u4ee5\u964d\u4f4e\u7b97\u6cd5\u590d\u6742\u5ea6\u3002</p> <p>\u4ee5ASCII\u7801\u4e3a\u4f8b\uff0cASCII\u672c\u8d28\u4e0a\u75310~255\u5171256\u4e2a\u6570\u5b57\uff0c\u5206\u522b\u5bf9\u5e94\u82f1\u6587\u5b57\u7b26\u548c\u82f1\u6587\u7b26\u53f7\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a<code>L</code>\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7b49\u4ef7\u7406\u89e3\u4e3a\u4e00\u4e2a<code>L</code>\u4f4d\u7684256\u8fdb\u5236\u6570\u5b57\uff0c\u8fd9\u4e2a\u6570\u5b57\u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u54c8\u5e0c\u503c\u3002</p> <pre><code>String txt;\nString pat;\n\nint L = pat.length();\nint R = 256;\nint RL = (int) Math.(R,L-1);\nint windowHash = 0;\nlong patHash = 0;\nfor(int i = 0; i &lt; pat.length(); i++) {\npatHash = R * patHash + pat.charAt(i);\n}\nint left = 0;\nint right = 0;\nwhile(right &lt; txt.length()) {\nwindowHash = R * windowHash + txt[right];\nright++;\nif(right - left == L) {\nif(patHash == windowHash) {\nreturn left;\n}\nwindowHash = windowHash - txt[left] * RL;\nleft++;\n}\n}\nreturn -1;\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6574\u578b\u6ea2\u51fa</p> <p>\u4e3a\u5c06\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u6620\u5c04\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u8303\u56f4\u5185\uff0c\u91c7\u7528\u6c42\u6a21\u7684\u65b9\u6cd5</p> <p>\u4f46\u901a\u8fc7\u6c42\u6a21\u540e\u7684\u54c8\u5e0c\u503c\u4e5f\u65e0\u6cd5\u548c\u539f\u59cb\u5b57\u7b26\u4e32\u4e00\u4e00\u5bf9\u5e94\uff0c\u53ef\u80fd\u51fa\u73b0\u4e00\u5bf9\u591a\u7684\u60c5\u51b5\uff0c\u5373\u54c8\u5e0c\u51b2\u7a81</p> <p>\u5728Rabin-Karp\u7b97\u6cd5\u4e2d\uff0c\u5f53<code>windowHash == patHash</code>\u65f6\uff0c\u4f7f\u7528\u66b4\u529b\u5339\u914d\u7b97\u6cd5\u68c0\u67e5\u4e00\u4e0b\u7a97\u53e3\u4e2d\u7684\u5b57\u7b26\u4e32\u548c<code>pat</code>\u662f\u5426\u76f8\u540c\u5c31\u53ef\u4ee5\u907f\u514d\u54c8\u5e0c\u51b2\u7a81</p> <pre><code>int rabinKarp(String txt, String pat) {\nint L = pat.length();\nint R = 256;\nlong Q = 1658598167;\nlong RL = 1;\nfor(int i = 1; i &lt;= L-1; i++) {\nRL = (RL * R) % Q;\n}\nlong patHash = 0;\nfor(int i = 0; i &lt; pat.length(); i++) {\npatHash = (R * patHash + pat.charAt(i)) % Q;\n}\nlong windowHash = 0;\nint left = 0;\nint right = 0;\nwhile(right &lt; txt.length()) {\nwindowHash = ((R*windowHash) % Q + txt.charAt(right)) % Q;\nright++;\nif(right - left == L) {\nif(windowHash == patHash) {\nif(pat.equals(txt.substring(left,right))) {\nreturn left;\n}\n}\nwindowHash = (windowHash - (txt.charAt(left)*RL)%Q + Q) % Q;\nleft++;\n}\n}\nreturn -1;\n}\n</code></pre>"},{"location":"algorithm/array/rk/#28-implement-strstr","title":"28. Implement strStr()","text":"<p>mplement strStr().</p> <p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p> <p>Clarification:</p> <p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p> <p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C's strstr() and Java's indexOf().</p> <p>Example 1:</p> <pre><code>Input: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n</code></pre> <p>Example 2:</p> <pre><code>Input: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= haystack.length, needle.length &lt;= 104</code></li> <li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li> </ul> <pre><code>class Solution {\npublic int strStr(String haystack, String needle) {\nint l = needle.length();\nint r = 256;\nlong q = 1658598167;\nlong rl = 1;\nfor(int i = 1; i &lt;= l - 1; i++) {\nrl = (rl * r) % q;\n}\nlong needleHash = 0;\nfor(int i = 0; i &lt; needle.length(); i++) {\nneedleHash = (r * needleHash +              needle.charAt(i)) % q;\n}\nlong windowHash = 0;\nint left = 0;\nint right = 0;\nwhile(right &lt; haystack.length()) {\nwindowHash = ((r * windowHash) % q + haystack.charAt(right)) % q;\nright++;\nif(right - left == l) {\nif(windowHash == needleHash) {\nif(needle.equals(haystack.substring(left,right))) {\nreturn left;\n}\n}\nwindowHash = (windowHash - (haystack.charAt(left)*rl)%q+q)%q;\nleft++;\n}\n}\nreturn -1;\n}\n}\n</code></pre>"},{"location":"algorithm/array/rm/","title":"Remove Duplicate Elements with <code>Stack</code>","text":"Difficulty LeetCode Note \ud83d\udfe0 316. Remove Duplicate Letters 316. Remove Duplicate Letters"},{"location":"algorithm/array/rm/#316-remove-duplicate-letters","title":"316. Remove Duplicate Letters","text":"<p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p> <p>Example 1:</p> <pre><code>Input: s = \"bcabc\"\nOutput: \"abc\"\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"cbacdcbc\"\nOutput: \"acdb\"\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul> <p>Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</p> <pre><code>class Solution {\npublic String smallestSubsequence(String s) {\nStack&lt;Character&gt; stk = new Stack&lt;&gt;();\nboolean[] inStack = new boolean[256];\nint[] count = new int[256];\nfor(int i = 0; i &lt; s.length(); i++) {\ncount[s.charAt(i)]++;\n}\nfor(char c : s.toCharArray()) {\ncount[c]--;\nif(inStack[c]) continue;\nwhile(!stk.isEmpty() &amp;&amp; stk.peek() &gt; c) {\nif(count[stk.peek()] == 0) {\nbreak;\n}\ninStack[stk.pop()] = false;\n}\nstk.push(c);\ninStack[c] = true;\n}\n\nStringBuilder sb = new StringBuilder();\nwhile(!stk.isEmpty()) {\nsb.append(stk.pop());\n}\nreturn sb.reverse().toString();\n}\n}\n</code></pre>"},{"location":"algorithm/array/sliding/","title":"Sliding Window","text":"Difficulty LeetCode Note \ud83d\udd34 76. Minimum Window Substring 76. Minimum Window Substring \ud83d\udfe0 567. Permutation in String 567. Permutation in String \ud83d\udfe0 438. Find All Anagrams in a String 438. Find All Anagrams in a String \ud83d\udfe0 3. Longest Substring Without Repeating Characters 3. Longest Substring Without Repeating Characters <p>\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u7684\u4ee3\u7801\u6846\u67b6</p> <pre><code>void slidingWindow(string s) {\nunordered_map&lt;char, int&gt; window;\n\nint left = 0;\nint right = 0;\nwhile(right &lt; s.size()) {\n// c \u662f\u5c06\u79fb\u5165\u7a97\u53e3\u7684\u5b57\u7b26\nchar c = s[right];\n// \u589e\u5927\u7a97\u53e3\nright++;\n// \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n...\nwhile(window needs shrink) {\n// d \u662f\u5c06\u79fb\u51fa\u7a97\u53e3\u7684\u5b57\u7b26\nchar d = s[left];\n// \u7f29\u5c0f\u7a97\u53e3\u2018\nleft++;\n// \u8fdb\u884c\u7a97\u53e3\u5185\u6570\u636e\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\n...\n}\n}\n}\n</code></pre>"},{"location":"algorithm/array/sliding/#76-minimum-window-substring","title":"76. Minimum Window Substring","text":"<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return the minimum window substring of <code>s</code> such that every character in <code>t</code> (including duplicates) is included in the window. If there is no such substring, return the empty string <code>\"\"</code>.</p> <p>The testcases will be generated such that the answer is unique.</p> <p>A substring is a contiguous sequence of characters within the string.</p> <p>Example 1:</p> <pre><code>Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == s.length</code></li> <li><code>n == t.length</code></li> <li><code>1 &lt;= m, n &lt;= 105</code></li> <li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li> </ul> <ol> <li>\u9996\u5148\u8003\u8651\u7a97\u53e3\u7684\u533a\u95f4\uff0c\u521d\u59cb\u5316<code>left = right = 0</code>\uff0c\u7d22\u5f15\u7684\u533a\u95f4\u4e3a<code>[left,right)</code>\uff0c\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u53ef\u4ee5\u4fdd\u8bc1\u521d\u59cb\u533a\u95f4<code>[0,0)</code>\u4e0d\u5305\u542b\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\uff0c\u540c\u65f6<code>right</code>\u53f3\u79fb\u540e\u7684\u533a\u95f4<code>[0,1)</code>\u5305\u542b\u4e86\u5143\u7d20<code>0</code></li> <li>\u5148\u4e0d\u65ad\u589e\u52a0<code>right</code>\u6269\u5927\u7a97\u53e3<code>[left,right)</code>\uff0c\u76f4\u5230\u7a97\u53e3\u7684\u5b57\u7b26\u4e32\u7b26\u5408\u8981\u6c42</li> <li>\u505c\u6b62\u589e\u52a0<code>right</code>\uff0c\u8f6c\u800c\u4e0d\u65ad\u589e\u52a0<code>left</code>\u4ee5\u7f29\u5c0f\u7a97\u53e3<code>[left,right)</code>\uff0c\u76f4\u5230\u7a97\u53e3\u4e2d\u7684\u5b57\u7b26\u4e32\u4e0d\u518d\u7b26\u5408\u8981\u6c42</li> </ol> <pre><code>graph TD\nA[\u66f4\u65b0right\u548cwindow] --&gt; B[\u66f4\u65b0count]\nB --&gt; C{count\u662f\u5426\u7b49\u4e8etsize}\nC --&gt;|\u54261|A\nC --&gt;|\u662f1|D[upgrate start and len]\nD --&gt; E[\u66f4\u65b0left\u548cwindow]\nE --&gt; F[\u66f4\u65b0count]\nF --&gt; C\nC --&gt;|\u662f2|E\nC --&gt;|\u54262|G[\u8f93\u51fastart/len]\n</code></pre> <pre><code>class Solution {\npublic String minWindow(String s, String t) {\nHashMap&lt;Character, Integer&gt; window = new HashMap&lt;&gt;();\nHashMap&lt;Character, Integer&gt; need = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; t.length(); i++) {\nchar c = t.charAt(i);\nneed.put(c,t_map.getOrDefault(c,0)+1);\n}\nint left = 0;\nint right = 0;\nint count = 0;\nint len = Integer.MAX_VALUE;\nint start = 0;\nwhile(right &lt; s.length()) {\nchar c = s.charAt(right);\nright++;\nif(t_map.containsKey(c)) {\nwindow.put(c,window.getOrDefault(c,0)+1);\nif(window.get(c).equals(need.get(c))) {\ncount++;\n}\n}\nwhile(count == need.size()) {\nif(right - left &lt; len) {\nstart = left;\nlen = right - left;\n}\nchar d = s.charAt(left);\nleft++;\nif(need.containsKey(d)) {\nif(window.get(d).equals(need.get(d))) {\ncount--;\n}\nwindow.put(d, window.get(d)-1);\n}\n}\n}\nreturn len == Integer.MAX_VALUE ? \"\" : s.substring(start, start+len);\n}\n}\n</code></pre>"},{"location":"algorithm/array/sliding/#567-permutation-in-string","title":"567. Permutation in String","text":"<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code> if <code>s2</code> contains a permutation of <code>s1</code>, or <code>false</code> otherwise.</p> <p>In other words, return <code>true</code> if one of <code>s1</code>'s permutations is the substring of <code>s2</code>.</p> <p>Example 1:</p> <pre><code>Input: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true\nExplanation: s2 contains one permutation of s1 (\"ba\").\n</code></pre> <p>Example 2:</p> <pre><code>Input: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 104</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul> <pre><code>class Solution {\npublic boolean checkInclusion(String s1, String s2){\nHashMap&lt;Character, Integer&gt; need = new HashMap&lt;&gt;();\nHashMap&lt;Character, Integer&gt; window = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; s1.length(); i++) {\nchar ch = s1.charAt(i);\nneed.put(ch, need.getOrDefault(ch,0)+1);\n}\nint left = 0;\nint right = 0;\nint count = 0;\nwhile(right &lt; s2.length()) {\nchar c = s2.charAt(right);\nright++;\nif(need.containsKey(c)) {\nwindow.put(c, window.getOrDefault(c,0)+1);\nif(window.get(c).equals(need.get(c))) {\ncount++;\n}\n}\nwhile(right - left &gt;= s1.length()) {\nif(count == need.size()) {\nreturn true;\n}\nchar d = s2.charAt(left);\nleft++;\nif(need.containsKey(d)) {\nif(window.get(d).equals(need.get(d))) {\ncount--;\n}\nwindow.put(d, window.get(d)-1);\n}\n}\n}\nreturn false;\n}\n}\n</code></pre>"},{"location":"algorithm/array/sliding/#438-find-all-anagrams-in-a-string","title":"438. Find All Anagrams in a String","text":"<p>Given two strings <code>s</code> and <code>p</code>, return an array of all the start indices of <code>p</code>'s anagrams in <code>s</code>. You may return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p>Example 1:</p> <pre><code>Input: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, p.length &lt;= 3 * 104</code></li> <li><code>s</code> and <code>p</code> consist of lowercase English letters.</li> </ul> <pre><code>class Solution {\npublic List&lt;Integer&gt; findAnagrams(String s, String p) {\nHashMap&lt;Character, Integer&gt; window = new HashMap&lt;&gt;();\nHashMap&lt;Character, Integer&gt; need = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; p.length(); i++) {\nchar c = p.charAt(i);\nright++;\nif(need.containsKey(c)) {\nwindow.put(c,window.getOrDefault(c,0)+1);\nif(window.get(c).equals(need.get(c))) {\ncount++;\n}\n}\nwhile(right - left &gt;= p.length()) {\nif(count == need.size()) {\nres.add(left);\n}\nchar d = s.charAt(left);\nleft++;\nif(need.containsKey(d)) {\nif(window.get(d).equals(need.get(d))) {\ncount--;\n}\nwindow.put(d,window.get(d)-1);\n}\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/array/sliding/#3-longest-substring-without-repeating-characters","title":"3. Longest Substring Without Repeating Characters","text":"<p>Given a string <code>s</code>, find the length of the longest substring without repeating characters.</p> <p>Example 1:</p> <pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 104</code></li> <li><code>s</code> consists of English letters, digits, symbols and spaces.</li> </ul> <pre><code>class Solution {\npublic int lengthOfLongestSubstring(String s) {\nHashMap&lt;Character, Integer&gt; window = new HashMap&lt;&gt;();\nint left = 0;\nint right = 0;\nint res = 0;\nwhile(right &lt; s.length()) {\nchar c = s.charAt(right);\nright++;\nwindow.put(c, window.getOrDefault(c,0)+1);\nwhile(window.get(c) &gt; 1) {\nchar d = s.charAt(left);\nleft++;\nwindow.put(d, window.get(d)-1);\n}\nres = Math.max(res,right-left);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/design/lfu/","title":"Least Frequently Used(LFU) Cache","text":"Difficulty LeetCode Note \ud83d\udd34 460. LFU Cache 460. LFU Cache"},{"location":"algorithm/design/lfu/#460-lfu-cache","title":"460. LFU Cache","text":"<p>Design and implement a data structure for a Least Frequently Used (LFU) cache.</p> <p>Implement the <code>LFUCache</code> class:</p> <ul> <li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li> <li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used <code>key</code> would be invalidated.</li> </ul> <p>To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.</p> <p>When a key is first inserted into the cache, its use counter is set to <code>1</code> (due to the <code>put</code> operation). The use counter for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p> <p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p> <p>Example 1:</p> <pre><code>Input\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                 // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= capacity &lt;= 104</code></li> <li><code>0 &lt;= key &lt;= 105</code></li> <li><code>0 &lt;= value &lt;= 109</code></li> <li>At most <code>2 * 105</code> calls will be made to <code>get</code> and <code>put</code>.</li> </ul> <pre><code>class LFUCache {\n// \u6784\u9020\u5bb9\u91cf\u4e3acapacity\u7684\u7f13\u5b58\npublic LFUCache(int capacity) {}\n// \u5728\u7f13\u5b58\u4e2d\u67e5\u8be2key\npublic int get(int key) {}\n// \u5c06key\u548cval\u5b58\u5165\u7f13\u5b58\npublic void put(int key, int val) {}\n}\n</code></pre> <p><code>int get(int key)</code>\uff0c\u5982\u679c<code>key</code>\u5b58\u5728\uff0c\u5219<code>return val</code>\uff1b\u5426\u5219<code>return -1</code></p> <p><code>void put(int key, int val)</code>\u63d2\u5165\u6216\u4fee\u6539\u7f13\u5b58\uff0c\u5982\u679c<code>key</code>\u5df2\u5b58\u5728\uff0c\u5c06\u5bf9\u5e94\u7684\u503c\u4fee\u6539\u4e3a<code>val</code>\uff1b\u5982\u679c<code>key</code>\u4e0d\u5b58\u5728\uff0c\u5219\u63d2\u5165<code>(key, val)</code></p> <p>\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230<code>capacity</code>\u65f6\uff0c\u5728\u63d2\u5165\u65b0\u7684\u952e\u503c\u5bf9\u4e4b\u524d\uff0c\u5220\u9664<code>freq</code>\u6700\u4f4e\u7684\u952e\u503c\u5bf9\uff1b\u5982\u679c<code>freq</code>\u6700\u4f4e\u6709\u591a\u4e2a\u5bf9\uff0c\u5219\u5220\u9664\u5176\u4e2d\u6700\u65e7\u7684</p> <pre><code>LFUCache cache = new LFUCache(2);\n// \u5bb9\u91cf\u4e3a2\n// insert 2 pairs (key, val), freq = 1\ncache.put(1,10);\ncache.put(2,20);\n// query key = 1 return val\n// return 10, its freq = 2\ncache.get(1);\n// capacity is full, remove key = 2(its freq is the least)\n// insert(3,30), its freq = 1;\ncache.put(3,30);\n// key = 2 is removed, will return -1\ncache.get(2);\n</code></pre> <ul> <li>\u4f7f\u7528\u4e00\u4e2a<code>HashMap</code>\u50a8\u5b58<code>key</code>\u5230<code>val</code>\u7684\u6620\u5c04\uff0c\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97<code>get(key)</code></li> </ul> <pre><code>HashMap&lt;Integer, Integer&gt; keyToVal;\n</code></pre> <ul> <li>\u4f7f\u7528\u4e00\u4e2a<code>HashMap</code>\u50a8\u5b58<code>key</code>\u5230<code>freq</code>\u7684\u6620\u5c04\uff0c\u53ef\u4ee5\u5feb\u901f\u64cd\u4f5c<code>key</code>\u5bf9\u5e94\u7684<code>freq</code></li> </ul> <pre><code>  HashMap&lt;Integer, Integer&gt; keyToFreq;\n</code></pre> <ul> <li>LFU\u6838\u5fc3\u7b97\u6cd5\uff1a</li> <li><code>freq</code>\u5230<code>key</code>\u7684\u6620\u5c04\uff0c\u627e\u5230<code>freq</code>\u6700\u5c0f\u7684<code>key</code></li> <li>\u5c06<code>freq</code>\u6700\u5c0f\u7684<code>key</code>\u5220\u9664\uff0c\u5feb\u901f\u5f97\u5230\u5f53\u524d\u6240\u6709<code>key</code>\u6700\u5c0f\u7684<code>freq</code>\u662f\u591a\u5c11\u3002\u4e14\u65f6\u95f4\u590d\u6742\u5ea6<code>O(1)</code>\uff0c\u5fc5\u7136\u4e0d\u80fd\u904d\u5386\uff0c\u5219\u9700\u8981<code>minFreq</code>\u8bb0\u5f55\u6700\u5c0f<code>freq</code></li> <li>\u53ef\u80fd\u6709\u591a\u4e2a<code>key</code>\u62e5\u6709\u76f8\u540c\u7684<code>freq</code>\uff0c\u6240\u4ee5<code>freq</code>\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a<code>key</code>\u5217\u8868</li> <li><code>freq</code>\u5bf9\u5e94\u7684<code>key</code>\u5217\u8868\u5b58\u5728\u65f6\u5e8f\uff0c\u4fbf\u4e8e\u5feb\u901f\u67e5\u627e\u5e76\u5220\u9664\u6700\u65e7\u7684<code>key</code></li> <li>\u80fd\u591f\u5feb\u901f\u5220\u9664<code>key</code>\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a<code>key</code>\uff0c\u5982\u679c\u9891\u6b21\u4e3a<code>freq</code>\u7684\u67d0\u4e2a<code>key</code>\u88ab\u8bbf\u95ee\uff0c\u5176\u9891\u6b21\u5c31\u4f1a\u76f8\u5e94\u53d8\u4e3a<code>freq+1</code>\uff0c\u5219<code>key</code>\u5728<code>freq</code>\u5bf9\u5e94\u7684\u5217\u8868\u4e2d\u88ab\u5220\u53bb\uff0c\u6dfb\u52a0\u5230<code>freq+1</code>\u5bf9\u5e94\u7684\u5217\u8868\u4e2d</li> </ul> <pre><code>HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freqToKeys;\nint minFreq = 0;\n</code></pre> <pre><code>class LFUCache {\nint cap;\nint minFreq;\nHashMap&lt;Integer, Integer&gt; keyToVal;\nHashMap&lt;Integer, Integer&gt; keyToFreq;\nHashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freqToKeys;\npublic LFUCache(int capacity) {\nkeyToVal = new HashMap&lt;&gt;();\nkeyToFreq = new HashMap&lt;&gt;();\nfreqToKeys = new HashMap&lt;&gt;();\nthis.cap = capacity;\nthis.minFreq = 0;\n}\npublic int get(int key) {\nif(!keyToVal.containsKey(key)) return -1;\nincreaseFreq(key);\nreturn keyToVal.get(key);\n}\npublic void put(int key, int val) {\nif(this.cap &lt;= 0) return;\nif(keyToVal.containsKey(key)) {\nkeyToVal.put(key, val);\nincreaseFreq(key);\nreturn;\n}\nif(this.cap &lt;= keyToVal.size()) {\nremoveMinFreqKey();\n}\nkeyToVal.put(keu,val);\nkeyToFreq.put(key,1);\nfreqToKeys.putIfAbsent(1, new LinkedHashSet&lt;&gt;());\nfreqToKeys.get(1).add(key);\nthis.\n}\n}\n</code></pre> <pre><code>private void removeMinFreqKey() {\nLinkedHashSet&lt;Integer&gt; keyList = freqToKeys.get(this.minFreq);\nint deletedKey = keyList.iterator().next();\nkeyList.remove(deletedKey);\nif(keyList.isEmpty()) {\nfreqToKeys.remove(this.minFreq);\n}\nkeyToVal.remove(deletedKey);\nkeyToFreq.remove(deletedKey);\n}\n\nprivate void increaseFreq(int key) {\nint freq = keyToFreq.get(key);\nkeyToFreq.put(key, freq+1);\nfreqToKeys.get(freq).remove(key);\nfreqToKeys.putIfAbsent(freq+1, new LinkedHashSet&lt;&gt;());\nfreqToKeys.get(freq+1).add(key);\nif(freqToKeys.get(freq).isEmpty()) {\nfreqToKeys.remove(freq);\nif(freq == this.minFreq) {\nthis.minFreq++;\n}\n}\n}\n</code></pre>"},{"location":"algorithm/design/lru/","title":"Least Recently Used(LRU) cache","text":"Difficulty LeetCode Note \ud83d\udfe0 146. LRU Cache 146. LRU Cache"},{"location":"algorithm/design/lru/#146-lru-cache","title":"146. LRU Cache","text":"<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p> <p>Implement the <code>LRUCache</code> class:</p> <ul> <li><code>LRUCache(int capacity)</code> Initialize the LRU cache with positive size <code>capacity</code>.</li> <li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, evict the least recently used key.</li> </ul> <p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p> <p>Example 1:</p> <pre><code>Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= capacity &lt;= 3000</code></li> <li><code>0 &lt;= key &lt;= 104</code></li> <li><code>0 &lt;= value &lt;= 105</code></li> <li>At most 2<code>* 105</code> calls will be made to <code>get</code> and <code>put</code>.</li> </ul> <p>\u8bbe\u8ba1\u6570\u636e\u7ed3\u6784\u9996\u5148\u8981\u4e86\u89e3\u9700\u6c42\uff0c\u4ec0\u4e48\u662fLRU Cache</p> <p>\u53ef\u4ee5\u901a\u8fc7\u624b\u673a\u540e\u53f0\u7684\u5f62\u5f0f\u7406\u89e3\uff0c\u4e5f\u5c31\u662f\u65e7\u5185\u5bb9\u4e3a\u65b0\u5185\u5bb9\u817e\u4f4d\u7f6e</p> <ul> <li>\u5982\u679c\u6253\u5f00\u65e7\u5e94\u7528\uff0c\u5219\u65e7\u5e94\u7528\u7684\u65f6\u5e8f\u4f4d\u7f6e\u4e3a\u201c\u6700\u65b0\u201d</li> <li>\u5982\u679c\u6253\u5f00\u65b0\u5e94\u7528\uff1a</li> <li>\u5982\u679c\u6b64\u65f6\u7f13\u5b58\u4ecd\u6709\u5269\u4f59\uff0c\u5219\u5728\u7f13\u5b58\u4e2d\u6dfb\u52a0\u65b0\u5e94\u7528\uff0c\u5e76\u4e14\u8be5\u65b0\u5e94\u7528\u7684\u65f6\u5e8f\u4f4d\u7f6e\u4e3a\u201c\u6700\u65b0\u201d</li> <li>\u5982\u679c\u6b64\u65f6\u7f13\u5b58\u5df2\u7ecf\u6ee1\uff0c\u5219\u5728\u7f13\u5b58\u4e2d\u5220\u53bb\u65f6\u5e8f\u4f4d\u7f6e\u4e3a\u201c\u6700\u65e7\u201d\u7684\u65e7\u5e94\u7528\uff0c\u5e76\u4e14\u5c06\u65b0\u5e94\u7528\u6dfb\u52a0\u81f3\u7f13\u5b58\u4e2d\uff0c\u4e14\u8be5\u65b0\u5e94\u7528\u7684\u65f6\u5e8f\u4f4d\u7f6e\u4e3a\u201c\u6700\u65b0\u201d</li> </ul> <p>\u7efc\u4e0a\uff0cLRU Cache\u7684\u8bbe\u8ba1\u8981\u6c42\u662f\u4e00\u8981\u6709\u65f6\u5e8f\uff0c\u5df2\u533a\u5206\u201c\u6700\u65b0\u201d\u548c\u201c\u6700\u65e7\u201d\uff1b\u4e8c\u8981\u6709\u201c\u4e00\u4e00\u5bf9\u5e94\u201d(\u54c8\u5e0c\u8868)\uff1b\u4e09\u662f\u5404\u6570\u636e\u4e5f\u8981\u6709\u524d\u540e\u987a\u5e8f\u4e4b\u5206(\u94fe\u8868)</p> <p>\u5e76\u4e14\u9898\u8bbe\u4e2d\u8981\u6c42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(1)</code>\uff0c\u90a3\u4e48\u5e94\u4f7f\u7528\u53cc\u5411\u54c8\u5e0c\u94fe\u8868</p> <p>\u5b9a\u4e49\u53cc\u5411\u54c8\u5e0c\u94fe\u8868\u8282\u70b9</p> <pre><code>struct Node {\nint key;\nint val;\nNode* prev;\nNode* next;\nNode(int k, int v): key(k), val(v), prev(nullptr), next(nullptr) {};\n};\n</code></pre> <p>\u5b9a\u4e49\u53cc\u5411\u54c8\u5e0c\u94fe\u8868</p> <pre><code>class DoubleList {\nprivate:\nNode* head;\nNode* tail;\nint size;\npublic:\nDoubleList(){\nhead = new head(0,0);\ntail = new tail(0,0);\nhead-&gt;next = tail;\ntail-&gt;prev = head;\nsize = 0;\n}\n// \u5c06\u53cc\u5411\u94fe\u8868\u9760\u8fd1\u5c3e\u90e8\u4f4d\u7f6e\u8bbe\u5b9a\u4e3a\u65f6\u5e8f\u4e0a\u7684\u201c\u65b0\u201d\n// \u90a3\u4e48\u5982\u4e0b\u5219\u4e3a\u6253\u5f00\u4e00\u4e2a\u65b0\u5e94\u7528\nvoid addLast(Node* x) {\nx-&gt;prev = tail-&gt;prev;\nx-&gt;next = tail;\ntail-&gt;prev-&gt;next = x;\ntail-&gt;prev = x;\nsize++;\n}\n// \u5c06\u53cc\u5411\u94fe\u8868\u9760\u8fd1\u5934\u90e8\u4f4d\u7f6e\u8bbe\u5b9a\u4e3a\u65f6\u5e8f\u4e0a\u7684\u201c\u65e7\u201d\n// \u90a3\u4e48\u5982\u4e0b\u5219\u4e3a\u5220\u53bb\u4e00\u4e2a\u65e7\u5e94\u7528\nvoid remove(Node* x) {\nx-&gt;prev-&gt;next = x-&gt;next;\nx-&gt;next-&gt;prev = x-&gt;prev;\nsize--;\n}\nNode* removeFirst() {\nif(head-&gt;next == tail) return nullptr;\nNode* first = head-&gt;next;\nremove(first);\nreturn first;\n}\n// \u8fd4\u56de\u4e00\u4e2a\u53cc\u5411\u54c8\u5e0c\u94fe\u8868\u7684size\nint cap() {\nreturn size;\n}\n};\n</code></pre> <p>\u5c3d\u91cf\u907f\u514dLRU\u76f4\u63a5\u64cd\u4f5c<code>mp</code>\u548c<code>cache</code>\u7684\u7ec6\u8282\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u4e2d\u95f4API</p> <pre><code>class LRUCache {\nprivate:\nmap&lt;int, Node*&gt; mp;\nDoubleList cache;\nint cap;\n// \u6253\u5f00\u65e7\u6709\u7684\u5e94\u7528\uff0c\u4f7f\u5176\u5728\u65f6\u5e8f\u4e0a\u4e3a\u201c\u6700\u65b0\u201d\nvoid makeRecently(int key) {\nNode* x = mp[key];\ncache.remove(x);\ncache.addLast(x);\n}\n// \u6253\u5f00\u65b0\u7684\u5e94\u7528\uff0c\u5728mp\u4e2d\u6dfb\u52a0\u65b0\u5e94\u7528\uff0c\u5e76\u5728\u65f6\u5e8f\u4e0a\u8bbe\u4e3a\u201c\u6700\u65b0\u201d\nvoid addRecently(int key, int val) {\nNode* x = new Node(key, val);\ncache.addLast(x);\nmp[key] = x;\n}\nvoid deleteKey(int key) {\nNode* x = mp[key];\ncache.remove(x);\nmp.erase(key);\n}\nvoid removeLeastRecently() {\nNode* deletedNode = cache.removeFirst();\nint deletedKey = deletedNode-&gt;key;\nmp.erase(deletedKey);\n}\npublic:\nLRUCache(int capacity) {\nthis-&gt;cap = capacity;\n}\nint get(int key) {\nif(!mp.count(key)) {\nreturn -1;\n}\nmakeRecently(key);\nreturn mp[key]-&gt;val;\n}\nvoid put(int key, int val) {\nif(mp.count(key)){\ndeleteKey(key);\naddRecently(key, val);\nreturn;\n}\nif(cap == cache.cap()) {\nremoveLeastRecently();\n}\naddRecently(key, val);\n}\n};\n</code></pre> <p>\u4f7f\u7528<code>java</code>\u81ea\u5e26\u7684<code>LinkedHashMap</code></p> <pre><code>class LRUCache {\nint cap;\nLinkedHashMap&lt;Integer, Integer&gt; cache = new LinkedHashMap&lt;&gt;();\npublic LRUCache(int capacity) {\nthis.cap = capacity;\n}\n\npublic int get(int key) {\nif(!cache.containsKey(key)) {\nreturn -1;\n}\nmakeRecently(key);\nreturn cache.get(key);\n}\n\npublic void put(int key, int val) {\nif(cache.containsKey(key)) {\ncache.put(key, val);\nmakeRecently(key);\nreturn;\n}\nif(cache.size() == this.cap) {\nint olderKey = cache.keySet().iterator().next();\ncache.remove(olderKey);\n}\ncache.put(key, val);\n}\n\nprivate void makeRecently(int key) {\nint val = cache.get(key);\ncache.remove(key);\ncache.put(key, val);\n}\n}\n</code></pre>"},{"location":"algorithm/design/median/","title":"Median from Data Stream","text":"Difficulty LeetCode Note \ud83d\udd34 295. Find Median from Data Stream 295. Find Median from Data Stream"},{"location":"algorithm/design/median/#295-find-median-from-data-stream","title":"295. Find Median from Data Stream","text":"<p>The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.</p> <ul> <li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li> <li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li> </ul> <p>Implement the MedianFinder class:</p> <ul> <li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li> <li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li> <li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10-5</code> of the actual answer will be accepted.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</code></pre> <p>Constraints:</p> <ul> <li><code>-105 &lt;= num &lt;= 105</code></li> <li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li> <li>At most <code>5 * 104</code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li> </ul> <p>Follow up:</p> <ul> <li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> <li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> </ul> <p>\u5bf9\u4e8e\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570\uff0c\u601d\u8def\u4f9d\u7136\u662f\u201c\u5bf9\u534a\u5206\uff0c\u53d6\u4e2d\u95f4\u201d\u3002\u6309\u7167\u6570\u5b57\u5927\u5c0f\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u5e76\u4e14\u5206\u6210\u4e24\u5806\u3002\u5f53\u6570\u5b57\u603b\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u5176\u4e2d\u4e00\u5806\u6bd4\u53e6\u4e00\u5806\u591a\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u591a\u51fa\u6765\u7684\u6570\u5c31\u662f\u4e2d\u4f4d\u6570\uff1b\u5f53\u6570\u5b57\u603b\u6570\u4e3a\u5076\u6570\u65f6\uff0c\u4e24\u5806\u6570\u91cf\u4e00\u6837\u591a\uff0c\u5219\u53d6(\u5c0f)\u5806\u4e2d\u7684\u6700\u5927\u503c\uff0c(\u5927)\u5806\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u53d6\u5e73\u5747\u5373\u53ef\u3002</p> <p>\u8003\u8651\u5230\u8981\u81ea\u52a8\u6392\u5e8f\uff0c\u5176\u4e2d\u5c0f\u5806\u5e94\u4ece\u5927\u5230\u5c0f\uff0c\u5927\u5806\u5e94\u4ece\u5c0f\u5230\u5927\uff0c\u4ee5\u65b9\u4fbf\u53d6\u4e2d\u95f4\u7684\u6570\uff0c\u81ea\u7136\u91c7\u7528\u7684\u6570\u636e\u7ed3\u6784\u662f<code>PriorityQueue&lt;Integer&gt;</code></p> <p>\u5411\u8be5\u6570\u636e\u7ed3\u6784\u6dfb\u52a0\u6570\u5b57\u7684\u65f6\u5019\uff0c\u539f\u5219\u4e0a\u662f\u5411\u5143\u7d20\u66f4\u5c11\u7684\u5806\u4e2d\u6dfb\u52a0\uff0c\u5e76\u4e14\u5c0f\u5806\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u5c0f\u4e8e\u5927\u5806\u4e2d\u7684\u6570\u5b57\u3002\u5982\u679c\u662f\u5411\u5c0f\u5806\u6dfb\u52a0\uff0c\u5219\u5148\u6dfb\u52a0\u6570\uff0c\u4e4b\u540e\u5f39\u51fa\u6700\u5927\u6570\u5230\u5927\u5806\u4e4b\u4e2d\uff1b\u5982\u679c\u662f\u5411\u5927\u5806\u6dfb\u52a0\uff0c\u5219\u5148\u6dfb\u52a0\u6570\uff0c\u4e4b\u540e\u5f39\u51fa\u6700\u5c0f\u6570\u5230\u5c0f\u5806\u4e4b\u4e2d\u3002\u5176\u4e2d\uff0c\u6700\u503c\u4e00\u5b9a\u662f\u5728<code>PriorityQueue&lt;Integer&gt;.peek()</code></p> <pre><code>class MedianFinder {\nPriorityQueue&lt;Integer&gt; large;\nPriorityQueue&lt;Integer&gt; small;\n\npublic MedianFinder() {\nlarge = new PriorityQueue&lt;&gt;();\nsmall = new PriorityQueue&lt;&gt;((a,b) -&gt; {\nreturn b - a;\n});\n}\n\npublic void addNum(int num) {\nif(small.size() &gt;= large.size()) {\nsmall.offer(num);\nlarge.offer(small.poll());\n}\nelse {\nlarge.offer(num);\nsmall.offer(large.poll());\n}\n}\n\npublic double findMedian() {\nif(large.size() &lt; small.size()) {\nreturn small.peek();\n}\nelse if(large.size() &gt; small.size()) {\nreturn large.peek();\n}\nreturn (large.peek() + small.peek()) / 2.0;\n}\n}\n</code></pre>"},{"location":"algorithm/design/nxtGreater/","title":"Next Greater Element with <code>Stack</code>","text":"Difficulty LeetCode Note \ud83d\udfe2 496. Next Greater Element I 496. Next Greater Element I \ud83d\udfe0 739. Daily Temperatures 739. Daily Temperatures \ud83d\udfe0 503. Next Greater Element II 503. Next Greater Element II"},{"location":"algorithm/design/nxtGreater/#496-next-greater-element-i","title":"496. Next Greater Element I","text":"<p>The next greater element of some element <code>x</code> in an array is the first greater element that is to the right of <code>x</code> in the same array.</p> <p>You are given two distinct 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, where <code>nums1</code> is a subset of <code>nums2</code>.</p> <p>For each <code>0 &lt;= i &lt; nums1.length</code>, find the index <code>j</code> such that <code>nums1[i] == nums2[j]</code> and determine the next greater element of <code>nums2[j]</code> in <code>nums2</code>. If there is no next greater element, then the answer for this query is <code>-1</code>.</p> <p>Return an array <code>ans</code> of length <code>nums1.length</code> such that <code>ans[i]</code> is the next greater element as described above.</p> <p>Example 1:</p> <pre><code>Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 104</code></li> <li>All integers in <code>nums1</code> and <code>nums2</code> are unique.</li> <li>All the integers of <code>nums1</code> also appear in <code>nums2</code>.</li> </ul> <p>\u7b49\u4ef7\u4e8e\uff0c<code>nums2 = [1,3,2,4]</code>\u6c42\u5f97<code>res = [3,4,4,-1]</code>\u5373\u53ef</p> <p>\u601d\u8def\u662f<code>nums2</code>\u5c06\u5143\u7d20\u4ece\u540e\u5f80\u524d\u6dfb\u52a0\u5165\u4e00\u4e2a<code>Stack</code>\uff0c\u5f53<code>Stack</code>\u975e\u7a7a\u65f6\uff0c\u6bd4\u8f83\u5f53\u524d<code>nums2[i]</code>\u548c<code>Stack.peek()</code>(\u4e4b\u524d\u5df2\u7ecf\u6dfb\u52a0\u5230<code>Stack</code>\u5f53\u4e2d\u7684)\uff0c\u5982\u679c<code>nums2[i] &gt;= Stack.peek()</code>\u5219\u5f39\u51fa\u9876\u90e8\u5143\u7d20\uff0c\u5982\u679c<code>Stack</code>\u4f9d\u7136\u975e\u7a7a\uff0c\u5219\u6b64\u65f6\u9876\u90e8\u5143\u7d20\u5373\u4f4d<code>nums2[i]</code>\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5176\u7684\u5143\u7d20\uff0c\u5373\u53ef\u5c06\u5176\u6dfb\u52a0\u5230<code>res</code>\u6570\u7ec4\u4e2d\uff0c\u5982\u679c<code>Stack</code>\u4e3a\u7a7a\uff0c\u5219\u4e3a-1\uff0c\u6bd4\u8f83\u5b8c<code>nums2[i]</code>\u548c<code>Stack</code>\u4e2d\u7684\u5143\u7d20\u4e4b\u540e\uff0c\u53ef\u8bb2<code>nums2[i]</code>\u6dfb\u52a0\u5165<code>Stack</code>\u4e2d\uff0c\u6210\u4e3a\u4e0b\u6b21\u5faa\u73af\u4e2d\u7684\u88ab\u6bd4\u8f83\u5bf9\u8c61\u4e4b\u4e00\u3002</p> <pre><code>class Solution {\npublic int[] nextGreaterElement(int[] nums1, int[] nums2) {\nint[] greater = result(nums2);\nHashMap&lt;Integer, Integer&gt; greaterMap = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; nums2.length; i++) {\ngreaterMap.put(nums2[i], greater[i]);\n}\nint[] res = new int[nums1.length];\nfor(int i = 0; i &lt; nums1.length; i++) {\nres[i] = greaterMap.get(nums1[i]);\n}\nreturn res;\n}\n\nprivate int[] result(int[] nums) {\nint n = nums.length;\nint[] res = new int[n];\nStack&lt;Integer&gt; stack = new Stack&lt;&gt;();\nfor(int i = n - 1; i &gt;= 0; i--) {\nwhile(!stack.isEmpty() &amp;&amp; nums[i] &gt;= stack.peek()) {\nstack.pop();\n}\nres[i] = stack.isEmpty() ? -1 : stack.peek();\nstack.push(nums[i]);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/design/nxtGreater/#739-daily-temperatures","title":"739. Daily Temperatures","text":"<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return an array <code>answer</code> such that <code>answer[i]</code> is the number of days you have to wait after the <code>ith</code> day to get a warmer temperature. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p> <p>Example 1:</p> <pre><code>Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n</code></pre> <p>Example 2:</p> <pre><code>Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n</code></pre> <p>Example 3:</p> <pre><code>Input: temperatures = [30,60,90]\nOutput: [1,1,0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= temperatures.length &lt;= 105</code></li> <li><code>30 &lt;= temperatures[i] &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic int[] dailyTemperatures(int[] temperatures) {\nint n = temperatures.length;\nint[] res = new int[n];\nStack&lt;Integer&gt; s = new Stack&lt;&gt;();\nfor(int i = n - 1; i &gt;= 0; i--) {\nwhile(!s.empty() &amp;&amp; temperatures[s.peek()] &lt;= temperatures[i]) {\ns.pop();\n}\nres[i] = s.isEmpty() ? 0 : s.peek() - i;\ns.push(i);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/design/nxtGreater/#503-next-greater-element-ii","title":"503. Next Greater Element II","text":"<p>Given a circular integer array <code>nums</code> (i.e., the next element of <code>nums[nums.length - 1]</code> is <code>nums[0]</code>), return the next greater number for every element in <code>nums</code>.</p> <p>The next greater number of a number <code>x</code> is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return <code>-1</code> for this number.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,1]\nOutput: [2,-1,2]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number. \nThe second 1's next greater number needs to search circularly, which is also 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,3,4,3]\nOutput: [2,3,4,-1,4]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> </ul> <pre><code>class Solution {\npublic int[] nextGreaterElements(int[] nums) {\nint n = nums.length;\nint[] res = new int[n];\nStack&lt;Integer&gt; s = new Stack&lt;&gt;();\nfor (int i = 2 * n - 1; i &gt;= 0; i--) {\nwhile(!s.isEmpty() &amp;&amp; nums[i % n] &gt;= s.peek()) {\ns.pop();\n}\nres[i % n] = s.isEmpty() ? -1 : s.peek();\ns.push(nums[i % n]);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/design/pq/","title":"Binary Heap designs Priority Queue","text":"<p>\u4e8c\u53c9\u5806\u662f\u4f7f\u7528\u6570\u7ec4\u50a8\u5b58\u7684\u4e8c\u53c9\u6811</p> <pre><code>int parent(int root) {\nreturn root / 2;\n}\nint left(int root) {\nreturn root * 2;\n}\nint right(int root) {\nreturn root * 2 + 1;\n}\n</code></pre> <p>\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u53c9\u5806\u800c\u8a00\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7d22\u5f15\uff0c<code>arr[0]</code>\u4e0d\u50a8\u5b58\u6570\u636e\uff0c<code>arr[1]</code>\u4e3a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff08\u5bf9\u4e8e\u6700\u5927\u5806\u800c\u8a00\uff09</p> <pre><code>public class MaxPQ &lt;Key extends Comparable&lt;Key&gt;&gt; {\nprivate Key[] pq;\nprivate int size = 0;\npublic MaxPQ(int cap) {\npq = (Key[]) new Comparable[cap+1];\n}\npublic Key max() {\nreturn pq[1];\n}\npublic void insert(Key e) {\nsize++;\npq[size] = e;\nswim(size);\n}\npublic Key delMax() {\nKey max = pq[1];\nswap(1, size);\npq[size] = null;\nsize--;\nsink(1);\nreturn max;\n}\nprivate void swim(int x) {\nwhile(x &gt; 1 &amp;&amp; less(parent[x],x)) {\nswap(parent[x],x);\nx = parent(x);\n}\n}\nprivate void sink(int x) {\nwhile(left(x) &lt;= size) {\nint max = left(x);\nif(right(x) &lt;= size &amp;&amp; less(max, right(x))) {\nmax = right(x);\n}\nif(less(max, x)) break;\nswap(x,max);\nx = max;\n}\n}\nprivate void swap(int i, int j) {\nKey temp = pq[i];\npq[i] = pq[j];\npq[j] = temp;\n}\nprivate boolean less(int i, int j) {\nreturn pq[i].compareTo(pq[j]) &lt; 0;\n}\n}\n</code></pre>"},{"location":"algorithm/design/q2s/","title":"Implement <code>Stack</code>s using <code>Queue</code>s","text":"Difficulty LeetCode Note \ud83d\udfe2 225. Implement Stack using Queues 225. Implement Stack using Queues"},{"location":"algorithm/design/q2s/#225-implement-stack-using-queues","title":"225. Implement Stack using Queues","text":"<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyStack</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the top of the stack.</li> <li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li> <li><code>int top()</code> Returns the element on the top of the stack.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>top</code> are valid.</li> </ul> <pre><code>class MyStack {\nQueue&lt;Integer&gt; q;\nint topEle;\npublic void push(int x) {\nq.push(x);\ntopEle = x;\n}\npublic int pop() {\nint size = q.size();\nwhile(size &gt; 2) {\nq.offer(q.poll());\nsize--;\n}\ntopEle = q.peek();\nq.offer(q.poll());\nreturn q.poll();\n}\npublic int top() {\nreturn topEle;\n}\npublic boolean empty() {\nreturn q.isEmpty();\n}\n}\n</code></pre>"},{"location":"algorithm/design/random/","title":"Randomized Set","text":"Difficulty LeetCode Note \ud83d\udfe0 380. Insert Delete GetRandom O(1) 380. Insert Delete GetRandom O(1) <p>\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5305\u62ec<code>insert(val)</code>, <code>remove(val)</code>, <code>getRandom</code></p> <p>\u9996\u5148\u8003\u8651\u5bf9\u4e8e\u63d2\u5165\u548c\u5220\u9664\u4e24\u6837\u64cd\u4f5c\uff0c\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)?</p> <p>\u5fc5\u7136\u662f\u4e00\u4e2a\u54c8\u5e0c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982<code>HashSet</code>\uff0c\u5176\u4e2d<code>LinkedHashSet</code>\u901a\u8fc7\u54c8\u5e0c\u8868\u914d\u5408\u53cc\u94fe\u8868\u5b9e\u73b0\u4e86\u6709\u5e8f\u6027\uff0c\u4f46\u5374\u65e0\u6cd5\u5b9e\u73b0<code>getRandom</code>\u51fd\u6570</p> <p>\u5982\u679c\u9700\u8981\u7b49\u6982\u7387\u9009\u62e9\u5143\u7d20\uff0c\u53ea\u80fd\u91c7\u7528\u539f\u59cb\u6570\u7ec4</p> <p>\u4f46\u662f\u539f\u59cb\u6570\u7ec4\u5982\u4f55\u5b9e\u73b0O(1)\u590d\u6742\u5ea6\u7684\u63d2\u5165\u548c\u5220\u9664?</p> <p>\u5c06\u76ee\u6807\u5143\u7d20\u653e\u5728\u6570\u7ec4\u7684\u5c3e\u90e8\u5373\u53ef</p> <p>\u901a\u8fc7\u4e00\u4e2a<code>valToIndex</code>\u7684<code>HashMap</code>\u50a8\u5b58<code>nums[index]</code>\u548c<code>index</code>\u7684\u5173\u8054\u5173\u7cfb\uff0c\u4ee5\u5b9e\u73b0<code>nums[index]</code>\u548c<code>nums[nums.size()-1]</code>\u5373\u672b\u5c3e\u5143\u7d20\uff0c\u4e4b\u95f4\u7684\u4e92\u6362\uff0c\u4e92\u6362\u540e\u5e76\u4fee\u6539<code>valToIndex</code>\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e4b\u540e\u5373\u53ef\u4ee5\u5220\u53bb\u76ee\u6807\u5143\u7d20\uff0c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)</p>"},{"location":"algorithm/design/random/#380-insert-delete-getrandom-o1","title":"380. Insert Delete GetRandom O(1)","text":"<p>Implement the <code>RandomizedSet</code> class:</p> <ul> <li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li> <li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li> <li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li> <li><code>int getRandom()</code> Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</li> </ul> <p>You must implement the functions of the class such that each function works in average <code>O(1)</code> time complexity.</p> <p>Example 1:</p> <pre><code>Input\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>-231 &lt;= val &lt;= 231 - 1</code></li> <li>At most <code>2 * ``105</code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li> <li>There will be at least one element in the data structure when <code>getRandom</code> is called.</li> </ul> <pre><code>class RandomizedSet {\npublic ArrayList&lt;Integer&gt; nums;\npublic HashMap&lt;Integer, Integer&gt; valToIndex;\n\npublic RandomizedSet() {\nnums = new ArrayList&lt;&gt;();\nvalToIndex = new HashMap&lt;&gt;();\n}\n\npublic boolean insert(int val) {\nif(valToIndex.containsKey(val)) {\nreturn false;\n}\nvalToIndex.put(val, nums.size());\nnums.add(val);\nreturn true;\n}\n\npublic boolean remove(int val) {\nif(!valToIndex.containsKey(val)) {\nreturn false;\n}\nint index = valToIndex.get(val); // \u662f\u4e00\u4e2aindex\nint back = nums.get(nums.size()-1); // \u662f\u4e00\u4e2avalue\nvalToIndex.put(back, index); // (val,index)\nint temp = nums.get(index); // \u662f\u4e00\u4e2aval\nnums.set(index, back);\nnums.set(nums.size()-1, temp);\nnums.remove(nums.size()-1);\nvalToIndex.remove(val);\nreturn true;\n}\n\npublic int getRandom() {\nRandom rand = new Random();\nreturn nums.get((int)(Math.random() * nums.size()));\n}\n}\n</code></pre>"},{"location":"algorithm/design/s2q/","title":"Implement <code>Queue</code>s using <code>Stack</code>s","text":"Difficulty LeetCode Note \ud83d\udfe2 232. Implement Queue using Stacks 232. Implement Queue using Stacks"},{"location":"algorithm/design/s2q/#232-implement-queue-using-stacks","title":"232. Implement Queue using Stacks","text":"<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyQueue</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the back of the queue.</li> <li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li> <li><code>int peek()</code> Returns the element at the front of the queue.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li> </ul> <pre><code>class MyQueue {\nprivate Stack&lt;Integer&gt; s2;\nprivate Stack&lt;Integer&gt; s1;\n\npublic MyQueue() {\ns2 = new Stack&lt;&gt;();\ns1 = new Stack&lt;&gt;();\n}\n\npublic void push(int x) {\ns1.push(x);\n}\n\npublic int pop() {\nif(s2.isEmpty()) {\nwhile(!s1.isEmpty()) {\ns2.push(s1.pop());\n}\n}\nreturn s2.pop();\n}\n\npublic int peek() {\nif(s2.isEmpty()) {\nwhile(!s1.isEmpty()) {\ns2.push(s1.pop());\n}\n}\nreturn s2.peek();\n}\n\npublic boolean empty() {\nreturn s1.isEmpty() &amp;&amp; s2.isEmpty();\n}\n}\n</code></pre>"},{"location":"algorithm/design/slidingwin/","title":"O(1) Maximum in a Sliding Window","text":"Difficulty LeetCode Note \ud83d\udd34 239. Sliding Window Maximum 239. Sliding Window Maximum <p>## 239. Sliding Window Maximum</p> <p>You are given an array of integers <code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1], k = 1\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul> <pre><code>class Solution {\nclass MonotonicQueue {\nLinkedList&lt;Integer&gt; q = new LinkedList&lt;&gt;();\npublic void push(int n) {\nwhile(!q.isEmpty() &amp;&amp; q.getLast() &lt; n) {\nq.pollLast();\n}\nq.addLast(n);\n}\n\npublic int max() {\nreturn q.getFirst();\n}\n\npublic void pop(int n) {\nif (n == q.getFirst()) {\nq.pollFirst();\n}\n}\n}\n\npublic int[] maxSlidingWindow(int[] nums, int k) {\nMonotonicQueue window = new MonotonicQueue();\nList&lt;Integer&gt; res = new ArrayList&lt;&gt;();\nfor(int i = 0; i &lt; nums.length; i++) {\nif (i &lt; k - 1) {\nwindow.push(nums[i]);\n}\nelse {\nwindow.push(nums[i]);\nres.add(window.max());\nwindow.pop(nums[i - k + 1]);\n}\n}\nint[] arr = new int[res.size()];\nfor(int i = 0; i &lt; res.size(); i++) {\narr[i] = res.get(i);\n}\nreturn arr;\n}\n}\n</code></pre> <p>\u901a\u8fc7\u5728<code>push()</code>\u9636\u6bb5\u5c31\u8fdb\u884c\u4e86\u5927\u5c0f\u6bd4\u8f83\uff0c\u4f7f\u5f97<code>Queue</code>\u4e3a\u9012\u51cf\u987a\u5e8f\u6392\u5217\uff0c\u6700\u5927\u503c\u4e3a\u8868\u5934\u5143\u7d20\u3002</p>"},{"location":"algorithm/design/twi/","title":"Design Twitter","text":"Difficulty LeetCode Note \ud83d\udfe0 355. Design Twitter 355. Design Twitter"},{"location":"algorithm/design/twi/#355-design-twitter","title":"355. Design Twitter","text":"<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user's news feed.</p> <p>Implement the <code>Twitter</code> class:</p> <ul> <li><code>Twitter()</code> Initializes your twitter object.</li> <li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li> <li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.</li> <li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li> <li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li> <li><code>0 &lt;= tweetId &lt;= 104</code></li> <li>All the tweets have unique IDs.</li> <li>At most <code>3 * 104</code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li> </ul> <p>\u8bbe\u8ba1\u63a8\u7279\u9700\u8981\u5b9e\u73b0\u7684API</p> <pre><code>class Twitter {\npublic void postTweet(int userId, int tweetId){}\npublic List&lt;Integer&gt; getNewsFeed(int userId){}\npublic void follow(int followerId, int followeeId){}\npublic void unfollow(int followerId, int followeeId){}\n}\n</code></pre> <p>API\u7684\u5177\u4f53\u7528\u6cd5</p> <pre><code>Twitter twitter = new Twitter();\ntwitter.postTweet(1,5); // \u7528\u62371\u53d1\u9001\u63a8\u72795\ntwitter.getNewsFeed(1); // return [5] \u8fd4\u56de\u81ea\u5df1\u53d1\u7684\u63a8\u72795\ntwitter.follow(1,2); // \u7528\u62371\u5173\u6ce8\u7528\u62372\ntwitter.postTweet(2,6); // \u7528\u62372\u53d1\u9001\u63a8\u72796\ntwitter.getNewsFeed(1); // return [6,5]\ntwitter.unfollow(1,2); // \u7528\u62371\u53d6\u5173\u7528\u62372\ntwitter.getNewsFeed(1); // return [5]\n</code></pre> <p>\u5c06\u6bcf\u4e2a\u7528\u6237\u5404\u81ea\u7684\u63a8\u6587\u5b58\u50a8\u5728\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u94fe\u8868\u8282\u70b9\u5b58\u50a8<code>id</code>\u548c\u65f6\u95f4\u6233<code>time</code>\uff0c\u5e76\u4e14\u8fd9\u4e2a\u94fe\u8868\u662f\u6709\u65f6\u5e8f\u7684\u3002\u5982\u679c\u67d0\u7528\u6237\u5173\u6ce8\u4e86<code>k</code>\u4e2a\u7528\u6237\uff0c\u5c31\u53ef\u4ee5\u5408\u5e76<code>k</code>\u4e2a\u6709\u5e8f\u94fe\u8868\u7684\u7b97\u6cd5\u5408\u5e76\u51fa\u6709\u5e8f\u7684\u63a8\u6587\u5217\u8868</p> <p>\u9996\u5148\u9700\u8981\u4e00\u4e2a<code>User</code>\u7c7b\uff0c\u4ee5\u50a8\u5b58<code>user</code>\u4fe1\u606f\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a<code>Tweet</code>\u7c7b\uff0c\u4ee5\u50a8\u5b58\u63a8\u6587\u4fe1\u606f\uff0c\u5e76\u4e14<code>Tweet</code>\u7c7b\u8981\u4f5c\u4e3a\u94fe\u8868\u7684\u8282\u70b9</p> <pre><code>class Twitter{\nprivate static int timestamp = 0;\nprivate static class Tweet {...}\nprivate static class User {...}\npublic void postTweet(int userId, int tweetId) {}\npublic List&lt;Integer&gt; getNewsFeed(int userId) {}\npublic void follow(int followerId, int followeeId){}\npublic void unfollow(int followerId, int followeeId){}\n}\n</code></pre> <p><code>Tweet</code>\u7c7b\u7684\u5b9e\u73b0</p> <p>\u6bcf\u4e2a<code>Tweet</code>\u5b9e\u4f8b\u9700\u8981\u8bb0\u5f55<code>tweetId</code>\u548c<code>time</code>\uff0c\u4f5c\u4e3a\u94fe\u8868\u8282\u70b9\uff0c\u8fd8\u9700\u8981\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684<code>next</code>\u6307\u9488</p> <pre><code>class Tweet {\nprivate int id;\nprivate int time;\nprivate Tweet next;\npublic Tweet(int id, int time) {\nthis.id = id;\nthis.time = time;\nthis.next = null;\n}\n}\n</code></pre> <p><code>User</code>\u7c7b\u7684\u5b9e\u73b0</p> <p>\u4e00\u4e2a\u7528\u6237\u50a8\u5b58\u7684\u4fe1\u606f\u6709<code>userId</code>\uff0c\u5173\u6ce8\u5217\u8868\uff0c\u8be5\u7528\u6237\u53d1\u8fc7\u7684\u63a8\u6587\u5217\u8868</p> <p>\u5176\u4e2d\u5173\u6ce8\u5217\u8868\u4e2d\u7684\u5143\u7d20\u53ea\u6709<code>0</code>\u548c<code>1</code>\u4e24\u79cd\u72b6\u6001\uff0c\u5219\u5e94\u91c7\u7528<code>set</code>\u6765\u5b58</p> <p>\u63a8\u6587\u5217\u8868\u5219\u4f7f\u7528\u94fe\u8868\u6765\u50a8\u5b58</p> <p>\u5e76\u4e14\uff0c<code>follow(),unfollow(),postTweet()</code>\u90fd\u5e94\u8be5\u662f<code>User</code>\u7684\u884c\u4e3a</p> <pre><code>class User {\nprivate int id;\npublic Set&lt;Integer&gt; followed;\npublic Tweet head;\npublic User(int userId) {\nfollowed = new HashSet&lt;&gt;();\nthis.id = userId;\nthis.head = null;\nfollow(id);\n}\npublic void follow(int userId) {\nfollowed.add(userId);\n}\npublic void unfollow(int userId) {\nif(userId != this.id) {\nfollowed.remove(userId);\n}\n}\npublic void post(int tweetId) {\nTweet twt = new Tweet(tweetId, timestamp);\ntimestamp++;\ntwt.next = head;\nhead = twt;\n}\n}\n</code></pre> <pre><code>class Twitter {\nprivate static int timestamp = 0;\nprivate static class Tweet {...}\nprivate static class User {...}\n// userMap\u5c06userId\u548cUser\u5bf9\u8c61\u4e00\u4e00\u5bf9\u5e94\nprivate HashMap&lt;Integer, User&gt; userMap = new HashMap&lt;&gt;();\npublic void postTweet(int userId, int tweetId) {\nif(!userMap.containsKey(userId)) {\nuserMap.put(userId, new User(userId));\n}\nUser u = userMap.get(userId);\nu.post(tweetId);\n}\npublic void follow(int followerId, int followeeId) {\n// follower\u4e0d\u5b58\u5728\uff0c\u5219\u65b0\u5efa\nif(!userMap.containsKey(followerId)) {\nUser u = new User(followerId);\nuserMap.put(followerId, u);\n}\nif(!userMap.containsKey(followeeId)) {\nUser u = new User(followeeId);\nuserMap.put(followeeId, u);\n}\nuserMap.get(followerId).follow(followeeId);\n}\npublic void unfollow(int followerId, int followeeId) {\nif(userMap.containsKey(followerId)) {\nUser flwer = userMap.get(followerId);\nflwer.unfollow(followeeId);\n}\n}\npublic List&lt;Integer&gt; getNewsFeed(int userId) {\nList&lt;Integer&gt; res = new ArrayList&lt;&gt;();\nif(!userMap.containsKey(userId)) return res;\nSet&lt;Integer&gt; users = userMap.get(userId).followed;\nPriorityQueue&lt;Tweet&gt; pq = new PriorityQueue&lt;&gt;(users.size(), (a,b)-&gt;(b.time-a.time));\nfor(int id : users) {\nTweet twt = userMap.get(id).head;\nif(twt == null) continue;\npq.add(twt);\n}\nwhile(!pq.isEmpty()) {\nif(res.size() == 10) break;\nTweet twt = pq.poll();\nres.add(twt.id);\nif(twt.next != null) {\npq.add(twt.next);\n}\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/dial/","title":"Freedom Trail","text":""},{"location":"algorithm/dp/dial/#514-freedom-trail","title":"514. Freedom Trail","text":"<p>In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.</p> <p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.</p> <p>Initially, the first character of the ring is aligned at the <code>\"12:00\"</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>\"12:00\"</code> direction and then by pressing the center button.</p> <p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p> <ol> <li>You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of <code>ring</code>'s characters at the <code>\"12:00\"</code> direction, where this character must equal <code>key[i]</code>.</li> <li>If the character <code>key[i]</code> has been aligned at the <code>\"12:00\"</code> direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li> </ol> <p>Example 1:</p> <p></p> <pre><code>Input: ring = \"godding\", key = \"gd\"\nOutput: 4\nExplanation:\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n</code></pre> <p>Example 2:</p> <pre><code>Input: ring = \"godding\", key = \"godding\"\nOutput: 13\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li> <li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li> <li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li> </ul> <p>\u672c\u4f8b\u4e2d\uff0c</p> <p>\u72b6\u6001\u4e3a\u5f53\u524d\u9700\u8981\u8f93\u5165\u7684\u5b57\u7b26<code>key[j]</code>\u548c\u5f53\u524d\u5706\u76d8\u6307\u9488\u7684\u4f4d\u7f6e<code>ring[i]</code></p> <p>\u90a3\u4e48<code>int dp(String ring, int i, String key, int j)</code>\u51fd\u6570\u7684\u5b9a\u4e49\u4e3a</p> <p>\u5f53\u5706\u76d8\u6307\u9488\u6307\u5411<code>ring[i]</code>\u65f6\uff0c\u8f93\u5165\u5b57\u7b26\u4e32<code>key[j..]</code>\u81f3\u5c11\u9700\u8981<code>dp(ring,i,key,j)</code>\u6b21\u64cd\u4f5c\u3002\u5219\u9700\u8981<code>return dp(ring,0,key,0)</code></p> <pre><code>int dp(String ring, int i, String key, int j) {\n// base case \u5b8c\u6210\u8f93\u5165\u65f6\nif(j == key.length()) return 0;\n}\n</code></pre> <pre><code>class Solution {\nHashMap&lt;Character, List&lt;Integer&gt;&gt; charToIndex = new HashMap&lt;&gt;();\nint[][] memo;\nint findRotateSteps(String ring, String key) {\nint m = ring.length();\nint n = key.length();\nmemo = new int[m][n];\nfor(int i = 0; i &lt; ring.length(); i++) {\nchar c = ring.charAt(i);\nif(!charToIndex.containsKey(c)) {\ncharToIndex.put(c, new LinkedList&lt;&gt;());\n}\ncharToIndex.get(c).add(i);\n}\nreturn dp(ring, 0, key, 0);\n}\n\nint dp(String ring, int i, String key, int j) {\nif(j == key.length()) return 0;\nif(memo[i][j] != 0) return memo[i][j];\nint n = ring.length();\nint res = Integer.MAX_VALUE;\nfor(int k : charToIndex.get(key.charAt(j))) {\nint delta = Math.abs(k-i);\ndelta = Math.min(delta, n - delta);\nint subProblem = dp(ring, k, key, j+1);\nres = Math.min(res, 1+delta+subProblem);\n}\nmemo[i][j] = res;\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/dst/","title":"Distance of Two Strings","text":"Difficulty LeetCode Note \ud83d\udd34 72. Edit Distance 72. Edit Distance"},{"location":"algorithm/dp/dst/#72-edit-distance","title":"72. Edit Distance","text":"<p>Given two strings <code>word1</code> and <code>word2</code>, return the minimum number of operations required to convert <code>word1</code> to <code>word2</code>.</p> <p>You have the following three operations permitted on a word:</p> <ul> <li>Insert a character</li> <li>Delete a character</li> <li>Replace a character</li> </ul> <p>Example 1:</p> <pre><code>Input: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -&gt; rorse (replace 'h' with 'r')\nrorse -&gt; rose (remove 'r')\nrose -&gt; ros (remove 'e')\n</code></pre> <p>Example 2:</p> <pre><code>Input: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -&gt; inention (remove 't')\ninention -&gt; enention (replace 'i' with 'e')\nenention -&gt; exention (replace 'n' with 'x')\nexention -&gt; exection (replace 'n' with 'c')\nexection -&gt; execution (insert 'u')\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li> </ul> <pre><code>class Solution {\npublic int minDistance(String word1, String word2) {\nint m = word1.length();\nint n = word2.length();\nint[][] dp = new dp[m+1][n+1];\n// dp[i][j]\u8868\u793as1[0..,i-1]\u548cs2[0..,j-1]\nfor(int i = 1; i &lt;= m; i++) {\ndp[i][0] = i;\n}\nfor(int j = 1; j &lt;= n; j++) {\ndp[0][j] = j;\n}\nfor(int i = 1; i &lt;= m; i++) {\nfor(int j = 1; j &lt;= n; j++) {\nif(word1.charAt(i-1) == word2.charAt(j-1)) {\ndp[i][j] = dp[i-1][j-1];\n}\nelse {\ndp[i][j] = min(\ndp[i-1][j-1] + 1,\ndp[i-1][j] + 1,\ndp[i][j-1] + 1\n);\n}\n}\n}\nreturn dp[m][n];\n}\nint min(int a, int b, int c) {\nreturn Math.min(a, Math.min(b,c));\n}\n}\n</code></pre>"},{"location":"algorithm/dp/frame/","title":"Frame","text":"Difficulty LeetCode Note \ud83d\udfe2 509. Fibonacci Number 509. Fibonacci Number \ud83d\udfe0 322. Coin Change 322. Coin Change <p>\u52a8\u6001\u89c4\u5212\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\u6c42\u6700\u503c\uff0c\u4f8b\u5982\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u6700\u5c0f\u7f16\u8f91\u8ddd\u79bb\u7b49\u7b49\u3002\u4e3b\u8981\u7684\u65b9\u6cd5\u5c31\u662f\u7a77\u4e3e\uff0c\u7a77\u4e3e\u9700\u8981\u6b63\u786e\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5e76\u4e14\u8981\u901a\u8fc7\u5907\u5fd8\u5f55\u6216\u8005\u8868\u683c\u6765\u907f\u514d\u7a77\u4e3e\u8fc7\u7a0b\u4e2d\u7684\u91cd\u53e0\u5b50\u95ee\u9898\u3002</p> <p>\u660e\u786ebase case -&gt; \u660e\u786e\u53d8\u91cf -&gt; \u5b9a\u4e49<code>dp</code>\u6570\u7ec4/\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u5173\u952e\u5c31\u5728\u4e8e<code>dp</code>\u6570\u7ec4/\u51fd\u6570\u7684\u5b9a\u4e49</p> <pre><code># top-down function\ndef dp(arr1, arr2, ...):\n  for option in options:\n    res = \u6700\u503c(result, dp(arr1, arr2, ...))\n  return res\n</code></pre> <pre><code># bottom-up dp-array\n# base case\ndp[0][0][...] = base case\nfor arr1 in [arr1s]:\n  for arr2 in [arr2s]:\n    for ...\n        dp[arr1][arr2][...] = \u6700\u503c(option1, option2...)\n</code></pre>"},{"location":"algorithm/dp/frame/#509-fibonacci-number","title":"509. Fibonacci Number","text":"<p>The Fibonacci numbers, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p> <pre><code>F(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</code></pre> <p>Given <code>n</code>, calculate <code>F(n)</code>.</p> <p>Example 1:</p> <pre><code>Input: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n</code></pre> <p>Example 3:</p> <pre><code>Input: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 30</code></li> </ul> <pre><code>class Solution {\npublic int fib(int n) {\nif(n == 0) return 0;\nint[] dp = new int[n+1];\n// base case\ndp[0] = 0;\ndp[1] = 1;\nfor(int i = 2; i &lt; n; i++) {\ndp[i] = dp[i-1] + dp[i-2];\n}\nreturn dp[n];\n}\n}\n</code></pre> <p>\u4f8b\u5982\u4e0a\u8ff0\u6590\u6ce2\u90a3\u5951\u6570\u5217\u9898\u4f8b\uff0c</p> <p><code>dp[0] = 0; dp[1] = 1;</code>\u4e3abase case\uff1b</p> <p>\u53d8\u91cf\u4ec5\u4e3a<code>int fib(int n)</code>\u4e2d\u7684<code>int n</code>\uff1b</p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a<code>dp[i] = dp[i-1] + dp[i-2];</code></p> <pre><code>int fib(int n) {\nint[] memo = new int[n+1];\nreturn helper(memo,n);\n}\n\nint helper(int[] memo, int n) {\n// base case\nif(n == 0 || n == 1) return n;\nif(memo[n] != 0) return memo[n];\nmemo[n] = helper(memo, n-1) + helper(memo, n-2);\nreturn memo[n];\n}\n</code></pre>"},{"location":"algorithm/dp/frame/#322-coin-change","title":"322. Coin Change","text":"<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p> <p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>Example 1:</p> <pre><code>Input: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n</code></pre> <p>Example 2:</p> <pre><code>Input: coins = [2], amount = 3\nOutput: -1\n</code></pre> <p>Example 3:</p> <pre><code>Input: coins = [1], amount = 0\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= coins.length &lt;= 12</code></li> <li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li> <li><code>0 &lt;= amount &lt;= 104</code></li> </ul> <pre><code>class Solution {\npublic int coinChange(int[] coins, int amount) {\n// dp[i]\u6307\u5f53amount == i\u65f6\uff0creturn\u6700\u5c11\u7684\u786c\u5e01\u6570\nint[] dp = new int[amount+1];\nArrays.fill(dp, amount+1);\ndp[0] = 0;\nfor(int i = 0; i &lt; dp.length; i++) {\nfor(int coin : coins) {\nif(coin &gt; i) {\ndp[i] = Math.min(dp[i], 1+dp[i-coin]);\n}\n}\n}\nreturn dp[amount] == amount + 1 ? -1 : dp[amount];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/lcs/","title":"Longest Common Subsequence(LCS)","text":"Difficulty LeetCode Note \ud83d\udfe0 1143. Longest Common Subsequence 1143. Longest Common Subsequence \ud83d\udfe0 583. Delete Operation for Two Strings 583. Delete Operation for Two Strings \ud83d\udfe0 712. Minimum ACSII Delete Sum for Two Strings 712. Minimum ACSII Delete Sum for Two Strings"},{"location":"algorithm/dp/lcs/#1143-longest-common-subsequence","title":"1143. Longest Common Subsequence","text":"<p>Given two strings <code>text1</code> and <code>text2</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <ul> <li>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</li> </ul> <p>A common subsequence of two strings is a subsequence that is common to both strings.</p> <p>Example 1:</p> <pre><code>Input: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n</code></pre> <p>Example 3:</p> <pre><code>Input: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> <li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li> </ul> <pre><code>class Solution {\nint[][] memo;\npublic int LongestCommonSubsequence(String text1, String text2) {\nint m = text1.length();\nint n = text2.length();\nmemo = new int[m][n];\nfor(int[] row : memo) {\nArrays.fill(row, -1);\n}\nreturn dp(s1, 0, s2, 0);\n}\n// dp == s1[i,...]&amp;s2[j,...]\u7684lcs\npublic int dp(String s1, int i, String s2, int j) {\n// base case: s1[0,..,s1.length()-1]\u548cs2[0,..,s2.length()-1]\u5219dp(s1, s1.length(), s2, s2.length())\u65f6lcs\u4e00\u5b9a\u662f0\nif(i == s1.length() || j == s2.length()) return 0;\nif(memo[i][j] != -1) return memo[i][j];\nif(s1.charAt(i) == s2.charAt(j)) {\nmemo[i][j] = 1 + dp(s1, i+1, s2, j+1);\n}\nelse {\nmemo[i][j] = Math.max(dp(s1, i+1, s2, j), dp(s1, i, s2, j+1));\n}\nreturn memo[i][j];\n}\n}\n</code></pre> <pre><code>class Solution {\npublic int longestCommonSubsequence(String text1, String text2) {\nint m = text1.length();\nint n = text2.length();\n// dp[i][j]\u6307\u7684\u662fs1[0..,i-1]&amp;s2[0..,j-1]\nint[][] dp = new int[m+1][n+1];\nfor(int i = 1; i &lt;= m; i++) {\nfor(int j = 1; j &lt;= n; j++) {\nif(text1.charAt(i) == text2.charAt(j)) {\ndp[i][j] = 1 + dp[i-1][j-1];\n}\nelse {\ndp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n}\n}\n}\nreturn dp[m][n];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/lcs/#583-delete-operation-for-two-strings","title":"583. Delete Operation for Two Strings","text":"<p>Given two strings <code>word1</code> and <code>word2</code>, return the minimum number of steps required to make <code>word1</code> and <code>word2</code> the same.</p> <p>In one step, you can delete exactly one character in either string.</p> <p>Example 1:</p> <pre><code>Input: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li> </ul> <pre><code>class Solution {\npublic int minDistance(String word1, String word2) {\nint m = word1.length();\nint n = word2.length();\nreturn m - lcs(word1, word2) + n - lcs(word1, word2);\n}\nprivate int lcs(String word1, String word2) {\nint m = s1.length();\nint n = s2.length();\nint[][] dp = new int[m+1][n+1];\nfor(int i = 1; i &lt;= m; i++) {\nfor(int j = 1; j &lt;= n; j++) {\nif(s1.charAt(i-1) == s2.charAt(j-1)) {\ndp[i][j] = 1 + dp[i-1][j-1];\n}\nelse {\ndp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n}\n}\n}\nreturn dp[m][n];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/lcs/#712-minimum-ascii-delete-sum-for-strings","title":"712. Minimum ASCII Delete Sum for Strings","text":"<p>Given two strings <code>s1</code> and <code>s2</code>, return the lowest ASCII sum of deleted characters to make two strings equal.</p> <p>Example 1:</p> <pre><code>Input: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul> <pre><code>class Solution {\nint memo[][];\npublic int minimumDeleteSum(String s1, String s2) {\n\n}\npublic int dp(String s1, int i, String s2, int j) {\nint res = 0;\nif(i == s1.length()) {\nfor(; j &lt; s2.length(); j++) {\nres += s2.charAt(j);\n}\nreturn res;\n}\nif(j == s2.length()) {\nfor(; i &lt; s1.length(); i++) {\nres += s1.charAt(i);\n}\nreturn res;\n}\nif(memo[i][j] != -1) return memo[i][j];\nif(s1.charAt(i) == s2.charAt(j)) {\nmemo[i][j] = dp(s1, i+1, s2, j+1);\n}\nelse {\nmemo[i][j] = Math.min(\ns1.charAt(i) + dp(s1, i+1, s2, j),\ns2.charAt(j) + dp(s1, i, s2, j+1)\n);\n}\nreturn memo[i][j];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/lis/","title":"Longest Increasing Subsequence(LIS)","text":"Difficulty LeetCode Note \ud83d\udfe0 300. Longest Increasing Subsequence 300. Longest Increasing Subsequence"},{"location":"algorithm/dp/lis/#300-longest-increasing-subsequence","title":"300. Longest Increasing Subsequence","text":"<p>Given an integer array <code>nums</code>, return the length of the longest strictly increasing subsequence.</p> <p>A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,0,3,2,3]\nOutput: 4\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [7,7,7,7,7,7,7]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2500</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <pre><code>class Solution {\npublic int lengthOfLIS(int[] nums) {\nint[] dp = new int[nums.length];\nArrays.fill(dp, 1);\nfor(int i = 0; i &lt; nums.length; i++) {\nfor(int j = 0; j &lt; i; j++) {\nif(nums[i] &gt; nums[j]) {\ndp[i] = Math.max(dp[i], dp[j]+1);\n}\n}\n}\nint res = 0;\nfor(int i = 0; i &lt; dp.length; i++) {\nres = Math.max(res, dp[i]);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/maxsub/","title":"Maximum Subarray","text":"Difficulty LeetCode Note \ud83d\udfe0 53. Maximum Subarray 53. Maximum Subarray"},{"location":"algorithm/dp/maxsub/#53-maximum-subarray","title":"53. Maximum Subarray","text":"<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p> <p>A subarray is a contiguous part of an array.</p> <p>Example 1:</p> <pre><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1]\nOutput: 1\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [5,4,-1,7,8]\nOutput: 23\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <pre><code>class Solution {\npublic int maxSubArray(int[] nums) {\nint n = nums.length;\nif(n == 0) return 0;\nint[] dp = new int[n];\ndp[0] = nums[0];\nfor(int i = 1; i &lt; n; i++) {\ndp[i] = Math.max(dp[i-1] + nums[i],nums[i]);\n}\nint res = Integer.MIN_VALUE;\nfor(int i = 0; i &lt; n; i++) {\nres = Math.max(res, dp[i]);\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/minpath/","title":"Minimum Path Sum","text":""},{"location":"algorithm/dp/minpath/#64-minimum-path-sum","title":"64. Minimum Path Sum","text":"<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p> <p>Note: You can only move either down or right at any point in time.</p> <p>Example 1:</p> <p></p> <pre><code>Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n</code></pre> <p>Example 2:</p> <pre><code>Input: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic int minPathSum(int[][] grid) {\nint m = grid.length;\nint n = grid[0].length;\nint[][] dp = new int[m][n];\nint sum1 = 0;\nint sum2 = 0;\nfor(int i = 0; i &lt; m; i++) {\nsum1 += grid[i][0];\ndp[i][0] = sum1;\n}\nfor(int j = 0; j &lt; n; j++) {\nsum2 += grid[0][j];\ndp[0][j] = sum2;\n}\nfor(int i = 1; i &lt; m; i++) {\nfor(int j = 1; j &lt; n; j++) {\ndp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n}\n}\nreturn dp[m-1][n-1];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/minpath/#174-dungeon-game","title":"174. Dungeon Game","text":"<p>The demons had captured the princess and imprisoned her in the bottom-right corner of a <code>dungeon</code>. The <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through <code>dungeon</code> to rescue the princess.</p> <p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to <code>0</code> or below, he dies immediately.</p> <p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).</p> <p>To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p> <p>Return the knight's minimum initial health so that he can rescue the princess.</p> <p>Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p> <p>Example 1:</p> <p></p> <pre><code>Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.\n</code></pre> <p>Example 2:</p> <pre><code>Input: dungeon = [[0]]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == dungeon.length</code></li> <li><code>n == dungeon[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code></li> </ul> <pre><code>class Solution {\npublic int[][] memo;\npublic int calculateMinimumHP(int[][] dungeon) {\nint m = dungeon.length;\nint n = dungeon[0].length;\nmemo = new int[m][n];\nfor(int[] row : memo) {\nArrays.fill(row, -1);\n}\nreturn dp(dungeon, 0, 0);\n}\npublic int dp(int[][] grid, int i, int j) {\nint m = grid.length;\nint n = grid[0].length;\nif(i == m-1 &amp;&amp; j == n-1) {\nreturn grid[i][j] &gt;= 0 ? 1 : -grid[i][j] + 1;\n}\nif(i == m || j == n) {\nreturn Integer.MAX_VALUE;\n}\nif(memo[i][j] != -1) return memo[i][j];\nint res = Math.min(\ndp(grid, i, j+1), dp(grid, i+1, j)\n) - grid[i][j];\nmemo[i][j] = res &lt;= 0 ? 1 : res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/regnex/","title":"Regular Expression Matching","text":"Difficulty LeetCode Note \ud83d\udd34 10. Regular Expression Matching 10. Regular Expression Matching"},{"location":"algorithm/dp/regnex/#10-regular-expression-matching","title":"10. Regular Expression Matching","text":"<p>Given an input string <code>s</code> and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p> <ul> <li><code>'.'</code> Matches any single character.</li> <li><code>'*'</code> Matches zero or more of the preceding element.</li> </ul> <p>The matching should cover the entire input string (not partial).</p> <p>Example 1:</p> <pre><code>Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>1 &lt;= p.length &lt;= 30</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and <code>'*'</code>.</li> <li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li> </ul> <p>\u4e00\u65e6\u6d89\u53ca\u5230\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u7a77\u4e3e\uff0c\u7406\u5e94\u6761\u4ef6\u53cd\u5c04\u5f0f\u5730\u60f3\u5230\u52a8\u6001\u89c4\u5212\u3002</p> <p>\u4e24\u4e2a\u6307\u9488<code>i</code>,<code>j</code>\u5206\u522b\u5728<code>s</code>\u548c<code>p</code>\u4e0a\u79fb\u52a8\uff0c\u5982\u679c\u6700\u540e\u4e24\u4e2a\u6307\u9488\u90fd\u80fd\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u90a3\u4e48\u5339\u914d\u6210\u529f\uff0c\u53cd\u4e4b\u5219\u5931\u8d25\u3002</p> <p>\u5982\u679c\u4e0d\u8003\u8651<code>*</code>\uff0c\u53ea\u9700\u8981\u67e5\u770b<code>s[i]</code>\u548c<code>p[j]</code>\u662f\u5426\u5339\u914d\u5373\u53ef</p> <pre><code>bool isMatch(string s, string p) {\nint i = 0;\nint j = 0;\nwhile (i &lt; s.size() &amp;&amp; j &lt; p.size()) {\nif(s[i] == p[j] || p[j] == '.') {\ni++;\nj++;\n} else {\nreturn false;\n}\n}\nreturn i == j\n}\n</code></pre> <p>\u5f53<code>p[j+1]</code>\u4e3a<code>*</code>\u65f6\uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a</p> <p>\u5982\u679c<code>s[i] == p[j]</code>\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a</p> <p>\u200b\u4e00\u662f<code>p[j]</code>\u5339\u914d\u591a\u4e2a\u5b57\u7b26\uff0c<code>s=\"aaa\", p=\"a*\"</code>\uff0c\u90a3\u4e48<code>p[0]</code>\u4f1a\u901a\u8fc7<code>*</code>\u5339\u914d3\u4e2a\u5b57\u7b26<code>\"a\"</code></p> <p>\u200b\u4e8c\u662f<code>s=\"aa\", p=\"a*aa\"</code>\uff0c\u53ea\u4f1a\u5339\u914d0\u6b21</p> <p>\u5982\u679c<code>s[i] != p[j]</code>\uff0c<code>p[j]</code>\u53ea\u80fd\u5339\u914d0\u6b21\uff0c\u7136\u540e\u770b\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u80fd\u548c<code>s[i]</code>\u5339\u914d\uff0c<code>s=\"aa\", p=\"b*aa\"</code></p> <pre><code>if (s[i] == p[j] || p[j] == '.') {\nif(j &lt; p.size() - 1 &amp;&amp; p[j+1] == '*') {\n// \u6709*\u901a\u914d\u7b26\uff0c\u53ef\u4ee5\u5339\u914d0\u6b21\u6216\u591a\u6b21\n} else {\n// \u65e0\u901a\u914d\u7b26\uff0c\u53ea\u80fd\u5339\u914d1\u6b21\ni++;\nj++;\n}\n} else {\n// \u4e0d\u5339\u914d \nif (j &lt; p.size() - 1 &amp;&amp; p[j+1] == '*') {\n// \u6709*\u901a\u914d\u7b26\uff0c\u53ea\u80fd\u5339\u914d0\u6b21\n} else {\n// \u65e0*\u901a\u914d\u7b26\uff0c\u65e0\u6cd5\u8fdb\u884c\u5339\u914d\nreturn false;\n}\n}\n</code></pre> <pre><code>class Solution {\npublic int memo[][];\npublic boolean isMatch(String s, String p) {\nint m = s.length();\nint n = p.length();\nmemo = new int[m][n];\nfor(int i = 0; i &lt; m; i++) {\nArrays.fill(memo[i],-1);\n}\nif(dp(s,0,p,0) == 0) {\nreturn true;\n} else {\nreturn false;\n}\n}\npublic int dp(String s, int i, String p, int j) {\nint m = s.length();\nint n = p.length();\n// base case\nif(j == n) {\nif(i == m) {\nreturn 0; // true\n} else {\nreturn 1; // false\n}\n}\nif(i == m) {\nif((n - j) % 2 == 1) {\nreturn 1;\n}\nfor(; j+1 &lt; n; j += 2) {\nif(p.charAt(j+1) != '*') {\nreturn 1;\n}\n}\nreturn 0;\n}\nif(memo[i][j] != -1) return memo[i][j];\nint res = 1;\nif(s.charAt(i) == p.charAt(j) || p.charAt(j) == '.') {\nif(j + 1 &lt; n &amp;&amp; p.charAt(j+1) == '*') {\nres = Math.min(dp(s,i,p,j+2), dp(s,i+1,p,j));\n} else {\nres = dp(s,i+1,p,j+1);\n}\n} else {\nif(j + 1 &lt; n &amp;&amp; p.charAt(j+1) == '*') {\nres = dp(s,i,p,j+2);\n} else {\nres = 1;\n}\n}\nmemo[i][j] = res;\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/regnex/#44-wildcard-matching","title":"44. Wildcard Matching","text":"<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>'?'</code> and <code>'*'</code> where:</p> <ul> <li><code>'?'</code> Matches any single character.</li> <li><code>'*'</code> Matches any sequence of characters (including the empty sequence).</li> </ul> <p>The matching should cover the entire input string (not partial).</p> <p>Example 1:</p> <pre><code>Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"aa\", p = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'?'</code> or <code>'*'</code>.</li> </ul> <pre><code>class Solution {\npublic int[][] memo;\npublic boolean isMatch(String s, String p) {\nint m = s.length();\nint n = p.length();\nmemo = new int[m][n];\nfor(int i = 0; i &lt; m; i++) {\nArrays.fill(memo[i],-1);\n}\nif(dp(s,0,p,0) == 0) return true;\nelse return false;\n}\npublic int dp(String s, int i, String p, int j) {\nint m = s.length();\nint n = p.length();\nif(j == n) {\nif(i == m) return 0;\nelse return 1;\n}\nif(i == m) {\nfor(int k = j; k &lt; n; k++) {\nif(p.charAt(k) != '*') return 1;\n}\nreturn 0;\n}\nif(memo[i][j] != -1) return memo[i][j];\nint res = 1;\nif(s.charAt(i) == p.charAt(j) || p.charAt(j) == '?') {\nres = dp(s,i+1,p,j+1);\n} else if(p.charAt(j) == '*') {\nres = Math.min(dp(s,i+1,p,j),dp(s,i,p,j+1));\n}\nmemo[i][j] = res;\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/dp/stock/","title":"Stock Problem","text":"<p>\u5bf9\u4e8e\u80a1\u7968\u4ea4\u6613\u95ee\u9898\uff0c\u72b6\u6001(\u5373\u53d8\u91cf)\u6709\u4e09\u79cd\uff1a\u4e00\u662f\u5929\u6570\uff0c\u4e8c\u662f\u5141\u8bb8\u4ea4\u6613\u7684\u6700\u5927\u6b21\u6570\uff0c\u4e09\u662f\u5f53\u524d\u7684\u6301\u6709\u72b6\u6001(<code>1</code>\u8868\u793a\u6301\u6709\uff0c<code>0</code>\u8868\u793a\u672a\u6301\u6709)\uff0c\u90a3\u4e48\u4e09\u7ef4\u6570\u7ec4\u7684\u904d\u5386\u4e3a</p> <pre><code>dp[i][k][0/1]\n0 &lt;= i &lt;= n-1 # n\u4e3a\u5929\u6570\n1 &lt;= k &lt;= K # K\u4e3a\u4ea4\u6613\u6570\u7684\u4e0a\u9650\nfor 0 &lt;= i &lt; n:\n  for 1 &lt;= k &lt;= K:\n    for s in {0,1}:\n      dp[i][k][s] = max(buy, sell, rest)\n</code></pre> <p>\u6700\u7ec8\u7b54\u6848\u4e00\u5b9a\u662f<code>dp[n-1][K][0]</code></p> <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5</p> <pre><code>dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1]+prices[i])\n</code></pre> <pre><code>dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0]-prices[i])\n</code></pre> <pre><code># base case\ndp[-1][...][0] = dp[...][0][0] = 0\ndp[-1][...][1] = dp[...][0][1] = -infinity #\u4e0d\u53ef\u80fd\u6301\u6709\u80a1\u7968\n</code></pre>"},{"location":"algorithm/dp/stock/#121-best-time-to-buy-and-sell-stock","title":"121. Best Time to Buy and Sell Stock","text":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p> <p>Example 1:</p> <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 105</code></li> <li><code>0 &lt;= prices[i] &lt;= 104</code></li> </ul> <p>\u672c\u4f8b\u9650\u5b9a\u6761\u4ef6\u662f\u6700\u591a\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\u4ea4\u6613\uff0c\u5373<code>k==1</code></p> <p>\u5148\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <pre><code>dp[i][1][0] = Math.max(dp[i-1][1][0], dp[i-1][1][1]+prices[i]);\ndp[i][1][1] = Math.max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]);\n// k = 0 dp[i-1][0][0] = 0\n// \u5316\u7b80\u540e\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\ndp[i][1] = Math.max(dp[i-1][1], -prices[i])\n</code></pre> <pre><code>class Solution {\npublic int maxProfit(int[] prices) {\nint n = prices.length;\nint[][] dp = new int[n][2];\nfor(int i = 0; i &lt; n; i++) {\nif(i == 0) {\n// base case\ndp[i][0] = 0;\ndp[i][1] = -prices[i];\ncontinue;\n}\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1]+prices[i]);\ndp[i][1] = Math.max(dp[i-1][1], -prices[i]);\n}\nreturn dp[n-1][0];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/stock/#122-best-time-to-buy-and-sell-stock-ii","title":"122. Best Time to Buy and Sell Stock II","text":"<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p>Example 1:</p> <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n</code></pre> <p>Example 3:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li> <li><code>0 &lt;= prices[i] &lt;= 104</code></li> </ul> <p>\u540c\u7406\uff0c\u5148\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <pre><code>dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1]+prices[i]);\ndp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n// \u672c\u4f8b\u4e2d\uff0ck\u65e0\u4e0a\u9650 k == k -1\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);\ndp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i]);\n</code></pre> <pre><code>class Solution {\npublic int maxProfit(int[] prices) {\nint n = prices.length;\nint[][] dp = new int[n][2];\nfor(int i = 0; i &lt; n; i++) {\nif(i == 0) {\n// base case\ndp[i][0] = 0;\ndp[i][1] = -prices[i];\ncontinue;\n}\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1]+prices[i]);\ndp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]-prices[i]);\n}\nreturn dp[n-1][0];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/stock/#309-best-time-to-buy-and-sell-stock-with-cooldown","title":"309. Best Time to Buy and Sell Stock with Cooldown","text":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p> <ul> <li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li> </ul> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p>Example 1:</p> <pre><code>Input: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [1]\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 5000</code></li> <li><code>0 &lt;= prices[i] &lt;= 1000</code></li> </ul> <pre><code>class Solution {\npublic int maxProfit(int[] prices) {\nint n = prices.length();\nint[][] dp = new int[n][2];\n/*\n    dp[i][k][1] = max(dp[i-1][k][1],dp[i-2][k-1][0]-prices[i])\n    dp[i][k][0] = max(dp[i-1][k][0],dp[i-1][k][1]+prices[i])\n    k -&gt; infinity\n    dp[i][1] = max(dp[i-1][1], dp[i-2][0]-prices[i])\n    dp[i][0] = max(dp[i-1][0], dp[i-1][1]+prices[i])\n    i == 0\n    dp[0][1] = max(dp[-1][1],dp[-2][0]-prices[0]) = -prices[0]\n    dp[0][0] = 0\n    i == 1\n    dp[1][1] = max(dp[0][1], dp[-1][0]-prices[i]) = max(dp[0][1], -prices[i])\n    */\nfor(int i = 0; i &lt; n; i++) {\nif(i-1 == -1) {\ndp[i][0] = 0;\ndp[i][1] = -prices[i];\ncontinue;\n}\nif(i-2 == -1) {\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1]+prices[i]);\ndp[i][1] = Math.max(dp[i-1][1],-prices[i]);\ncontinue;\n}\ndp[i][0] = Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);\ndp[i][1] = Math.max(dp[i-1][1],dp[i-2][0]-prices[i]);\n}\nreturn dp[n-1][0];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/stock/#714-best-time-to-buy-and-sell-stock-with-transaction-fee","title":"714. Best Time to Buy and Sell Stock with Transaction Fee","text":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day, and an integer <code>fee</code> representing a transaction fee.</p> <p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p>Example 1:</p> <pre><code>Input: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 5 * 104</code></li> <li><code>1 &lt;= prices[i] &lt; 5 * 104</code></li> <li><code>0 &lt;= fee &lt; 5 * 104</code></li> </ul> <pre><code>class Solution {\npublic maxProfit(int[] prices, int fee) {\nint n = prices.length;\nint[][] dp = new int[n][2];\nfor(int i = 0; i &lt; n; i++) {\nif(i == 0) {\ndp[i][0] = 0;\ndp[i][1] = -prices[i] - fee;\ncontinue;\n}\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1]+prices[i]);\ndp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]-prices[i]-fee);\n}\nreturn dp[n-1][0];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/stock/#123-best-time-to-buy-and-sell-stock-iii","title":"123. Best Time to Buy and Sell Stock III","text":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>Find the maximum profit you can achieve. You may complete at most two transactions.</p> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p>Example 1:</p> <pre><code>Input: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n</code></pre> <p>Example 3:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 105</code></li> <li><code>0 &lt;= prices[i] &lt;= 105</code></li> </ul> <pre><code>class Solution {\npublic int maxProfit(int[] prices) {\nint n = prices.length;\nint max_k = 2;\nfor(int i = 0; i &lt; n; i++) {\nfor(int k = max_k; k &gt;= 1; k--) {\n// base case\nif(i == 0) {\ndp[i][k][0] = 0;\ndp[i][k][1] = -prices[i];\ncontinue;\n}\ndp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1]+prices[i]);\ndp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0]-prices[i]);\n}\n}\nreturn dp[n-1][max_k][0];\n}\n}\n</code></pre>"},{"location":"algorithm/dp/stock/#188-best-time-to-buy-and-sell-stock-iv","title":"188. Best Time to Buy and Sell Stock IV","text":"<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day, and an integer <code>k</code>.</p> <p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions.</p> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p>Example 1:</p> <pre><code>Input: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 100</code></li> <li><code>1 &lt;= prices.length &lt;= 1000</code></li> <li><code>0 &lt;= prices[i] &lt;= 1000</code></li> </ul> <pre><code>class Solution {\npublic int maxProfit(int ks, int[] prices) {\n/*\n        dp[i][k][0] = max(dp[i-1][k][0],dp[i-1][k][1]+prices[i])\n        dp[i][k][1] = max(dp[i-1][k][1],dp[i-1][k-1][0]-prices[i])\n\n        dp[0][k][0]=m(dp[-1][k][0],dp[-1][k][1]+prices[i]) = 0\n        dp[1][k][1]=m(dp[0][k][1],dp[0][k-1][0]-prices[i]) = -prices[i]\n\n        dp[i][0][0]=m(dp[i-1][0][0],dp[i-1][0][1]+prices[i]) = 0\n        dp[i][0][1]=m(dp[i-1][0][1],dp[i-1][-1][0]-prices[i]) = -infinity\n\n        dp[-1][_][0] = 0\n        dp[_][0][0] = 0\n        dp[-1][_][1] = -infinity\n        dp[_][0][1] = -infinity\n        */\nint n = prices.length;\nint max_k = ks;\nif(n &lt;= 0) return 0;\nif(max_k &gt; n / 2) return maxProfit_inf(prices);\nint[][][] dp = new int[n][max_k+1][2];\nfor(int i = 0; i &lt; n; i++) {\ndp[i][0][1] = Integer.MIN_VALUE;\ndp[i][0][0] = 0;\n}\nfor(int i = 0; i &lt; n; i++) {\nfor(int k = max_k; k &gt;= 1; k--) {\nif(i == 0) {\ndp[i][k][0] = 0;\ndp[i][k][1] = -prices[i];\ncontinue;\n}\ndp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1]+prices[i]);\ndp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0]-prices[i]);\n}\n}\nreturn dp[n-1][max_k][0];\n}\npublic int maxProfit_inf(int[] prices) {\nint n = prices.length;\nint[][] dp = new int[n][2];\nfor(int i = 0; i &lt; n; i++) {\nif(i == 0) {\n// base case\ndp[i][0] = 0;\ndp[i][1] = -prices[i];\ncontinue;\n}\ndp[i][0] = Math.max(dp[i-1][0], dp[i-1][1]+prices[i]);\ndp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]-prices[i]);\n}\nreturn dp[n-1][0];\n}\n}\n</code></pre>"},{"location":"algorithm/linked_list/reverse/","title":"Reverse Linked List","text":"Difficulty LeetCode Note \ud83d\udfe2 206. Reverse Linked List 206. Reverse Linked List \ud83d\udfe0 92. Reverse Linked List II 92. Reverse Linked List II \ud83d\udd34 25. Reverse Nodes in k-Group 25. Reverse Nodes in k-Group"},{"location":"algorithm/linked_list/reverse/#206-reverse-linked-list","title":"206. Reverse Linked List","text":"<p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2]\nOutput: [2,1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: head = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <pre><code>class Solution {\npublic:\nListNode* reverseList(ListNode* head) {\nListNode* prev = nullptr;\nListNode* curr = head;\nwhile(curr != nullptr) {\nListNode* next = curr-&gt;next;\ncurr-&gt;next = prev;\nprev = curr;\ncurr = next;\n}\nhead = prev;\nreturn head;\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/reverse/#92-reverse-linked-list-ii","title":"92. Reverse Linked List II","text":"<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return the reversed list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: head = [5], left = 1, right = 1\nOutput: [5]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>-500 &lt;= Node.val &lt;= 500</code></li> <li><code>1 &lt;= left &lt;= right &lt;= n</code></li> </ul> <pre><code>class Solution {\npublic:\nListNode* succ = nullptr;\nListNode* reverseBetween(ListNode* head, int left, int right) {\nif(left == 1) return reverseN(head, right);\nelse {\nhead-&gt;next = reverseBetween(head-&gt;next, left-1, right-1);\nreturn head;\n}\n}\nListNode* reverseN(ListNode* head, int n) {\nif(n == 1) {\nsucc = head -&gt; next;\nreturn head;\n}\nListNode* last = reverseN(head-&gt;next, n-1);\nhead-&gt;next-&gt;next = head;\nhead-&gt;next = succ;\nreturn last;\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/reverse/#25-reverse-nodes-in-k-group","title":"25 Reverse Nodes in k-Group","text":"<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return the modified list.</p> <p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p> <p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul> <pre><code>class Solution {\npublic:\nListNode* reverseKGroup(ListNode* head, int k) {\nListNode* a = head;\nListNode* b = head;\nfor(int i = 0; i &lt; k; i++) {\nif(b == nullptr) return head;\nb = b-&gt;next;\n}\nListNode* newHead = reverse(a,b);\na-&gt;next = reverseKGroup(b, k);\nreturn newHead;\n}\nListNode* reverse(ListNode* a, ListNode* b) {\nListNode* pre = nullptr;\nListNode* cur = a;\nListNode* nxt = a;\nwhile(cur != b) {\nnxt = cur-&gt;next;\ncur-&gt;next = pre;\npre = cur;\ncur = nxt;\n}\nreturn pre;\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/single/","title":"Single Linked List","text":"Difficulty LeetCode Note \ud83d\udfe2 21. Merge Two Sorted Lists 21. Merge Two Sorted Lists \ud83d\udd34 23. Merge k Sorted Lists 23. Merge k Sorted Lists \ud83d\udfe2 141. Linked List Cycle 141. Linked List Cycle \ud83d\udfe0 142. Linked List Cycle II 142. Linked List Cycle \ud83d\udfe2 876. Middle of the Linked List 876. Middle of the Linked List \ud83d\udfe0 19. Remove Nth Node From End of Lis 19. Remove Nth Node From End of Lis"},{"location":"algorithm/linked_list/single/#21-merge-two-sorted-lists","title":"21. Merge Two Sorted Lists","text":"<p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p> <p>Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return the head of the merged linked list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: list1 = [], list2 = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: list1 = [], list2 = [0]\nOutput: [0]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>Both <code>list1</code> and <code>list2</code> are sorted in non-decreasing order.</li> </ul> <pre><code>class Solution {\npublic:\nListNode* mergeTwoLists(listNode* list1, ListNode* list2) {\nListNode* dummy = new ListNode();\ndummy-&gt;val = -1;\nListNode* p = dummy;\nListNode* p1 = list1;\nListNode* p2 = list2;\nwhile(p1 != nullptr &amp;&amp; p2 != nullptr) {\nif(p1-&gt;val &lt;= p2-&gt;val) {\np-&gt;next = p1;\np1 = p1-&gt;next;\n}\nelse {\np-&gt;next = p2;\np2 = p2-&gt;next;\n}\np = p-&gt;next;\n}\nif(p1 != nullptr) p-&gt;next = p1;\nif(p2 != nullptr) p-&gt;next = p2;\nreturn dummy-&gt;next;\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/single/#23-merge-k-sorted-lists","title":"23. Merge k Sorted Lists","text":"<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p> <p>Merge all the linked-lists into one sorted linked-list and return it.</p> <p>Example 1:</p> <pre><code>Input: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre> <p>Example 2:</p> <pre><code>Input: lists = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: lists = [[]]\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li><code>k == lists.length</code></li> <li><code>0 &lt;= k &lt;= 104</code></li> <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> <li><code>-104 &lt;= lists[i][j] &lt;= 104</code></li> <li><code>lists[i]</code> is sorted in ascending order.</li> <li>The sum of <code>lists[i].length</code> will not exceed <code>104</code>.</li> </ul> <pre><code>class Solution {\npublic:\nListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\npriority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, cmp&gt; pq;\nfor(ListNode* head : lists) {\nif(head != nullptr) pq.push(head);\n}\nListNode* dummy = new ListNode();\nListNode* p = dummy;\nwhile(!pq.empty()) {\nListNode* top = pq.top();\np-&gt;next = top;\np = p-&gt;next;\npq.top();\nif(top-&gt;next){\npq.push(top-&gt;next);\n}\n}\nreturn dummy-&gt;next;\n}\nstruct cmp {\nbool operator()(const ListNode* a, const ListNode* b) {\nreturn a-&gt;val &gt; b-&gt;val;\n}\n};\n};\n</code></pre>"},{"location":"algorithm/linked_list/single/#141-linked-list-cycle","title":"141. Linked List Cycle","text":"<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to. Note that <code>pos</code> is not passed as a parameter.</p> <p>Return <code>true</code> if there is a cycle in the linked list. Otherwise, return <code>false</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of the nodes in the list is in the range <code>[0, 104]</code>.</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul> <pre><code>class Solution {\npublic:\nbool hasCycle(ListNode* head) {\nListNode* slow = head;\nListNode* fast = head;\nwhile(fast != nullptr &amp;&amp; fast-&gt;next != nullptr){\nslow = slow-&gt;next;\nfast = fast-&gt;next-&gt;next;\nif(fast == slow) return true;\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/single/#142-linked-list-cycle-ii","title":"142. Linked List Cycle II","text":"<p>Given the <code>head</code> of a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to (0-indexed). It is <code>-1</code> if there is no cycle. Note that <code>pos</code> is not passed as a parameter.</p> <p>Do not modify the linked list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of the nodes in the list is in the range <code>[0, 104]</code>.</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul> <pre><code>class Solution {\npublic:\nListNode* detectCycle(ListNode* head) {\nListNode* slow = head;\nListNode* fast = head;\nwhile(fast != nullptr &amp;&amp; fast-&gt;next != nullptr) {\nslow = slow-&gt;next;\nfast = fast-&gt;next-&gt;next;\nif(slow == fast) {\nbreak;\n}\n}\nif(fast == nullptr || fast-&gt;next == nullptr) {\nreturn nullptr;\n}\nelse {\nslow = head;\nwhile(slow != fast) {\nslow = slow-&gt;next;\nfast = fast-&gt;next;\n}\nreturn slow;\n}\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/single/#876-middle-of-the-linked-list","title":"876. Middle of the Linked List","text":"<p>Given the <code>head</code> of a singly linked list, return the middle node of the linked list.</p> <p>If there are two middle nodes, return the second middle node.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic:\nListNode* middleNode(ListNode* head) {\nListNode* slow = head;\nListNode* fast = head;\nwhile(fast != nullptr &amp;&amp; fast-&gt;next != nullptr) {\nslow = slow-&gt;next;\nfast = fast-&gt;next-&gt;next;\n}\nreturn slow;\n}\n};\n</code></pre>"},{"location":"algorithm/linked_list/single/#19-remove-nth-node-from-end-of-list","title":"19. Remove Nth Node From End of List","text":"<p>Given the <code>head</code> of a linked list, remove the <code>nth</code> node from the end of the list and return its head.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: head = [1], n = 1\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: head = [1,2], n = 1\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>sz</code>.</li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li> </ul> <pre><code>class Solution {\npublic:\nListNode* removeNthFromEnd(ListNode* head, int n) {\nListNode* dummy = new ListNode();\ndummy-&gt;val = -1;\ndummy-&gt;next = head;\nListNode* p = findFromEnd(dummy, n+1);\np-&gt;next = p-&gt;next-&gt;next;\nreturn dummy-&gt;next;\n}\nprivate:\nListNode* findFromEnd(ListNode* head, int k) {\nListNode* p1 = head;\nfor(int i = 0; i &lt; k; i++) {\np1 = p1-&gt;next;\n}\nListNode* p2 = head;\nwhile(p1 != nullptr) {\np2 = p2-&gt;next;\np1 = p1-&gt;next;\n}\nreturn p2;\n}\n};\n</code></pre>"},{"location":"algorithm/other/rain/","title":"Trapping Rain Water","text":""},{"location":"algorithm/other/rain/#42-trapping-rain-water","title":"42. Trapping Rain Water","text":"<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p> <p>Example 1:</p> <p></p> <pre><code>Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</code></pre> <p>Example 2:</p> <pre><code>Input: height = [4,2,0,3,2,5]\nOutput: 9\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= height[i] &lt;= 105</code></li> </ul> <pre><code>class Solution {\npublic int trap(int[] height) {\nint left = 0;\nint right = height.length - 1;\nint res = 0;\nint lMax = 0;\nint rMax = 0;\nwhile(left &lt; right) {\nlMax = Math.max(lMax, height[left]);\nrMax = Math.max(rMax, height[right]);\nif(lMax &lt; rMax) {\nres += lMax - height[left];\nleft++;\n} else {\nres += rMax - height[right];\nright--;\n}\n}\nreturn res;\n}\n}\n</code></pre> <pre><code>lMax = Math.max(lMax, height[left]);\n// lMax\u8868\u793a[0..left]\u7684\u6700\u9ad8\u70b9\nrMax = Math.max(rMax, height[right]);\n// rMax\u8868\u793a[right..n-1]\u7684\u6700\u9ad8\u70b9\n</code></pre> <p>\u5bf9\u4e8e<code>height[left]</code>\u800c\u8a00\uff0c\u53ea\u9700\u8981\u53f3\u4fa7\u5b58\u5728\u9ad8\u4e8e<code>lMax</code>\u7684\u9ad8\u70b9\uff0c\u5373\u53ef\u8ba1\u7b97\u6c34\u91cf</p> <pre><code>res += lMax - height[left];\n</code></pre>"},{"location":"algorithm/other/rain/#11-container-with-most-water","title":"11. Container With Most Water","text":"<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p> <p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>Return the maximum amount of water a container can store.</p> <p>Notice that you may not slant the container.</p> <p>Example 1:</p> <p></p> <pre><code>Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</code></pre> <p>Example 2:</p> <pre><code>Input: height = [1,1]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>2 &lt;= n &lt;= 105</code></li> <li><code>0 &lt;= height[i] &lt;= 104</code></li> </ul> <pre><code>class Solution {\npublic int maxArea(int[] height) {\nint left = 0;\nint right = height.length - 1;\nint res = 0;\nwhile(left &lt; right) {\nint area = Math.min(height[left],height[right]) * (right - left);\nres = Math.max(res, area);\nif(height[left] &lt; height[right]) left++;\nelse right--;\n}\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/tree/basics/","title":"Binary Tree Basics and Traverse","text":"Difficulty LeetCode Note \ud83d\udfe2 104. Maximum Depth of Binary Tree 104. Maximum Depth of Binary Tree \ud83d\udfe2 144. Binary Tree Preorder Traversal 144. Binary Tree Preorder Traversal \ud83d\udfe2 543. Diameter of Binary Tree 543. Diameter of Binary Tree \ud83d\udd34 124. Binary Tree Maximum Path Sum 124. Binary Tree Maximum Path Sum \ud83d\udfe2 226. Invert Binary Tree 226. Invert Binary Tree \ud83d\udfe0 116. Populating Next Right Pointers in Each Node 116. Populating Next Right Pointers in Each Node \ud83d\udfe0 114. Flatten Binary Tree to Linked List 114. Flatten Binary Tree to Linked List \ud83d\udfe0 652. Find Duplicate Subtree 652. Find Duplicate Subtree"},{"location":"algorithm/tree/basics/#104-maximum-depth-of-binary-tree","title":"104. Maximum Depth of Binary Tree","text":"<p>Given the <code>root</code> of a binary tree, return its maximum depth.</p> <p>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: 3\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [1,null,2]\nOutput: 2\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic:\nint maxDepth(TreeNode* root) {\nif(root == nullptr) {\nreturn 0;\n}\nint leftMax = maxDepth(root-&gt;left);\nint rightMax = maxDepth(root-&gt;right);\nreturn max(leftMax, rightMax) + 1;\n}\n};\n</code></pre> <p>\u7406\u89e3\u9012\u5f52\u7684\u5173\u952e\u5728\u4e8e\u628a\u63e1\u4f4f\u51fd\u6570\u7684\u5b9a\u4e49,\u4e0d\u8981\u6389\u5165\u5177\u4f53\u7684\u9012\u5f52\u4e4b\u4e2d\u3002\u4f8b\u5982\u672c\u9898\u4e2d<code>int maxDepth(TreeNode* root)</code>\u7684\u5b9a\u4e49\u662f\u8fd4\u56de\u4ee5<code>root</code>\u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u7406\u89e3\u5230\u8fd9\u4e00\u6b65\u5c31\u8db3\u591f\u4e86\u3002</p> <p>\u8003\u8651base case\u65f6\uff0c\u5c31\u662f\u7a7a\u4e8c\u53c9\u6811\uff0c\u7a7a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5<code>return 0</code>\uff1b</p> <p>\u5bf9\u4e8e\u4e00\u68f5\u975e\u7a7a\u4e8c\u53c9\u6811\u800c\u8a00\uff0c\u6700\u5927\u6df1\u5ea6 = max(\u5de6\u5b50\u6811\u6700\u5927\u6df1\u5ea6\uff0c\u53f3\u5b50\u6811\u6700\u5927\u6df1\u5ea6) + 1</p>"},{"location":"algorithm/tree/basics/#144-binary-tree-preorder-traversal","title":"144. Binary Tree Preorder Traversal","text":"<p>Given the <code>root</code> of a binary tree, return the preorder traversal of its nodes' values.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,null,2,3]\nOutput: [1,2,3]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [1]\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; res;\nvector&lt;int&gt; preorderTraversal(TreeNode* root){\ntraverse(root);\nreturn res;\n}\nvoid traverse(TreeNode* root) {\nif(root == nullptr) return;\nres.push_back(root-&gt;val);\ntraverse(root-&gt;left);\ntraverse(root-&gt;right);\n}\n};\n</code></pre> <p><code>traverse(TreeNode*)</code>\u51fd\u6570\u7528\u4e8e(\u524d\u5e8f)\u904d\u5386\u4e8c\u53c9\u6811\uff0c(\u524d\u5e8f)\u904d\u5386\u7684\u987a\u5e8f\u662f<code>NodeVal -&gt; leftTree -&gt; rightTree</code>\uff0c\u4e14base case\u662f\u7a7a\u4e8c\u53c9\u6811\u65f6<code>return</code></p>"},{"location":"algorithm/tree/basics/#543-diameter-of-binary-tree","title":"543. Diameter of Binary Tree","text":"<p>Given the <code>root</code> of a binary tree, return the length of the diameter of the tree.</p> <p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p> <p>The length of a path between two nodes is represented by the number of edges between them.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [1,2]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 104]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic:\nint maxDiameter = 0;\nint diameterOfBinaryTree(TreeNode* root) {\nint depth = maxDepth(root);\nreturn maxDiameter;\n}\nint maxDepth(TreeNode* root) {\nif(root == nullptr) return 0;\nint left = maxDepth(root-&gt;left);\nint right = maxDepth(root-&gt;right);\nint diameter = left + right;\nmaxDiameter = max(maxDiameter, diameter);\nreturn max(left,right) + 1;\n}\n};\n</code></pre> <p>\u7406\u89e3<code>int maxDepth(TreeNode* root)</code>\u7684\u542b\u4e49\uff0c\u5728\u6c42\u67d0\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u7684\u6846\u67b6\u4e2d\u987a\u4fbf\u8ba1\u7b97\u51fa\u76f4\u5f84\uff0c\u5e76\u76f8\u4e92\u6bd4\u8f83\u4ee5\u5f97\u51fa\u6700\u5927\u76f4\u5f84\u3002<code>diameter = left + right;</code></p>"},{"location":"algorithm/tree/basics/#124-binary-tree-maximum-path-sum","title":"124. Binary Tree Maximum Path Sum","text":"<p>A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.</p> <p>The path sum of a path is the sum of the node's values in the path.</p> <p>Given the <code>root</code> of a binary tree, return the maximum path sum of any non-empty path.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 3 * 104]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> <pre><code>class Solution {\npublic:\nint res = INT_MIN;\nint maxPathSum(TreeNode* root) {\nif(root == nullptr) return 0;\nint oneSideMaxVal = oneSideMax(root);\nreturn res;\n}\nint oneSideMax(TreeNode* root) {\nif(root == nullptr) return 0;\nint left = max(0, oneSideMax(root-&gt;left));\nint right = max(0, oneSideMax(root-&gt;right));\nint pathMaxSum = root-&gt;val + left + right;\nres = max(res, pathMaxSum);\nreturn max(left, right) + root-&gt;val;\n}\n};\n</code></pre> <p>\u7406\u89e3<code>int oneSideMax(TreeNode* root)</code>\u7684\u542b\u4e49\u5c31\u662f\u6307\uff1a\u4e00\u5b9a\u901a\u8fc7<code>root</code>\u8282\u70b9\u7684\u6700\u5927\u5355\u5411\u8def\u5f84\u548c\uff08\u8981\u4e48\u662f<code>root-&gt;leftTree</code>\uff0c\u8981\u4e48\u662f<code>root-&gt;rightTree</code>\uff09\uff0c\u5176\u4e2d\u901a\u8fc7\u4e24\u6b21\u9012\u5f52\u904d\u5386\u4e86\u4e8c\u53c9\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u4ece\u800c\u8ba1\u7b97\u51fa\u4e86\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684<code>pathMaxSum</code></p>"},{"location":"algorithm/tree/basics/#226-invert-binary-tree","title":"226. Invert Binary Tree","text":"<p>Given the <code>root</code> of a binary tree, invert the tree, and return its root.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [2,1,3]\nOutput: [2,3,1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* invertTree(TreeNode* root) {\ntraverse(root);\nreturn root;\n}\nvoid traverse(TreeNode* root) {\nif(root == nullptr) return;\nTreeNode* temp = root-&gt;left;\nroot-&gt;left = root-&gt;right;\nroot-&gt;right = temp;\ntraverse(root-&gt;left);\ntraverse(root-&gt;right);\n}\n};\n</code></pre>"},{"location":"algorithm/tree/basics/#116-populating-next-right-pointers-in-each-note","title":"116. Populating Next Right Pointers in Each Note","text":"<p>You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p> <pre><code>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</code></pre> <p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p> <p>Initially, all next pointers are set to <code>NULL</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 212 - 1]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> <pre><code>class Solution {\nNode* connect(Node* root) {\nif(root == nullptr) return root;\ntraverse(root-&gt;left, root-&gt;right);\nreturn root;\n}\nvoid traverse(Node* node1, Node* node2) {\nif(node1 == nullptr &amp;&amp; node2 == nullptr) return;\nnode1-&gt;next = node2;\ntraverse(node1-&gt;left, node1-&gt;right);\ntraverse(node1-&gt;right, node2-&gt;left);\ntraverse(node2-&gt;left, node2-&gt;right);\n}\n};\n</code></pre>"},{"location":"algorithm/tree/basics/#114-flatten-binary-tree-to-linked-list","title":"114. Flatten Binary Tree to Linked List","text":"<p>Given the <code>root</code> of a binary tree, flatten the tree into a \"linked list\":</p> <ul> <li>The \"linked list\" should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li> <li>The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.</li> </ul> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [0]\nOutput: [0]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>class Solution {\nvoid flatten(TreeNode* root) {\nif(root == nullptr) return;\nflatten(root-&gt;left);\nflatten(root-&gt;right);\nTreeNode* left = root-&gt;left;\nTreeNode* right = root-&gt;right;\nroot-&gt;left = nullptr;\nroot-&gt;right = left;\nTreeNode* p = root;\nwhile(p-&gt;right != nullptr) {\np = p-&gt;right;\n}\np-&gt;right = right;\n}\n};\n</code></pre> <p>\u8fd8\u662f\u8981\u5173\u6ce8\u51fd\u6570<code>void flatten(TreeNode* root)</code>\u7684\u5b9a\u4e49\uff1a\u5c06\u4e8c\u53c9\u6811\u62c9\u5e73\u6210\u4e00\u6761\u94fe\u8868\uff0c\u6839\u636e\u9012\u5f52\u7684\u601d\u60f3\u62c9\u5e73\u4e8c\u53c9\u6811\u7684\u6b65\u9aa4\u662f\u5148\u5c06\u5de6\u3001\u53f3\u5b50\u6811\u62c9\u5e73\uff0c\u518d\u5c06\u53f3\u94fe\u8868\u63a5\u5230\u5de6\u94fe\u8868\uff0c\u518d\u5c06\u5de6\u94fe\u8868\u63a5\u5230\u53f3\u4fa7\u3002\u5219\u662f\u5148\u904d\u5386\uff0c\u518d\u64cd\u4f5c\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u540e\u5e8f\u904d\u5386\u3002</p>"},{"location":"algorithm/tree/basics/#652-find-duplicate-subtrees","title":"652. Find Duplicate Subtrees","text":"<p>Given the <code>root</code> of a binary tree, return all duplicate subtrees.</p> <p>For each kind of duplicate subtrees, you only need to return the root node of any one of them.</p> <p>Two trees are duplicate if they have the same structure with the same node values.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [2,1,1]\nOutput: [[1]]\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of the nodes in the tree will be in the range <code>[1, 10^4]</code></li> <li><code>-200 &lt;= Node.val &lt;= 200</code></li> </ul> <pre><code>class Solution {\npublic:\nmap&lt;string, int&gt; memo;\nvector&lt;TreeNode*&gt; res;\nvector&lt;TreeNode*&gt; findDuplicateSubtree(TreeNode* root) {\nstring subTree = traverse(root);\nreturn res;\n}\nstring traverse(TreeNode* root) {\nif(root == nullptr) return \"#\";\nstring left = traverse(root-&gt;left);\nstring right = traverse(root-&gt;right);\nstring subTree = left + \",\" + right + \",\" + to_string(root-&gt;val);\nint freq;\nif(!memo.count(subTree)) {\nfreq = 0;\n}\nelse {\nfreq = memo[subTree];\n}\nif(freq == 1) {\nres.push_back(root);\n}\nmemo[subTree] = freq + 1;\nreturn subTree;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/","title":"Binary Search Tree Basics","text":"Difficulty LeetCode Note \ud83d\udfe0 230. Kth Smallest Element in a BST 230. Kth Smallest Element in a BST \ud83d\udfe0 538. Convert BST to Greater Tree 538. Convert BST to Greater Tree \ud83d\udfe0 1038. Binary Search Tree to Greater Sum Tree 1038. Binary Search Tree to Greater Sum Tree \ud83d\udfe0 98. Validate Binary Search Tree 98. Validate Binary Search Tree \ud83d\udfe0 450. Delete Node in a BST 450. Delete Node in a BST \ud83d\udfe2 700. Search in a Binary Search Tree 700. Search in a Binary Search Tree \ud83d\udfe0 701. Insert into a Binary Search Tree 701. Insert into a Binary Search Tree"},{"location":"algorithm/tree/bst_basics/#_1","title":"2 Binary Search Tree Basics","text":""},{"location":"algorithm/tree/bst_basics/#230-kth-smallest-element-in-a-bst","title":"230. Kth Smallest Element in a BST","text":"<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return the <code>kth</code> smallest value (1-indexed) of all the values of the nodes in the tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,1,4,null,2], k = 1\nOutput: 1\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 104</code></li> <li><code>0 &lt;= Node.val &lt;= 104</code></li> </ul> <p>\u5bf9\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811(BST)\u800c\u8a00\uff0c\u4e2d\u5e8f\u904d\u5386\u662f\u80fd\u591f\u4ece\u5c0f\u5230\u5927\u5347\u5e8f\u6392\u5217\u4e8c\u53c9\u6811\u8282\u70b9\u7684\uff0c\u4f8b\u5982\u9700\u8981\u5347\u5e8f\u6253\u5370BST\u7684\u8282\u70b9\u503c\uff0c\u5982\u4e0b\uff1a</p> <pre><code>void traverse(TreeNode* root) {\nif(root == nullptr) return;\ntraverse(root-&gt;left);\ncout &lt;&lt; root-&gt;val &lt;&lt; \" \";\n# \u5177\u4f53\u7684\u64cd\u4f5c\u53d6\u51b3\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u4ee3\u7801\ntraverse(root-&gt;right);\n}\n</code></pre> <p>\u5bf9\u4e8e\u672c\u4f8b\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4e0d\u662f\u6253\u5370<code>root-&gt;val</code>\uff0c\u800c\u662f\u8bb0\u5f55\u5f53\u524d\u7684<code>root-&gt;val</code>\u5728\u6574\u68f5\u641c\u7d22\u4e8c\u53c9\u6811\u4e2d\u7684\u5927\u5c0f\u6392\u540d\uff0c\u5219</p> <pre><code>class Solution {\nint res = 0;\nint rank = 0;\nint kthSmallest(TreeNode* root, int k) {\ntraverse(root, k);\nreturn res;\n}\nvoid traverse(TreeNode* root, int k) {\nif(root == nullptr) return;\ntraverse(root-&gt;left, k);\nrank++;\nif(k == rank) {\nres = root-&gt;val;\nreturn;\n}\ntraverse(root-&gt;right, k);\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/#538-convert-bst-to-greater-tree","title":"538. Convert BST to Greater Tree","text":"<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p> <p>As a reminder, a binary search tree is a tree that satisfies these constraints:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [0,null,1]\nOutput: [1,null,1]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li> <li><code>-104 &lt;= Node.val &lt;= 104</code></li> <li>All the values in the tree are unique.</li> <li><code>root</code> is guaranteed to be a valid binary search tree.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* convertBST(TreeNode* root) {\ntraverse(root);\nreturn root;\n}\nint sum = 0;\nvoid traverse(TreeNode* root) {\nif(root == nullptr) return;\ntraverse(root-&gt;right);\nsum += root-&gt;val;\nroot-&gt;val = sum;\ntraverse(root-&gt;left);\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/#1038-binary-search-tree-to-greater-sum-tree","title":"1038. Binary Search Tree to Greater Sum Tree","text":"<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p> <p>As a reminder, a binary search tree is a tree that satisfies these constraints:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [0,null,1]\nOutput: [1,null,1]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li>All the values in the tree are unique.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* bstToGst(TreeNode* root) {\ntraverse(root);\nreturn root;\n}\nint sum = 0;\nvoid traverse(TreeNode* root) {\nif(root == nullptr) return;\ntraverse(root-&gt;right);\nsum += root-&gt;val;\nroot-&gt;val = sum;\ntraverse(root-&gt;left);\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/#98-validate-binary-search-tree","title":"98. Validate Binary Search Tree","text":"<p>Given the <code>root</code> of a binary tree, determine if it is a valid binary search tree (BST).</p> <p>A valid BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p>Example 1:</p> <p></p> <pre><code>Input: root = [2,1,3]\nOutput: true\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 104]</code>.</li> <li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li> </ul> <pre><code>class Solution {\nbool isValidBST(TreeNode* root) {\nif(root == nullptr) return true;\nelse if(isSmaller(root-&gt;left, root-&gt;val) &amp;&amp; isGreater(root-&gt;right, root-&gt;val) &amp;&amp; isValidBST(root-&gt;left) &amp;&amp; isValidBST(root-&gt;right)) return true;\nelse return false;\n}\nbool isSmaller(TreeNode* root, int data) {\nif(root == nullptr) return true;\nelse if(root-&gt;val &lt; data &amp;&amp; isSmaller(root-&gt;left, data) &amp;&amp; isSmaller(root-&gt;right, data)) return true;\nelse return false;\n}\nbool isGreater(TreeNode* root, int data) {\nif(root == nullptr) return true;\nelse if(root-&gt;val &gt; data &amp;&amp; isGreater(root-&gt;left, data) &amp;&amp; isGreater(root-&gt;right, data)) return true;\nelse return false;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/#450-delete-node-in-a-bst","title":"450. Delete Node in a BST","text":"<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p> <p>Basically, the deletion can be divided into two stages:</p> <ol> <li>Search for a node to remove.</li> <li>If the node is found, delete the node.</li> </ol> <p>Example 1:</p> <p></p> <pre><code>Input: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [], key = 0\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li>Each node has a unique value.</li> <li><code>root</code> is a valid binary search tree.</li> <li><code>-105 &lt;= key &lt;= 105</code></li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* deleteNode(TreeNode* root, int key) {\nif(root == nullptr) return root;\nelse if(key &lt; root-&gt;val) root-&gt;left = deleteNode(root-&gt;left, key);\nelse if(key &gt; root-&gt;val) root-&gt;right = deleteNode(root-&gt;right, key);\nelse {\nif(root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) {\ndelete root;\nroot = nullptr;\n}\nelse if(root-&gt;left == nullptr &amp;&amp; root-&gt;right != nullptr){\nTreeNode* temp = root;\nroot = root-&gt;right;\ndelete temp;\n}\nelse if(root-&gt;left != nullptr &amp;&amp; root-&gt;right == nullptr){\nTreeNode* temp = root;\nroot = root-&gt;left;\ndelete temp;\n}\nelse {\nTreeNode* temp = findMin(root-&gt;right);\nroot-&gt;val = temp-&gt;val;\nroot-&gt;right = deleteNode(root-&gt;right, temp-&gt;val);\n}\n}\nreturn root;\n}\nTreeNode* findMin(TreeNode* root) {\nif(root == nullptr) return root;\nTreeNode* current = root;\nwhile(current-&gt;left != nullptr) {\ncurrent = current-&gt;left;\n}\nreturn current;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/#700-search-in-a-binary-search-tree","title":"700. Search in a Binary Search Tree","text":"<p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p> <p>Find the node in the BST that the node's value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [4,2,7,1,3], val = 5\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 107</code></li> <li><code>root</code> is a binary search tree.</li> <li><code>1 &lt;= val &lt;= 107</code></li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* searchBST(TreeNode* root, int val) {\nif(root == nullptr) {\nreturn nullptr;\n}\nelse if(root-&gt;val &lt; val) {\nreturn searchBST(root-&gt;right, val);\n}\nelse if(root-&gt;val &gt; val) {\nreturn searchBST(root-&gt;left, val);\n}\nreturn root;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/bst_basics/#701-insert-into-a-binary-search-tree","title":"701. Insert into a Binary Search Tree","text":"<p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p> <p>Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40,20,60,10,30,50,70,null,null,25]\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4,2,7,1,3,5]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[0, 104]</code>.</li> <li><code>-108 &lt;= Node.val &lt;= 108</code></li> <li>All the values <code>Node.val</code> are unique.</li> <li><code>-108 &lt;= val &lt;= 108</code></li> <li>It's guaranteed that <code>val</code> does not exist in the original BST.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* insertIntoBST(TreeNode* root, int val) {\nif(root == nullptr) root = new TreeNode(val);\nelse if(val &lt; root-&gt;val) {\nroot-&gt;left = insertIntoBST(root-&gt;left, val);\n}\nelse if(val &gt; root-&gt;val) {\nroot-&gt;right = insertIntoBST(root-&gt;right, val);\n}\nreturn root;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/build/","title":"Binary Tree Build","text":"Difficulty LeetCode Note \ud83d\udfe0 654. Maximum Binary Tree 654. Maximum Binary Tree \ud83d\udfe0 105. Construct Binary Tree from Preorder and Inorder Traversal 105. Construct Binary Tree from Preorder and Inorder Traversal \ud83d\udfe0 106. Construct Binary Tree from Inorder and Postorder Traversal 106. Construct Binary Tree from Inorder and Postorder Traversal \ud83d\udfe0 889. Construct Binary Tree from Preorder and Postorder Traversal 889. Construct Binary Tree from Preorder and Postorder Traversal"},{"location":"algorithm/tree/build/#654-maximum-binary-tree","title":"654. Maximum Binary Tree","text":"<p>You are given an integer array <code>nums</code> with no duplicates. A maximum binary tree can be built recursively from <code>nums</code> using the following algorithm:</p> <ol> <li>Create a root node whose value is the maximum value in <code>nums</code>.</li> <li>Recursively build the left subtree on the subarray prefix to the left of the maximum value.</li> <li>Recursively build the right subtree on the subarray suffix to the right of the maximum value.</li> </ol> <p>Return the maximum binary tree built from <code>nums</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\nExplanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: nums = [3,2,1]\nOutput: [3,null,2,null,1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li>All integers in <code>nums</code> are unique.</li> </ul> <pre><code>class Solution {\nTreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums) {\nreturn construct(nums, 0, nums.size()-1);\n}\nTreeNode* construct(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nif(lo &gt; hi) return nullptr;\nint index = -1;\nint maxVal = INT_MIN;\nfor(int i = lo; i &lt;= hi; i++) {\nif(maxVal &lt; nums[i]) {\nindex = i;\nmaxVal = nums[i];\n}\n}\nTreeNode* root = new TreeNode();\nroot-&gt;val = maxVal;\nroot-&gt;left = construct(nums, lo, index-1);\nroot-&gt;right = construct(nums, index+1, hi);\nreturn root;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/build/#105-construct-binary-tree-from-preorder-and-inorder-traversal","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","text":"<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return the binary tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n</code></pre> <p>Example 2:</p> <pre><code>Input: preorder = [-1], inorder = [-1]\nOutput: [-1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 3000</code></li> <li><code>inorder.length == preorder.length</code></li> <li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> <li><code>preorder</code> and <code>inorder</code> consist of unique values.</li> <li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li> <li><code>preorder</code> is guaranteed to be the preorder traversal of the tree.</li> <li><code>inorder</code> is guaranteed to be the inorder traversal of the tree.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\nreturn build(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);\n}\nTreeNode* build(vector&lt;int&gt;&amp; preorder, int preStart, int preEnd, vector&lt;int&gt;&amp; inorder, int inStart, int inEnd) {\nif(preStart &gt; preEnd) {\nreturn nullptr;\n}\nint rootVal = preorder[preStart];\nint index = 0;\nfor(int i = inStart; i &lt;= inEnd; i++) {\nif(inorder[i] == rootVal) {\nindex = i;\nbreak;\n}\n}\nTreeNode* root = new TreeNode();\nroot-&gt;val = rootVal;\nint leftSize = index - inStart;\nroot-&gt;left = build(preorder, preStart+1, preStart+leftSize, inorder, inStart, index-1);\nroot-&gt;right = build(preorder, preStart+leftSize+1, preEnd, inorder, index+1, inEnd);\nreturn root;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/build/#106-construct-binary-tree-from-inorder-and-postorder-traversal","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","text":"<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return the binary tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n</code></pre> <p>Example 2:</p> <pre><code>Input: inorder = [-1], postorder = [-1]\nOutput: [-1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= inorder.length &lt;= 3000</code></li> <li><code>postorder.length == inorder.length</code></li> <li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li> <li><code>inorder</code> and <code>postorder</code> consist of unique values.</li> <li>Each value of <code>postorder</code> also appears in <code>inorder</code>.</li> <li><code>inorder</code> is guaranteed to be the inorder traversal of the tree.</li> <li><code>postorder</code> is guaranteed to be the postorder traversal of the tree.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\nreturn build(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);\n}\nTreeNode* build(vector&lt;int&gt;&amp; inorder, int inStart, int inEnd, vector&lt;int&gt;&amp; postorder, int postStart, int postEnd) {\nif(inStart &gt; inEnd) return nullptr;\nint rootVal = postorder[postEnd];\nint index = 0;\nfor(int i = 0; i &lt; inorder.size(); i++) {\nif(inorder[i] == rootVal) {\nindex = i;\nbreak;\n}\n}\nint leftSize = index - inStart;\nTreeNode* root = new TreeNode();\nroot-&gt;val = rootVal;\nroot-&gt;left = build(inorder, inStart, index-1, postorder, postStart, postStart+leftSize-1);\nroot-&gt;right = build(inorder, index+1, inEnd, postorder, postStart+leftSize, postEnd-1);\nreturn root;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/build/#889-construct-binary-tree-from-preorder-and-postorder-traversal","title":"889. Construct Binary Tree from Preorder and Postorder Traversal","text":"<p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of distinct values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return the binary tree.</p> <p>If there exist multiple answers, you can return any of them.</p> <p>Example 1:</p> <p></p> <pre><code>Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\nOutput: [1,2,3,4,5,6,7]\n</code></pre> <p>Example 2:</p> <pre><code>Input: preorder = [1], postorder = [1]\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 30</code></li> <li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li> <li>All the values of <code>preorder</code> are unique.</li> <li><code>postorder.length == preorder.length</code></li> <li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li> <li>All the values of <code>postorder</code> are unique.</li> <li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* constructFromPrePost(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; postorder) {\nreturn build(preorder, 0, preorder.size()-1, postorder, 0, postorder.size()-1);\n}\nTreeNode* build(vector&lt;int&gt;&amp; preorder, int preStart, int preEnd, vector&lt;int&gt;&amp; postorder, int postStart, int postEnd) {\nif(preStart &gt; preEnd) return nullptr;\nif(preStart == preEnd) {\nreturn new TreeNode(preorder[preStart]);\n}\nint rootVal = preorder[preStart];\nint leftRootVal = preorder[preStart + 1];\nint index;\nfor(int i = postStart; i &lt;= postEnd; i++) {\nif(postorder[i] == leftRootVal) {\nindex = i;\nbreak;\n}\n}\nint leftSize = index - postStart + 1;\nTreeNode* root = new TreeNode(rootVal);\nroot-&gt;left = build(preorder, preStart+1, preStart+leftSize, postorder, postStart, index);\nroot-&gt;right = build(preorder, preStart+leftSize+1, preEnd, postorder, index+1, postEnd-1);\nreturn root;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/lca/","title":"Lowest Common Ancestor of a Binary Tree","text":"Difficulty LeetCode Note \ud83d\udfe0 236. Lowest Common Ancestor of a Binary Tree 236. Lowest Common Ancestor of a Binary Tree <p>\u627e\u5230\u4e8c\u53c9\u6811\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u516c\u5171\u7956\u5148\u9996\u5148\u8981\u627e\u5230\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u53d8\u4e3a<code>TreeNode* find(TreeNode* root, TreeNode* target)</code></p> <pre><code>TreeNode* find(TreeNode* root, TreeNode* target) {\nif(root == nullptr) return nullptr;\n// preorder,\u5148\u627eroot\nif(root-&gt;val == target-&gt;val) return root;\n// root\u4e0d\u662f\u76ee\u6807\u8282\u70b9\uff0c\u53bb\u5de6\u53f3\u5b50\u6811\u627e\nTreeNode* left = find(root-&gt;left, target);\nTreeNode* right = find(root-&gt;right, target);\n// \u5de6\u53f3\u5b50\u6811\u54ea\u4e00\u8fb9\u627e\u5230\u4e86\nreturn left != nullptr ? left : right;\n}\n</code></pre> <pre><code>TreeNode* find(TreeNode* root, int val1, int val2) {\n// base case\nif(root == nullptr) return nullptr;\nif(root-&gt;val == val1 || root-&gt;val == val2) {\nreturn root;\n}\nTreeNode* left = find(root-&gt;left, val1, val2);\nTreeNode* right = find(root-&gt;right, val1, val2);\nreturn left != nullptr ? left : right;\n}\n</code></pre> <p>\u5bf9\u4e8eLowest Common Ancestor(LCA)\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u7684<code>left != nullptr &amp;&amp; right != nullptr</code>\u65f6\uff0c\u5219\u8be5\u8282\u70b9\u5c31\u662f\u4e00\u4e2aLCA</p> <p>\u6216\u662f\uff0c\u7531\u4e8e\u9898\u8bbe\u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u503c\u4e3a<code>val1</code>\u6216<code>val2</code>\u7684\u8282\u70b9\u5219\u76f4\u63a5\u8fd4\u56de\uff0c\u9996\u5148\u8fd4\u56de\u7684\u8282\u70b9\u5219\u4e3a\u4e00\u4e2aLCA</p>"},{"location":"algorithm/tree/lca/#236-lowest-common-ancestor-of-a-binary-tree","title":"236. Lowest Common Ancestor of a Binary Tree","text":"<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p> <p>According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow a node to be a descendant of itself).\u201d</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [1,2], p = 1, q = 2\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 105]</code>.</li> <li><code>-109 &lt;= Node.val &lt;= 109</code></li> <li>All <code>Node.val</code> are unique.</li> <li><code>p != q</code></li> <li><code>p</code> and <code>q</code> will exist in the tree.</li> </ul> <pre><code>class Solution {\npublic:\nTreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\nreturn find(root, p-&gt;val, q-&gt;val);\n}\nTreeNode* find(TreeNode* root, int val1, int val2) {\nif(root == nullptr) return nullptr;\nif(root-&gt;val == val1 || root-&gt;val == val2) {\nreturn root;\n}\nTreeNode* left = find(root-&gt;left, val1, val2);\nTreeNode* right = find(root-&gt;right ,val1, val2);\nif(left != nullptr &amp;&amp; right != nullptr) {\nreturn root;\n}\nreturn left != nullptr ? left : right;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/merge/","title":"Merge Sort","text":"Difficulty LeetCode Note \ud83d\udfe0 912. Sort an Array 912. Sort an Array \ud83d\udd34 315. Count of Smaller Numbers After Self 315. Count of Smaller Numbers After Self \ud83d\udd34 493. Reverse Pairs 493. Reverse Pairs \ud83d\udd34 327. Count of Range Sum 327. Count of Range Sum <p>\u5f52\u5e76\u6392\u5e8f\u7684\u601d\u8def\uff1a\u5148\u5206\u7ec4\u6392\u5e8f\uff0c\u518d\u5c06\u5206\u7ec4\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u5408\u5e76</p> <pre><code>void sort(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nif(lo == hi) return; // \u5355\u72ec\u4e00\u4e2a\u5143\u7d20\u65e0\u9700\u6392\u5217\nint mid = lo + (hi-lo)/2;\nsort(nums, lo, mid);\nsort(nums, mid+1, hi); // \u5206\u7ec4\u6392\u5e8f\nmerge(nums, lo, mid, hi); // \u5408\u5e76\u7ed3\u679c\n}\nvector&lt;int&gt; temp;\nvoid merge(vector&lt;int&gt;&amp; nums, int lo, int mid, int hi){ for(int i = lo; i &lt;= hi; i++) {\ntemp[i] = nums[i];\n}\nint i = lo;\nint j = mid+1;\nfor(int p = lo; p &lt;= hi; p++) {\nif(i == mid+1) {\nnums[p] = temp[j];\nj++;\n}\nelse if(j == hi+1) {\nnums[p] = temp[i];\ni++;\n}\nelse if(temp[i]&gt;temp[j]) {\nnums[p] = temp[j];\nj++;\n}\nelse {\nnums[p] = temp[i];\ni++;\n}\n}\n}\n</code></pre>"},{"location":"algorithm/tree/merge/#912-sort-an-array","title":"912. Sort an Array","text":"<p>Given an array of integers <code>nums</code>, sort the array in ascending order.</p> <p>Example 1:</p> <pre><code>Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li> <li><code>-5 * 104 &lt;= nums[i] &lt;= 5 * 104</code></li> </ul> <pre><code>class Merge {\nprivate:\nvoid sort(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nif(lo == hi) return;\nint mid = lo + (hi-lo)/2;\nsort(nums, lo, mid);\nsort(nums, mid+1, hi);\nmerge(nums, lo, mid, hi);\n}\nvector&lt;int&gt; temp;\nvoid merge(vector&lt;int&gt;&amp; nums, int lo, int mid, int hi) {\nfor(int i = lo; i &lt;= hi; i++) {\ntemp[i] = nums[i];\n}\nint i = lo;\nint j = mid+1;\nfor(int p = lo; p &lt;= hi; p++) {\nif(i == mid + 1) {\nnums[p] = temp[j];\nj++;\n}\nelse if(j == hi + 1) {\nnums[p] = temp[i];\ni++;\n}\nelse if(temp[i] &lt; temp[j]) {\nnums[p] = temp[i];\ni++;\n}\nelse {\nnums[p] = temp[j];\nj++;\n}\n}\n}\npublic:\nvoid sort(vector&lt;int&gt;&amp; nums) {\ntemp.resize(nums.size());\nsort(nums, 0, nums.size()-1);\n}\n};\n\nclass Solution {\npublic:\nvector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) {\nMerge merge;\nmerge.sort(nums);\nreturn nums;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/merge/#315-count-of-smaller-numbers-after-self","title":"315. Count of Smaller Numbers After Self","text":"<p>You are given an integer array <code>nums</code> and you have to return a new <code>counts</code> array. The <code>counts</code> array has the property where <code>counts[i]</code> is the number of smaller elements to the right of <code>nums[i]</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1]\nOutput: [0]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [-1,-1]\nOutput: [0,0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <pre><code>struct Pair {\nint val;\nint id;\n};\nclass Solution {\nprivate:\nvector&lt;Pair&gt; temp;\nvector&lt;int&gt; count;\nvoid sort(vector&lt;Pair&gt;&amp; arr, int lo, int hi) {\nif(lo == hi) return;\nint mid = lo + (hi - lo) / 2;\nsort(arr, lo, mid);\nsort(arr, mid+1, hi);\nmerge(arr, lo, mid, hi);\n}\nvoid merge(vector&lt;Pair&gt;&amp; arr, int lo, int mid, int hi) {\nfor(int i = lo; i &lt;= hi; i++) {\ntemp[i] = arr[i];\n}\nint i = lo;\nint j = mid + 1;\nfor(int p = lo; p &lt;= hi; p++) {\nif(i == mid + 1) {\narr[p] = temp[j++];\n}\nelse if(j == hi + 1) {\narr[p] = temp[i++];\ncount[arr[p].id] += j - mid - 1;\n}\nelse if(temp[i].val &gt; temp[j].val) {\narr[p] = temp[j++];\n}\nelse {\narr[p] = temp[i++];\ncount[arr[p].id] += j - mid - 1;\n}\n}\n}\npublic:\nvector&lt;int&gt; countSmaller(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\ntemp.resize(n);\ncount.resize(n);\nvector&lt;Pair&gt; arr;\narr.resize(n);\nfor(int i = 0; i &lt; n; i++) {\nPair pair;\npair.val = nums[i];\npair.id = i;\narr[i] = pair;\n}\nsort(arr, 0, n-1);\nvector&lt;int&gt; res;\nfor(auto c : count) {\nres.push_back(c);\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/merge/#493-reverse-pairs","title":"493. Reverse Pairs","text":"<p>Given an integer array <code>nums</code>, return the number of reverse pairs in the array.</p> <p>A reverse pair is a pair <code>(i, j)</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code> and <code>nums[i] &gt; 2 * nums[j]</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,3,2,3,1]\nOutput: 2\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,4,3,5,1]\nOutput: 3\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> </ul> <pre><code>class Solution {\npublic:\nint reversePairs(vector&lt;int&gt;&amp; nums) {\nsort(nums);\nreturn count;\n}\nvoid sort(vector&lt;int&gt;&amp; nums) {\ntemp.resize(nums.size());\nsort(nums, 0, nums.size()-1);\n}\nprivate:\nvector&lt;int&gt; temp;\nint count = 0;\nvoid sort(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nif(lo == hi) return;\nint mid = lo + (hi-lo)/2;\nsort(nums, lo, mid);\nsort(nums, mid+1, hi);\nmerge(nums, lo, mid, hi);\n}\nvoid merge(vector&lt;int&gt;&amp; nums, int lo, int mid, int hi) {\nfor(int i = lo; i &lt;= hi; i++) {\ntemp[i] = nums[i];\n}\nint end = mid + 1;\nfor(int i = lo; i &lt;= mid; i++) {\nwhile(end &lt;= hi &amp;&amp; (long)nums[i] &gt; (long)nums[end] * 2) {\nend++;\n}\ncount += end - (mid + 1);\n};\nint i = lo;\nint j = mid + 1;\nfor (int p = lo; p &lt;= hi; p++) {\nif(i == mid + 1) {\nnums[p] = temp[j++];\n}\nelse if(j == hi + 1) {\nnums[p] = temp[i++];\n}\nelse if(temp[i] &lt; temp[j]) {\nnums[p] = temp[i++];\n}\nelse {\nnums[p] = temp[j++];\n}\n}\n}\n};\n</code></pre>"},{"location":"algorithm/tree/merge/#327-count-of-range-sum","title":"327. Count of Range Sum","text":"<p>Given an integer array <code>nums</code> and two integers <code>lower</code> and <code>upper</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.</p> <p>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> inclusive, where <code>i &lt;= j</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0], lower = 0, upper = 0\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> <li><code>-105 &lt;= lower &lt;= upper &lt;= 105</code></li> <li>The answer is guaranteed to fit in a 32-bit integer.</li> </ul> <pre><code>class Solution {\npublic:\nint countRangeSum(vector&lt;int&gt;&amp; nums, int lower, int upper) {\nthis-&gt;lower = lower;\nthis-&gt;upper = upper;\nvector&lt;long&gt; preSum;\npreSum.resize(nums.size()+1);\nfor(int i = 0; i &lt; nums.size(); i++) {\npreSum[i+1] = (long)nums[i] + preSum[i];\n}\nsort(preSum);\nreturn count;\n}\nvoid sort(vector&lt;long&gt;&amp; nums) {\ntemp.resize(nums.size());\nsort(nums, 0, nums.size()-1);\n}\nprivate:\nint lower;\nint upper;\nint count = 0;\nvector&lt;long&gt; temp;\nvoid sort(vector&lt;long&gt;&amp; nums, int lo, int hi) {\nif(lo == hi) return;\nint mid = lo + (hi - lo) / 2;\nsort(nums, lo, mid);\nsort(nums, mid+1, hi);\nmerge(nums, lo, mid, hi);\n}\nvoid merge(vector&lt;long&gt;&amp; nums, int lo, int mid, int hi) {\nfor(int i = lo; i &lt;= hi; i++) {\ntemp[i] = nums[i];\n}\nint start = mid + 1;\nint end = mid + 1;\nfor(int i = lo; i &lt;= mid; i++) {\nwhile(start &lt;= hi &amp;&amp; nums[start] - nums[i] &lt; lower) {\nstart++;\n}\nwhile(end &lt;= hi &amp;&amp; nums[end] - nums[i] &lt;= upper) {\nend++;\n}\ncount += (end-start);\n}\nint i = lo;\nint j = mid + 1;\nfor(int p = lo; p &lt;= hi; p++) {\nif (i == mid + 1) {\nnums[p] = temp[j++];\n}\nelse if(j == hi + 1) {\nnums[p] = temp[i++];\n}\nelse if(temp[i] &lt; temp[j]) {\nnums[p] = temp[i++];\n}\nelse {\nnums[p] = temp[j++];\n}\n}\n}\n};\n</code></pre>"},{"location":"algorithm/tree/quick/","title":"Quick Sort","text":"Difficulty LeetCode Note \ud83d\udfe0 912. Sort an Array 912. Sort an Array \ud83d\udfe0 215. Kth Largest Element in an Array 215. Kth Largest Element in an Array <p>\u5feb\u901f\u6392\u5e8f\u7684\u672c\u8d28\u662f\u6784\u5efa\u4e8c\u53c9\u641c\u7d22\u6811</p> <pre><code>void sort(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nif(lo &gt;= hi) return;\nint p = partition(nums, lo, hi);\nsort(nums, lo, p - 1);\nsort(nums, p + 1, hi);\n}\n</code></pre> <p>\u540c\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u6bd4\u8f83\u4e00\u4e0b</p> <pre><code>void traverse(TreeNode* root) {\ncout &lt;&lt; root-&gt;val &lt;&lt; \" \";\ntraverse(root-&gt;left);\ntraverse(root-&gt;right);\n}\n</code></pre> <p>\u5feb\u6392\u4e5f\u662f\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386</p> <pre><code>class Quick {\npublic:\nvoid sort(vector&lt;int&gt;&amp; nums) {\nshuffle(nums);\nsort(nums, 0, nums.size()-1);\n}\nprivate:\nvoid sort(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nif(lo &gt;= hi) return;\nint p = partition(nums, lo, hi);\nsort(nums, lo, p-1);\nsort(nums, p+1, hi);\n}\nint partition(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nint pivot = nums[lo];\nint i = lo + 1;\nint j = hi;\nwhile(i &lt;= j) {\nwhile(i &lt; hi &amp;&amp; nums[i] &lt;= pivot) {\ni++;\n}\nwhile(j &gt; lo &amp;&amp; nums[j] &gt; pivot) {\nj--;\n}\nif(i &gt;= j) {\nbreak;\n}\nswap(nums, i, j);\n}\nswap(nums, lo, j);\nreturn j;\n}\nvoid shuffle(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nfor(int i = 0; i &lt; n; i++) {\nint r = i + rand() % (n - i);\nswap(nums, i, r);\n}\n}\nvoid swap(vector&lt;int&gt;&amp; nums, int i, int j) {\nint temp = nums[i];\nnums[i] = nums[j];\nnums[j] = temp;\n}\n};\n</code></pre>"},{"location":"algorithm/tree/quick/#912-sort-an-array","title":"912. Sort an Array","text":"<p>Given an array of integers <code>nums</code>, sort the array in ascending order.</p> <p>Example 1:</p> <pre><code>Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li> <li><code>-5 * 104 &lt;= nums[i] &lt;= 5 * 104</code></li> </ul> <pre><code>// \u540c\u4e0a\u6587\n</code></pre>"},{"location":"algorithm/tree/quick/#215-kth-largest-element-in-an-array","title":"215. Kth Largest Element in an Array","text":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>kth</code> largest element in the array.</p> <p>Note that it is the <code>kth</code> largest element in the sorted order, not the <code>kth</code> distinct element.</p> <p>You must solve it in <code>O(n)</code> time complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <pre><code>class Solution {\npublic:\nint findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\nshuffle(nums);\nint lo = 0;\nint hi = nums.size() - 1;\nk = nums.size() - k;\nwhile(lo &lt;= hi) {\nint p = partition(nums, lo, hi);\nif(p &lt; k) {\nlo = p + 1;\n}\nelse if(p &gt; k) {\nhi = p - 1;\n}\nelse {\nreturn nums[p];\n}\n}\nreturn -1;\n}\nint partition(vector&lt;int&gt;&amp; nums, int lo, int hi) {\nint pivot = nums[lo];\nint i = lo + 1;\nint j = hi;\nwhile(i &lt;= j) {\nwhile(i &lt; hi &amp;&amp; nums[i] &lt;= pivot) {\ni++;\n}\nwhile(j &gt; lo &amp;&amp; nums[j] &gt; pivot) {\nj--;\n}\nif(i &gt;= j) {\nbreak;\n}\nswap(nums, i, j);\n}\nswap(nums, lo, j);\nreturn j;\n}\nvoid shuffle(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nfor(int i = 0; i &lt; n; i++) {\nint r = i + rand() % (n - i);\nswap(nums, i, r);\n}\n}\nvoid swap(vector&lt;int&gt;&amp; nums, int i, int j) {\nint temp = nums[i];\nnums[i] = nums[j];\nnums[j] = temp;\n}\n};\n</code></pre>"},{"location":"database/lec1/","title":"Relational Model &amp; Relational Algebra","text":""},{"location":"go/basics/go_chan/","title":"goroutine and channel","text":"<p>\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u201c\u4e00\u5bf9\u4e8c\u201d\u4f20\u7403<code>func</code>\uff0c\u53ef\u4ee5\u6253\u5370\u63a5\u7403\uff0c\u5931\u7403\u65e5\u5fd7\uff0c\u5e76\u5224\u65ad\u80dc\u8d1f\u3002</p> <pre><code>func player(name string, ch chan int) {\ndefer wg.Done()\n\nfor {\nball, ok := &lt;-ch\nif !ok {\nfmt.Printf(\"Channel is closed. %s wins\\n\", name)\n}\nn := rand.Intn(100)\nif n%10 == 0 {\nclose(ch)\nfmt.Printf(\"%s misses the ball. %s loses\\n\", name, name)\nreturn\n}\nball++\nfmt.Printf(\"%s receives ball %d\\n\", name, ball)\nch &lt;- ball\n}\n}\n</code></pre> <pre><code>func main() {\nwg.Add(2)\nch := make(chan int)\ngo player(\"A\", ch)\ngo player(\"B\", ch)\nch &lt;- 0\nwg.Wait()\n}\n</code></pre> <p>\u901a\u9053<code>ch</code>\u8ba9\u4e24\u4e2a<code>go player()</code>\u51fd\u6570\uff08\u4e24\u4e2a\u7403\u5458\uff09\u5171\u4eab\u4e86\u540c\u4e00\u7b50\u7bee\u7403\uff0c\u5176\u4e2d\u7b50\u5185\u7bee\u7403\u5305\u542b\u552f\u4e00\u7684\u7f16\u53f7(#1,#2,#3...)\uff0c\u4f46\u901a\u9053\u672c\u8eab\u5e76\u4e0d\u662f\u7bee\u7403\u7b50\uff0c\u901a\u9053\u662f\u5c06\u7403\u4ece\u79cb\u7b50\u4e2d\u62ff\u51fa\u6765\u7684\u201c\u624b\u201d\uff0c\u5f53\u6709\u4e00\u540d\u7403\u5458\u5931\u7403\uff0c\u201c\u624b\u201d\u5c06\u4e0d\u518d\u4ece\u7b50\u4e2d\u53d6\u7403\uff1b\u5f53\u6ca1\u6709\u7403\u5458\u5931\u7403\uff0c\u201c\u624b\u201d\u8981\u4f9d\u636e\u521a\u624d\u6254\u51fa\u7684\u7403\u7684\u7f16\u53f7\uff0c\u5728\u7b50\u4e2d\u627e\u5bfb\u4e0b\u4e00\u4e2a\u7f16\u53f7(<code>ball++</code>)\u7684\u7403\uff0c\u5e76\u6254\u51fa\u3002</p>"},{"location":"go/basics/go_ctx/","title":"Golang Context","text":"<p><code>context</code>\u7528\u4e8e\u89e3\u51b3goroutine\u4e4b\u95f4\u9000\u51fa\u901a\u77e5\u3001\u5143\u6570\u636e\u4f20\u9012\u7684\u529f\u80fd</p> <pre><code>func doSomething(ctx context.Context) {\n// \u76d1\u542c\nselect {\ncase &lt;- ctx.Done():\nerr := ctx.Err()\nif err != nil {\nfmt.Println(err.Error())\n}\ncase &lt;- time.After(5 * time.Second):\nfmt.Println(\"finish doing something\")\n}\n}\n\nfunc main() {\nctx := context.Background()\nctx, cancel := context.WithCancel(ctx)\n\ngo func {\ntime.Sleep(4 * time.Second)\ncancel()\n}()\n\ndoSomething(ctx)\n}\n</code></pre>"},{"location":"go/basics/go_ctx/#1","title":"1 \u4f20\u9012\u5171\u4eab\u7684\u6570\u636e","text":"<pre><code>package main\n\nimport (\n\"context\"\n\"fmt\"\n)\n\nfunc main() {\nctx := context.Background()\nprocess(ctx)\nctx = context.WithValue(ctx, \"traceId\", \"macOS\")\nprocess(ctx)\n}\n\nfunc process(ctx context.Context) {\ntraceId, ok := ctx.Value(\"traceId\").(string)\nif ok {\nfmt.Printf(\"process over. trace id = %s\\n\", traceId)\n} else {\nfmt.Printf(\"process over. No trace id,\\n\")\n}\n}\n</code></pre>"},{"location":"go/basics/go_ctx/#2-goroutine","title":"2 \u53d6\u6d88goroutine","text":"<p>\u6253\u5f00\u5916\u5356\u7684\u8ba2\u5355\u9875\uff0c\u5730\u56fe\u663e\u793a\u5916\u5356\u7684\u4f4d\u7f6e\uff0c\u6bcf\u79d2\u66f4\u65b0\u4e00\u6b21\u3002app\u7aef\u5411\u540e\u53f0\u53d1\u8d77\u8bf7\u6c42\u540e\uff0c\u540e\u53f0\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\uff0c\u6bcf\u96941s\u8ba1\u7b971\u6b21\u4f4d\u7f6e\uff0c\u5e76\u53d1\u9001\u7ed9\u7aef\u3002\u5982\u679c\u7528\u6237\u9000\u51fa\u6b21\u9875\u9762\uff0c\u5219\u540e\u53f0\u9700\u8981\u53d6\u6d88\u6b64\u8fc7\u7a0b\uff0c\u9000\u51fagoroutine\uff0c\u7cfb\u7edf\u56de\u6536\u8d44\u6e90\u3002</p> <pre><code>func Perform(ctx context.Context) {\nfor {\ncalculatePos() // \u8ba1\u7b97\u4f4d\u7f6e\nsendResult() // \u53d1\u9001\u7ed3\u679c\nselect {\ncase &lt;-ctx.Done():\nreturn\ncase &lt;-time.AfterTime(time.Second):\n...\n}\n}\n}\n\nfunc main() {\nctx, cancel := context.WithTimeout(context.Background(), time.Hour)\ngo Perform(ctx)\n// ...\n// app\u7aef\u8fd4\u56de\u9875\u9762\uff0c\u8c03\u7528cancel\u51fd\u6570\ncancel()\n}\n</code></pre>"},{"location":"go/basics/go_ctxt/","title":"Golang <code>context.go</code>\u6587\u6863","text":"<p><code>context</code>\u4e3b\u8981\u7528\u4e8egoroutine\u4e4b\u95f4\u4f20\u9012\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\u53d6\u6d88\u4fe1\u53f7\u3001\u8d85\u65f6\u65f6\u95f4\u3001\u622a\u6b62\u65f6\u95f4\u3001k-v\u7b49\u3002</p> <p>Golang\u4e2d\u7684server\u662f\u4e00\u4e2a\u201c\u534f\u7a0b\u6a21\u578b\u201d\uff0c\u5373\u4e00\u4e2a\u534f\u7a0b\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u3002\u4f8b\u5982\u5728\u4e1a\u52a1\u9ad8\u53d1\u7684\u9ad8\u5cf0\u671f\uff0c\u67d0\u4e2a\u4e0b\u6e38\u670d\u52a1\u7684\u54cd\u5e94\u53d8\u6162\uff0c\u5f53\u524d\u7cfb\u7edf\u7684\u8bf7\u6c42\u6ca1\u6709\u8d85\u65f6\u63a7\u5236\uff0c\u6216\u8d85\u65f6\u65f6\u95f4\u8bbe\u7f6e\u8fc7\u5927\uff0c\u90a3\u4e48\u4e0b\u6e38\u670d\u52a1\u8fd4\u56de\u6570\u636e\u7684\u534f\u7a0b\u4f1a\u8d8a\u6765\u8d8a\u5927\u3002\u5185\u5b58\u5360\u7528\u98d9\u5347\uff0c\u4f1a\u5bfc\u81f4\u670d\u52a1\u5668\u5d29\u6e83\u3002</p> <p>\u5982\u679c\u7ed9\u4e0b\u6e38\u8bbe\u7f6e\u7684<code>timeout</code>\uff0c\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\u503c\u8fd8\u6ca1\u6709\u63a5\u6536\u5230\u8fd4\u56de\u6570\u636e\uff0c\u5c31\u76f4\u63a5\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u503c\u6216\u8005\u9519\u8bef\u3002</p> <pre><code>type Context interface {\nDone() &lt;-chan struct{}\n// \u8fd4\u56de\u4e00\u4e2a(\u53ea\u8bfb)channel\uff0c\u53ef\u4ee5\u8868\u793acontext\u88ab\u53d6\u6d88\u7684\u4fe1\u53f7\uff0c\u53ea\u6709\u5f53channel\u88ab\u5173\u95ed\u65f6\u4f1a\u8bfb\u51fa0\uff0c\u5176\u4f59\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e3anil\uff0c\u6b63\u662f\u5229\u7528\u8fd9\u70b9\uff0c\u5b50\u534f\u7a0b\u4ecechannel\u4e2d\u8bfb\u51fa\u503c\u540e\uff0c\u5c3d\u5feb\u505a\u4e00\u4e9b\u6536\u5c3e\u5de5\u4f5c\uff0c\u5e76\u9000\u51fa\nErr() error\nDeadline() (dealine time.Time, ok bool)\nValue(key interface{}) interface{}\n}\n</code></pre> <pre><code>type canceler interface {\ncancel(removeFromParent bool, err error)\nDone() &lt;-chan struct{}\n}\n</code></pre> <pre><code>type emptyCtx int\n\nfunc (*emptyCtx) Deadline() (deadline time.Time, ok bool) {\nreturn\n}\n\nfunc (*emptyCtx) Done() &lt;-chan struct{} {\nreturn nil\n}\n\nfunc (*emptyCtx) Err() error {\nreturn nil\n}\n\nfunc (*emptyCtx) Value(key interface{}) interface{} {\nreturn nil\n}\n// \u6bcf\u4e2a\u51fd\u6570\u8981\u4e48\u662f\u76f4\u63a5return\uff0c\u8981\u4e48\u662freturn nil\n// \u6240\u4ee5\u662f\u4e00\u4e2a\u7a7a\u7684context\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u88abcancel\uff0c\u4e5f\u6ca1\u6709\u50a8\u5b58\u503c\u548cdeadline\n</code></pre> <p>\u6240\u4ee5\uff0c\u6709</p> <pre><code>var(\nbackground = new(emptyCtx)\ntodo = new(emptyCtx)\n)\n</code></pre> <p>\u901a\u8fc7\u5982\u4e0b\u4e24\u4e2a\u5bfc\u51fa\u7684\u51fd\u6570(\u9996\u5b57\u6bcd\u5927\u5199)\u5bf9\u5916\u516c\u5f00</p> <pre><code>func Background() Context {\nreturn background\n}\n// background\u901a\u5e38\u5728main\u51fd\u6570\u4e2d\uff0c\u4f5c\u4e3a\u6240\u6709context\u7684\u6839\u8282\u70b9\nfunc TODO() Context {\nreturn todo\n}\n// todo\u901a\u5e38\u5728\u5e76\u4e0d\u77e5\u9053\u4f20\u9012\u4ec0\u4e48context\u7684\u60c5\u5f62\uff08\u201d\u5360\u4f4d\u201c\uff09\n</code></pre> <pre><code>type cancelCtx struct {\nContext\n// \u53ef\u4ee5\u88ab\u770b\u6210\u662f\u4e00\u4e2aContext\nmu sync.Mutex\ndone chan struct{}\nchildren map[canceler]struct{}\n// \u5b9e\u73b0\u4e86canceler\u63a5\u53e3\nerr error\n}\n</code></pre> <pre><code>func (c *cancelCtx) Done() &lt;- chan struct{} {\nc.mu.Lock()\nif c.done == nil {\nc.done = make(chan struct{})\n}\nd := c.done\nc.mu.Unlock()\nreturn d\n}\n//\u76f4\u63a5\u8c03\u7528\u8fd9\u4e2a\u53ea\u8bfbchannel\uff0c\u534f\u7a0b\u4f1a\u88abblock\u4f4f\n//\n</code></pre> <pre><code>func (c *cancelCtx) cancel(removeFromParent bool, err error) {\nif err == nil {\npanic(\"context: internal error: missing cancel error\")\n}\nc.mu.Lock()\nif c.err != nil {\nc.mu.Unlock()\nreturn // \u5df2\u7ecf\u88ab\u5176\u4ed6\u534f\u7a0b\u53d6\u6d88\n}\nc.err = err\nif c.done == nil { // \u5173\u95edchannel\uff0c\u901a\u77e5\u5176\u4ed6\u534f\u7a0b\nc.done = closedchan\n} else {\nclose(c.done)\n}\nfor child := range c.children {\n//\u9012\u5f52\u53d6\u6d88\u6240\u6709\u5b50\u8282\u70b9\nchild.cancel(false, err)\n}\nc.children = nil\nc.mu.Unlock()\nif removeFromParent {\nremoveChild(c.Context, c)\n}\n}\n</code></pre> <p>\u603b\u4f53\u6765\u770b\uff0c<code>cancel()</code>\u7684\u529f\u80fd\u5c31\u662f\u5173\u95edchannel: <code>c.done</code>\uff1b\u9012\u5f52\u53d6\u6d88\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\uff1b\u4ece\u7236\u8282\u70b9\u4e2d\u5220\u9664\u81ea\u5df1\u3002goroutine\u63a5\u6536\u5230\u53d6\u6d88\u4fe1\u53f7\u7684\u65b9\u5f0f\u5c31\u662f<code>select</code>\u4e2d\u7684<code>c.done</code>\u88ab\u9009\u4e2d</p> <pre><code>func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\nc := newCancelCtx(parent)\npropagateCancel(parent, &amp;c)\nreturn &amp;c, func() { c.cancel(true, Canceled) }\n}\n// \u516c\u5f00\u7684\u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2a\u7236Context(\u901a\u5e38\u4e3a\u4e00\u4e2abackground)\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u5efa\u7684context\uff0c\u65b0context\u7684done channel\u662f\u65b0\u5efa\u7684\n\nfunc newCancelCtx(parent Context) cancelCtx {\nreturn cancelCtx{Context: parent}\n}\n</code></pre>"},{"location":"go/basics/go_pack/","title":"Golang\u4e2d\u7684package\u6982\u5ff5","text":"<p>\u9996\u5148\uff0c\u65b0\u5efa\u4e00\u4e2a <code>fmt</code> package\uff0c\u4ee5\u91cd\u5199<code>fmt.Println()</code>\u65b9\u6cd5</p> <p>Golang\u7684\u9519\u8bef\u5904\u7406\uff1a\u5931\u8d25\u7684\u8c03\u7528\u4f1a\u8fd4\u56de\u9519\u8bef\u503c\u800c\u975e\u9519\u8bef\u7801\uff0c\u6240\u4ee5\u58f0\u660e\u7684\u65b9\u5f0f\u4e3a</p> <pre><code>file, err := os.OpenFile(...)\n</code></pre> <pre><code>package fmt\n\nimport (\n\"io\"\n\"log\"\n\"os\"\n)\n\nvar Logger *log.Logger\n\nfunc init() {\nfile, err := os.OpenFile(\"trace.txt\", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0666)\nif err != nil {\npanic(err)\n}\n\nLogger = log.New(io.MultiWriter(os.Stdout, file), \"Log: \", log.LstdFlags)\n}\n</code></pre> <p><code>os.O_CREATE</code>\u5982\u679c\u4e0d\u5b58\u5728\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u5939</p> <p><code>os.O_RDWR</code>\u8bfb\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6</p> <p><code>os.O_APPEND</code>\u5199\u64cd\u4f5c\u65f6\u5c06\u6570\u636e\u9644\u52a0\u5230\u6587\u4ef6\u5c3e\u90e8</p> <p><code>0666</code></p> <p><code>downloader.go</code>\u6587\u4ef6</p> <pre><code>package downloader\n\nimport (\n\"encoding/json\"\n\"io\"\n\"net/http\"\n)\n\ntype InfoRequest struct {\nBvids []string\n}\n\ntype VideoInfo struct {\nCode int `json: \"Code\"`\nData struct {\nBvid string `json: \"bvid\"`\nTitle string `json: \"title\"`\nDesc string `json: \"desc\"`\n}`json: \"data\"`\n}\n\ntype InfoReponse struct {\nInfos []VideoInfo\n}\n\n// BatchDownloadVideoInfo(request.Bvids[bvid_1, bvid_2,...]) return Infos[VideoInfo_1, VideoInfo_2, ...] / errors\nfunc BatchDownloadVideoInfo(request InfoRequest)(InfoResponse, error) {\nvar response InfoResponse\nfor _, bvid := range request.Bvids {\nvar videoInfo VideoInfo\nresp, err := http.Get(\"https:..,\" + bvid)\nif err != nil {\nreturn InfoResponse{}, nil\n}\nrespBytes, err := io.ReadAll(resp.Body)\n//golang\u8bfb\u53d6http.Request\u4e2dbody\u7684\u5185\u5bb9\u5230\u5b57\u7b26\u4e32respBytes\u5f53\u4e2d\nif err != nil {\nreturn InfoResponse{}, nil\n}\n//golang\u89e3\u6790respBytes\u4e2d\u7684json\u6570\u636e\uff0c\u5b58\u5165videoInfo\u7684\u5730\u5740\u6240\u6307\u5411\u7684\u503c(\u4e5f\u5c31\u662fvideoInfo)\nif err = json.Unmarschal(respBytes, &amp;videoInfo); err != nil {\nreturn InfoResponse{}, err\n}\nresponse.Infos = append(response.Infos, videoInfo)\nif err := resp.Body.Close(); err != nil {\nreturn InfoResponse{}, err\n}\nresponse.Infos = append(response.Infos, videoInfo)\n}\nreturn response, nil\n}\n</code></pre> <p><code>main.go</code>\u6587\u4ef6</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"get-bili/downloader\"\nmyfmt \"get-bili/fmt\"\n)\n\nfunc main() {\nfmt.Println(\"...\")\nmyfmt.Logger.Println(\"...\")\n\nrequest := downloader.InfoRequest {\nBvids: []string{\"...1\", \"...2\"},\n}\nresponse, err := downloader.BatchDownloadVideoInfo(request)\nif err != nil {\npanic(err)\n}\nfor _, info  := range response.Infos {\nmyfmt.Logger.Printf(\"title: %s \\n desc: %s\\n\", info.Data.Title, info.Data.Desc)\n}\n}\n</code></pre>"},{"location":"history/origin_of_politics/0/","title":"0 \u5f15\u8a00","text":""},{"location":"history/origin_of_politics/0/#_1","title":"\u56fd\u5bb6\u5efa\u6784","text":"<ul> <li>\u56fd\u5bb6\u80fd\u529b \u27a1\ufe0f \u653f\u5e9c\u5728\u7279\u5b9a\u7586\u57df\u91cc\u5784\u65ad\u66b4\u529b\u7684\u80fd\u529b(\u97e6\u4f2f)</li> <li>\u5b98\u50da\u673a\u6784\u7684\u4e2d\u7acb\u6027\u4e0e\u81ea\u4e3b\u6027 \u27a1\ufe0f \u653f\u5e9c\u80fd\u591f\u8d85\u8d8a\u9636\u7ea7\u3001\u6d3e\u7cfb\u3001\u5229\u76ca\u96c6\u56e2\u3001\u5bb6\u65cf\u8fdb\u884c\u51b3\u7b56\u7684\u4e0d\u504f\u4e0d\u501a\u6027</li> </ul> <p>\u2b06\ufe0f \u73b0\u4ee3\u56fd\u5bb6\u5efa\u6784 \u2b05\ufe0f\u27a1\ufe0f \u4f9d\u9644\u4e3b\u4e49(clientelism) \u27a1\ufe0f \u6743\u529b\u88ab\u5404\u79cd\u5c40\u90e8\u7684\u3001\u7279\u6b8a\u7684\u5229\u76ca\u6240\u7ed1\u67b6(\ud83c\uddfa\ud83c\uddf8\u6e38\u8bf4\u96c6\u56e2\uff0c\ud83c\uddec\ud83c\uddf7\ud83c\uddee\ud83c\uddf9\u79ef\u91cd\u96be\u8fd4\u7684\u516c\u6709\u90e8\u95e8) \u27a1\ufe0f \u653f\u6cbb\u8870\u8d25</p> <ul> <li>\u6210\u529f\u7684\u56fd\u5bb6\u5efa\u6784\u7684\u4e09\u4e2a\u7531\u6765\uff1a</li> <li>\u6218\u4e89 \u27a1\ufe0f \u519b\u4e8b\u538b\u529b\u8feb\u4f7f\u56fd\u5bb6\u5728\u5f81\u7a0e\u3001\u4eba\u53e3\u7ba1\u7406\u548c\u519b\u4e8b\u5efa\u8bbe\u65b9\u9762\u52a0\u5feb\u6b65\u4f10(\ud83c\udde8\ud83c\uddf3\u201c\u653f\u6cbb\u7684\u65e9\u719f\u201d\u4e0e\u6625\u79cb\u6218\u56fd\u65f6\u671f\u7684\u6218\u4e89\uff0c\ud83c\uddea\ud83c\uddfa\u8fd1\u4ee3\u4ee5\u6765\u7684\u9891\u7e41\u6218\u4e89\u4fc3\u8fdb\u5176\u56fd\u5bb6\u8f6c\u578b)</li> <li>\u653f\u6cbb\u6539\u9769 \u27a1\ufe0f \ud83c\uddfa\ud83c\uddf819\u4e16\u7eaa\u544a\u8bc9\u53d1\u5c55\u7684\u7ecf\u6d4e\u91cd\u7ec4\u4e86\u793e\u4f1a\u9636\u5c42\uff0c\u65b0\u5174\u7684\u7ecf\u6d4e\u96c6\u56e2\u4e0d\u6ee1\u8db3\u4e8e\u65e7\u6709\u7684\u201c\u653f\u515a\u5206\u8d43\u201d\u5f0f\u7684\u804c\u4f4d\u5206\u914d\u5236\uff0c\u63a8\u52a8\u4e86\u653f\u6cbb\u6539\u9769\uff0c\u5b9e\u73b0\u4e86\u8003\u8bd5\u5236\u7684\u516c\u52a1\u5458\u4f53\u7cfb \u2b05\ufe0f\u27a1\ufe0f \ud83c\uddec\ud83c\uddf7\u672a\u7ecf\u5386\u5de5\u4e1a\u5316\u7684\u57ce\u5e02\u5316(\u672a\u7ecf\u53d1\u5c55\u7684\u73b0\u4ee3\u5316)\uff0c\u7cbe\u82f1\u5bc4\u751f\u4e8e\u653f\u5e9c\u548c\u516c\u6709\u90e8\u95e8 \u27a1\ufe0f \u503a\u52a1\u5371\u673a\ud83d\udcb0\u203c\ufe0f</li> <li>\u6c11\u65cf\u8ba4\u540c \u27a1\ufe0f \u6c11\u65cf\u4e0e\u56fd\u5bb6\u4e4b\u95f4\u7684\u76f8\u4e92\u5efa\u6784(\u5171\u540c\u7684\u8bed\u8a00\u3001\u5b97\u6559\u3001\u7ecf\u5178\u3001\u610f\u8bc6\u5f62\u6001\u3001\u5baa\u6cd5) <p>\u2b06\ufe0f\u4f9d\u9644\u4e3b\u4e49\u7684\u539f\u56e0 \u27a1\ufe0f \u6c11\u4e3b\u5316\u65e9\u4e8e\u56fd\u5bb6\u5efa\u6784 \u27a1\ufe0f \ud83c\uddec\ud83c\uddf7\ud83c\uddee\ud83c\uddf9\u9009\u7968\u63a8\u52a8\u4e86\u516c\u5171\u804c\u4f4d\u4e0e\u8d44\u6e90\u88ab\u5404\u79cd\u5229\u76ca\u96c6\u56e2\u6240\u652b\u53d6</p> </li> </ul>"},{"location":"history/origin_of_politics/0/#_2","title":"\u6210\u529f\u56fd\u5bb6\u5efa\u6784\u7684\u201c\u987a\u5e8f\u8bba\u201d\uff1a\u4ee5\ud83c\uddec\ud83c\udde7\u4e3a\u5178\u8303","text":"<ul> <li>\u6cd5\u6cbb(\u5927\u5baa\u7ae0\u65f6\u671f) \u27a1\ufe0f \u56fd\u5bb6\u5efa\u8bbe(\u90fd\u94ce\u738b\u671d\u65f6\u671f\u7684\u738b\u6743\u5174\u8d77\ud83d\udc51) \u27a1\ufe0f \u6c11\u4e3b(19\u4e16\u7eaa\u666e\u9009\u6743\u7684\u6269\u6563)</li> <li>\u2b06\ufe0f \u6cd5\u6cbb \u27a1\ufe0f \u9650\u5236\u738b\u6743\ud83d\udc51\u7684\u65e0\u9650\u58ee\u5927 \u27a1\ufe0f \u56fd\u5bb6\u80fd\u529b\u4f7f\u5f97\u6c11\u4e3b\u4e0d\u81f3\u4e8e\u9020\u6210\u793e\u4f1a\u5931\u5e8f</li> </ul>"},{"location":"history/origin_of_politics/0/#_3","title":"\u56fd\u5bb6","text":"<ul> <li>\u201c\u5bb6\u65cf\u5236\u201d\u56fd\u5bb6\uff0c\u88ab\u89c6\u4f5c\u7edf\u6cbb\u8005\u7684\u4e2a\u4eba\u8d22\u4ea7\uff0c\u56fd\u5bb6\u7684\u884c\u653f\u7ba1\u7406\u5b9e\u8d28\u4e0a\u53ea\u662f\u7edf\u6cbb\u8005\u5bb6\u653f\u7684\u5ef6\u4f38\u3002\u4f9d\u9760\u4eb2\u53cb\u7684\u81ea\u7136\u4ea4\u5f80\u5f62\u5f0f\u5728\u5bb6\u65cf\u5236\u56fd\u5bb6\u4e2d\u4f9d\u7136\u53d1\u6325\u4f5c\u7528\u3002</li> <li>\u73b0\u4ee3\u56fd\u5bb6\uff0c\u662f\u975e\u4eba\u683c\u5316\u7684\u3002</li> </ul>"},{"location":"history/the_great_wall/tgw/","title":"\u660e\u957f\u57ce\u4fee\u7b51\u7684\u5e74\u4efd","text":""},{"location":"history/the_great_wall/tgw/#_2","title":"\u8fbd\u4e1c","text":"<p>\u9547\u6cbb\u4eca\u8fbd\u5b81\u8fbd\u9633\uff0c\u540e\u79fb\u6cbb\u4eca\u8fbd\u5b81\u5317\u9547\u3002\u7ba1\u8f96\u4e1c\u8d77\u4e39\u4e1c\u9e2d\u7eff\u6c5f\u7554\uff0c\u897f\u81f3\u5c71\u6d77\u5173\u7684\u957f\u57ce\u9632\u5fa1\u3002</p> \u5e74\u4efd \u4fee\u5efa \u300c\u81ea\u6c38\u4e50\u4e2d\u7f62\u6d77\u8fd0\u540e\uff0c\u7b51\u8fb9\u5899\u4e8e\u8fbd\u6cb3\u5185\uff0c \u81ea\u5e7f\u5b81\u4e1c\u62b5\u5f00\u539f\u4e03\u767e\u4f59\u91cc\u300d\u300a\u660e\u5baa\u5b97\u5b9e\u5f55\u300b \u300c\u6c38\u4e50\u7b51\u8fb9\u5899\u4e8e\u8fbd\u6cb3\u5185\uff0c\u4e1c\u897f\u65f7\u7edd\u3002\u81ea\u5e7f\u5b81\u81f3\u8fbd\u9633\u4ee5\u8fbd\u6cb3\u4e3a\u6d25\u8981\u3002\u79cb\u51ac\u7ed3\u51b0\uff0c\u4eba\u9a6c\u53ef\u4ee5\u901a\u884c\uff0c\u6613\u4e8e\u5e94\u63f4\u3002\u51b0\u5f00\u65f6\u4e3a\u654c\u6240\u636e\uff0c\u5219\u4e24\u57ce\u52bf\u5b64\uff0c\u867d\u6709\u6e21\u8239\uff0c\u4e0d\u80fd\u731d\u6d4e\u3002\u300d\uff08\u5929\u987a\u5341\u4e00\u5e74\u8fb9\u81e3\u9a6c\u6587\u5347\u8bf7\u590d\u6d6e\u6865\u4ee5\u8054\u58f0\u63f4\uff09\u300a\u8bfb\u53f2\u65b9\u8206\u7eaa\u8981\u300b \u300c\u660e\u6b63\u7edf\u4e8c\u5e74\u59cb\u7b51\u8fbd\u6cb3\u5957\u957f\u57ce\u300d \u300c\u8fb9\u5899\u963b\u8fbd\u6cb3\u4e3a\u56fa\uff0c\u6fd2\u6cb3\u4e4b\u5730\uff0c\u5ef6\u5792\u516b\u767e\u4f59\u91cc\u3002\u300d\u3002\u300c\u8fbd\u4e1c\u8fb9\u5899\u81ea\u5c71\u6d77\u5173\u62b5\u5f00\u539f\uff0c\u5ef6\u4e98\u4e8c\u5343\u4f59\u91cc\uff0c\u6cb3\u897f\u4e00\u5e26\u968f\u5c71\u8d77\u7b51\uff0c\u591a\u7528\u77f3\u780c\u3002\u300d\u300a\u660e\u5b5d\u5b97\u5b9e\u5f55\u300b \u300c\u6b63\u7edf\u4e03\u5e74\u518d\u7b51\u8fbd\u6cb3\u897f\u90e8\u957f\u57ce\u300d \u300c\u5de1\u629a\u738b\u7ff1\u8d77\u5c71\u6d77\u5173\u62b5\u5f00\u539f\uff0c\u7f2e\u57ce\u57a3\uff0c\u6d5a\u6c9f\u5811\u3002\u4e94\u91cc\u4e3a\u5821\uff0c\u5341\u91cc\u4e3a\u5c6f\uff0c\u4f7f\u70fd\u71e7\u76f8\u63a5\u3002\u300d\u300a\u660e\u53f2\u00b7\u738b\u7ff1\u4f20\u300b \u6210\u5316\u4e09\u5e74 \u300c\u81ea\u629a\u987a\u800c\u5357\u56db\u5341\u91cc\uff0c\u8bbe\u4e1c\u5dde\u5821\uff1b\u4e1c\u5dde\u4e4b\u5357\u4e09\u5341\u91cc\uff0c\u8bbe\u9a6c\u6839\u5355\u5821\uff1b\u9a6c\u6839\u4e4b\u5357\u4e5d\u5341\u91cc\uff0c\u8bbe\u6e05\u6cb3\u5821\uff1b\u6e05\u6cb3\u4e4b\u5357\u4e03\u5341\u91cc\uff0c\u8bbe\u78b1\u573a\u5821\uff1b\u78b1\u573a\u4e4b\u5357\u4e00\u767e\u4e8c\u5341\u91cc\uff0c\u8bbe\u53c6\u9633\u5821\u3002\u300d\u300a\u8fbd\u4e1c\u5fd7\u300b \u6210\u5316\u56db\u5e74 \u300c\u6210\u5316\u56db\u5e74\u59cb\u7b51\u8fbd\u6cb3\u4e1c\u957f\u57ce\u300d \u5f18\u6cbb\u5341\u4e94\u5e74 \u300c\u5f20\u9f10\u4e8e\u5f18\u6cbb\u5341\u4e94\u5e74\u8fdb\uff0c\u6309\u5bdf\u4f7f\uff0c\u662f\u5e74\u79cb\u64e2\u53f3\u4f65\u90fd\u5fa1\u53f2\uff0c\u5de1\u629a\u8fbd\u4e1c\u300d\u300c\u7b51\u8fb9\u5899\u81ea\u5c71\u6d77\u5173\u8fc4\u5f00\u539f\u53c6\u9633\u5821\uff0c\u51e1\u5343\u4f59\u91cc\u300d\u300a\u660e\u53f2\u00b7\u5f20\u9f10\u4f20\u300b \u6b63\u5fb7\u521d\u5e74 \u300c\u674e\u627f\u52cb\u9898\u8bf7\u4fee\u7b51\u8fb9\u5899\uff0c\u81ea\u8fbd\u9633\u4e09\u5c94\u6cb3\u5317\uff0c\u76f4\u62b5\u5f00\u539f\uff0c\u5ef6\u4e98\u4e94\u767e\u4f59\u91cc\u3002\u300d\u300a\u660e\u53f2\u00b7\u674e\u627f\u52cb\u4f20\u300b \u4e07\u5386\u5143\u5e74 \u5de1\u629a\u5f20\u5b66\u989c\u3001\u603b\u5175\u674e\u6210\u6881\u53c8\u4e00\u6b21\u5927\u89c4\u6a21\u4fee\u5efa\u3002\u6b64\u6b21\u4fee\u5efa\u4e3a\u8fbd\u6cb3\u897f\u3001\u8fbd\u6cb3\u5957\u3001\u8fbd\u6cb3\u4e1c\u4e09\u5927\u90e8\u5206\u540c\u65f6\u8fdb\u884c\u3002\u300c\u6c6a\u9053\u6606\uff1a \u201c\u81ea\u9526\u5dde\u8fe4\u4e1c\u62b5\u4e09\u5c94\u6cb3\uff0c\u53c8\u81ea\u4e09\u5c94\u76f4\u62b5\u65e7\u8fbd\u9633\u201d\u300d\u300a\u660e\u795e\u5b97\u5b9e\u5f55\u300b \u4e07\u5386\u4e8c\u5e74 \u84df\u9547\u603b\u7763\u5218\u5e94\u8282\u7ee7\u7eed\u4fee\u7b51\u8fbd\u4e1c\u957f\u57ce\u3002\u300c\u5148\u4fee\u53f0\u5de5\uff0c\u8ba1\u5730\u767e\u4e08\u5efa\u53f0\u4e00\u5ea7\uff0c\u5982\u660c\u5e73\u9547\u4e4b\u5236\uff0c\u7a7a\u5fc3\u5b9e\u4e0b\uff0c\u5eb6\u53ef\u7ecf\u4e45\u3002\u4e24\u53f0\u4e4b\u95f4\uff0c\u6b62\u7528\u7816\u4e0e\u77f3\u4e3a\u5899\u3002\u300d\u300a\u660e\u795e\u5b97\u5b9e\u5f55\u300b \u4e07\u5386\u56db\u5341\u4e03\u5e74 \u718a\u5ef7\u5f3c\u6839\u636e\u5176\u4e07\u5386\u4e09\u5341\u516d\u5e74\u6240\u4e0a\u4e66\u7f2e\u57a3\u5efa\u5821\u5341\u4e94\u5229\uff0c\u6267\u884c\u5b88\u571f\u9632\u8fb9\u7b56\u7565 \u300a\u660e\u53f2\u00b7\u718a\u5ef7\u5f3c\u4f20\u300b"},{"location":"history/the_great_wall/tgw/#_3","title":"\u84df\u9547","text":"<p>\u9547\u6cbb\u4eca\u5929\u6d25\u84df\u9547\uff0c\u540e\u79fb\u6cbb\u4eca\u6cb3\u5317\u8fc1\u897f\u4e09\u5c6f\u8425\u3002\u7ba1\u8f96\u4e1c\u8d77\u5c71\u6d77\u5173\uff0c\u897f\u81f3\u56db\u6d77\u51b6\u7684\u957f\u57ce\u9632\u5fa1\u3002\u540e\u53c8\u5728\u4eac\u757f\u7f6e\u660c\u9547\u3001\u771f\u4fdd\u9547\u3002\u660c\u9547\u7ba1\u8f96\u4e1c\u81ea\u6155\u7530\u5cea\u897f\u81f3\u7d2b\u8346\u5173\u7684\u957f\u57ce\u9632\u5fa1\u3002\u771f\u4fdd\u9547\u7ba1\u8f96\u4e1c\u81ea\u7d2b\u8346\u5173\u6cbf\u6cb3\u53e3\u897f\u81f3\u5a18\u5b50\u5173\u4ee5\u5357\u7684\u957f\u57ce\u9632\u5fa1\u3002</p> \u5e74\u4efd \u4fee\u5efa \u6d2a\u6b66\u516d\u5e74 \u300c\u547d\u5927\u5c06\u519b\u5f90\u8fbe\u7b49\u5907\u5c71\u897f\u3001\u5317\u5e73\u8fb9\uff0c\u8c15\u4ee4\u5404\u4e0a\u65b9\u7565\u3002\u4ece\u6dee\u5b89\u4faf\u534e\u4e91\u9f99\u8a00\uff0c\u81ea\u6c38\u5e73\u3001\u84df\u5dde\u3001\u5bc6\u4e91\u8fe4\u897f\u4e8c\u5343\u4f59\u91cc\uff0c\u5173\u9698\u767e\u4e8c\u5341\u6709\u4e5d\uff0c\u7686\u7f6e\u620d\u5b88\u3002\u300d\u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u6d2a\u6b66\u5341\u56db\u5e74 \u300c\u5f90\u8fbe\u53d1\u71d5\u77f3\u7b49\u536b\u5c6f\u5175\u4e07\u4e94\u5343\u4e00\u767e\u4eba\u4fee\u6c38\u5b81\u3001\u754c\u5cad\u7b49\u4e09\u5341\u4e8c\u5173\u300d\u300a\u6c38\u5e73\u5e9c\u5fd7\u300b \u6b63\u7edf\u5143\u5e74 \u300c\u7ed9\u4e8b\u4e2d\u6731\u7eaf\u8bf7\u4fee\u585e\u57a3\u3002\u603b\u5175\u5b98\u8c2d\u5e7f\u8a00\uff1a\u201c\u81ea\u9f99\u95e8\u81f3\u72ec\u77f3\u53ca\u9ed1\u5cea\u53e3\u4e94\u767e\u4e94\u5341\u4f59\u91cc\uff0c\u5de5\u4f5c\u751a\u96be\uff0c\u4e0d\u82e5\u76ca\u58a9\u53f0\u77ad\u5b88\u3002\u201d\u4e43\u589e\u8d64\u57ce\u7b49\u5821\u70df\u58a9\u4e8c\u5341\u4e8c\u300d\u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u6b63\u7edf\u5341\u56db\u5e74\u516b\u6708\u571f\u6728\u4e4b\u53d8 \u84df\u9547\u957f\u57ce\u906d\u5230\u74e6\u524c\u4e5f\u5148\u90e8\u7834\u574f \u6b63\u7edf\u5341\u56db\u5e74\u5341\u4e00\u6708\u7678\u672a \u300c\u4fee\u6cbf\u8fb9\u5173\u9698\u300d\u300a\u660e\u53f2\u00b7\u666f\u5e1d\u672c\u7eaa\u300b \u666f\u6cf0\u5143\u5e74 \u300c\u63d0\u7763\u4e1c\u4eac\u519b\u52a1\u3001\u53f3\u4f65\u63d0\u7763\u5fa1\u53f2\u90b9\u6765\u5b66\u4fee\u559c\u5cf0\u53e3\u8fe4\u4e1c\u81f3\u4e00\u7247\u77f3\u5404\u5173\u57ce\u6c60\u3002\u300d\u300a\u4e34\u6986\u53bf\u5fd7\u300b \u5f18\u6cbb\u5341\u4e00\u5e74 \u6d2a\u949f\u5efa\u8bae\u4fee\u7b51\u585e\u57a3\u3002\u300c\u81ea\u5c71\u6d77\u5173\u897f\u5317\u81f3\u5bc6\u4e91\u53e4\u5317\u53e3\u3001\u9ec4\u82b1\u9547\u76f4\u62b5\u5c45\u5eb8\uff0c\u5ef6\u57a3\u5343\u4f59\u91cc\uff0c\u7f2e\u590d\u57ce\u5821\u4e8c\u767e\u4e03\u5341\u5ea7\u3002\u300d\u300a\u660e\u53f2\u00b7\u6d2a\u949f\u4f20\u300b \u9686\u5e86\u81f3\u4e07\u5386\u521d \u300c\u84df\u9547\u957f\u57ce\u8f83\u5927\u89c4\u6a21\u7684\u4fee\u7b51\uff0c\u7279\u522b\u662f\u5728\u957f\u57ce\u4e0a\u780c\u7b51\u7816\u77f3\u548c\u4fee\u5efa\u7a7a\u5fc3\u654c\u53f0\uff0c\u591a\u4ece\u9686\u5e86\u81f3\u4e07\u5386\u521d\u7531\u621a\u7ee7\u5149\u5b8c\u6210\u7684\u3002\u300d \u9686\u5e86\u4e09\u5e74\u81f3\u4e07\u5386\u5143\u5e74 \u300a\u5929\u4e0b\u90e1\u56fd\u5229\u75c5\u4e66\u300b\u6240\u8f7d\u7684\u7a7a\u5fc3\u654c\u53f0\u5168\u90e8\u6807\u6ce8\u4e3a\u9686\u5e86\u4e09\u5e74\u81f3\u4e07\u5386\u5143\u5e74\u6240\u5efa\u3002"},{"location":"history/the_great_wall/tgw/#_4","title":"\u5ba3\u5e9c","text":"<p>\u9547\u6cbb\u4eca\u6cb3\u5317\u5ba3\u5316\u3002\u7ba1\u8f96\u4e1c\u8d77\u56db\u6d77\u51b6\uff0c\u897f\u81f3\u897f\u6d0b\u6cb3\u7684\u957f\u57ce\u9632\u5fa1\u3002 \u201c\u5357\u5c4f\u4eac\u5e08\uff0c\u540e\u63a7\u6c99\u6f20\uff0c\u5de6\u6339\u5c45\u5eb8\u4e4b\u9669\uff0c\u53f3\u62e5\u4e91\u4e2d\u4e4b\u56fa\u3002\u201d</p> \u5e74\u4efd \u4fee\u5efa \u6c38\u4e50\u5341\u5e74 \u300c\u6555\u8fb9\u5c06\u81ea\u957f\u5b89\u5cad\u8fe4\u897f\u8fc4\u6d17\u9a6c\u6797\u7b51\u77f3\u57a3\uff0c\u6df1\u58d5\u5811\u3002\u300d\u300a\u660e\u53f2\u00b7\u6210\u7956\u672c\u7eaa\u300b \u6b63\u7edf\u5143\u5e74 \u300c\u7ed9\u4e8b\u4e2d\u6731\u7eaf\u8bf7\u4fee\u585e\u57a3\u3002\u603b\u5175\u5b98\u8c2d\u5e7f\u8a00\uff1a\u201c\u81ea\u9f99\u95e8\u81f3\u72ec\u77f3\u53ca\u9ed1\u5cea\u53e3\u4e94\u767e\u4e94\u5341\u4f59\u91cc\uff0c\u5de5\u4f5c\u751a\u96be\uff0c\u4e0d\u82e5\u76ca\u58a9\u53f0\u77ad\u5b88\u3002\u201d\u4e43\u589e\u8d64\u57ce\u7b49\u5821\u70df\u58a9\u4e8c\u5341\u4e8c\u3002\u300d\u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u6b63\u7edf\u5341\u56db\u5e74\u516b\u6708\u571f\u6728\u4e4b\u53d8 \u84df\u9547\u957f\u57ce\u906d\u5230\u74e6\u524c\u4e5f\u5148\u90e8\u7834\u574f \u6b63\u7edf\u5341\u56db\u5e74\u5341\u4e00\u6708\u7678\u672a \u300c\u4fee\u6cbf\u8fb9\u5173\u9698\u300d\u300a\u660e\u53f2\u00b7\u666f\u5e1d\u672c\u7eaa\u300b \u5609\u9756\u4e8c\u5341\u4e09\u5e74 \u300c\u90fd\u5fa1\u53f2\u738b\u4eea\u8bf7\u7b51\u5ba3\u5e9c\u5317\u8def\u4e4b\u9f99\u95e8\u8bb8\u5bb6\u51b2\uff0c\u4e2d\u8def\u4e4b\u5927\u5c0f\u767d\u9633\uff0c\u897f\u8def\u4e4b\u81b3\u623f\u3001\u65b0\u5f00\u3001\u65b0\u6cb3\u53e3\u3001\u6d17\u9a6c\u6797\u8bf8\u7b49\u8981\u51b2\u57a3\u58a9\u3001\u914d\u5175\u4e58\u5b88\uff0c\u4ece\u4e4b\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74 \u300c\u603b\u7763\u3001\u4f8d\u90ce\u7fc1\u4e07\u8fbe\u4ee5\u738b\u4eea\u6240\u7b51\u585e\u57a3\u534a\u5df2\u6e83\u572e\uff0c\u8bf8\u8981\u51b2\u57a3\u5899\u4ea6\u591a\u672a\u5907\uff0c\u8bf7\u5148\u4e8e\u897f\u8def\u6025\u8981\u51b2\u5f20\u5bb6\u53e3\u3001\u6d17\u9a6c\u6797\u3001\u897f\u6d0b\u6cb3\u4e3a\u57a3\u4e03\u5341\u4e94\u91cc\u6709\u5947\uff0c\u524a\u57a3\u5d16\u4e8c\u5341\u4e8c\u91cc\u6709\u5947\uff0c\u5811\u5982\u4e4b\u3002\u6b21\u51b2\u6e21\u53e3\u67f4\u6c9f\uff0c\u4e2d\u8def\u845b\u5cad\u3001\u9752\u8fb9\u3001\u7f8a\u623f\u3001\u8d75\u5ddd\uff0c\u4e1c\u8def\u6c38\u5b81\u3001\u56db\u6d77\u51b6\u4e3a\u57a3\u4e5d\u5341\u4e8c\u91cc\u6709\u5947\uff0c\u5811\u5341\u4e4b\u4e8c\uff0c\u654c\u53f0\u3001\u6708\u57ce\u4e5d\u5341\u4e00\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b\u5f15\u300a\u4e24\u9547\u4e09\u5173\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u516d\u5e74 \u300c\u4e07\u8fbe\u53c8\u8bf7\u81ea\u897f\u9633\u6cb3\u9547\u897f\u754c\u53f0\u8d77\uff0c\u4e1c\u81f3\u9f99\u95e8\u6240\u706d\u80e1\u58a9\u6b62\uff0c\u4e3a\u57a3\u4e03\u767e\u4e00\u5341\u4e5d\u91cc\uff0c\u5811\u5982\u4e4b\uff0c\u654c\u53f0\u4e03\u767e\u4e00\u5341\u4e5d\uff0c\u94fa\u5c4b\u5982\u4e4b\uff0c\u6697\u95e8\u516d\u5341\uff0c\u6c34\u53e3\u4e5d\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b\u5f15\u300a\u4e24\u9547\u4e09\u5173\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u516b\u5e74 \u300c\u4e07\u8fbe\u53c8\u8bf7\u81ea\u4e1c\u8def\u65b0\u5b81\u58a9\uff0c\u5317\u5386\u96d5\u9e57\u3001\u957f\u5b89\u5cad\u3001\u9f99\u95e8\u536b\u81f3\u516d\u53f0\u5b50\uff0c\u522b\u4e3a\u5185\u57a3\u4e00\u767e\u516d\u5341\u4e5d\u91cc\u6709\u5947\uff0c\u5811\u5982\u4e4b\uff0c\u654c\u53f0\u4e09\u767e\u6709\u516b\uff0c\u94fa\u5c4b\u5982\u4e4b\uff0c\u6697\u95e8\u5341\u6709\u4e5d\uff0c\u4ee5\u91cd\u5b88\u4eac\u5e08\uff0c\u63a7\u5e26\u5317\u8def\u3002\u53c8\u8bf7\u8865\u7b51\u4e1c\u8def\uff0c\u9547\u5357\u58a9\u4e0e\u706b\u7130\u5c71\u4e2d\u7a7a\uff0c\u7531\u9547\u5357\u800c\u5317\uff0c\u897f\u5386\u6c38\u5b81\u81f3\u65b0\u58a9\uff0c\u585e\u57a3\u4ee5\u6210\u5168\u9669\uff0c\u4ff1\u4ece\u4e4b\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b\u5f15\u300a\u4e24\u9547\u4e09\u5173\u5fd7\u300b \u9686\u5e86\u5143\u5e74 \u300c\u5175\u90e8\u8bf7\u6d5a\u901a\u8fb9\u58d5\uff0c\u4ece\u4e4b\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b \u9686\u5e86\u4e8c\u5e74 \u300c\u603b\u7763\u65b9\u9022\u65f6\u8bf7\u7b51\u5317\u8def\u9f99\u95e8\u6240\u5916\u8fb9\uff0c\u8d77\u9f99\u95e8\u6240\u4e4b\u76d8\u9053\u58a9\uff0c\u8fc4\u9756\u864f\u5821\u4e4b\u5927\u8859\u53e3\uff0c\u4ffe\u5317\u8def\u4e4b\u5175\u7531\u6b64\u4ee5\u5165\u63f4\u5357\u5c71\u3001\u4e1c\u8def\u4e4b\u5175\u7531\u6b64\u4ee5\u51fa\u63f4\u72ec\u77f3\u3002\u4ece\u4e4b\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b \u4e07\u5386\u5143\u5e74 \u300c\u4ece\u5ba3\u5927\u7763\u629a\u6240\u8bf7\uff0c\u4fee\u5357\u5c71\u53ca\u4e2d\u5317\u4e8c\u8def\u8bf8\u8fb9\u58a9\u8425\u5be8\u3002\u300d\u300a\u5ba3\u5316\u5e9c\u5fd7\u300b \u5d07\u796f\u5341\u5e74 \u5362\u8c61\u5347\u5728\u300a\u786e\u8bae\u4fee\u7b51\u5ba3\u8fb9\u758f\u300b\u4e2d\u8bb0\u8f7d\uff0c\u5d07\u796f\u5e1d\u5728\u84df\u8fbd\u7763\u81e3\u5f20\u798f\u81fb\u594f\u758f\u4e2d\u4eb2\u6279\u201c\u5ba3\u8fb9\u4fee\u5899\u4e8b\u5b9c\uff0c\u8be5\u7763\u76d1\u629a\u8be6\u753b\u901f\u594f\u3002\u201d\u5728\u300a\u5357\u5c71\u4fee\u7b51\u58a9\u53f0\u758f\u300b\u8bb0\u8f7d\uff0c\u5175\u90e8\u62e8\u4e00\u4e07\u4e94\u5343\u91d1\uff0c\u5bf9\u5ba3\u5e9c\u9547\u957f\u57ce\u4e2a\u522b\u5730\u6bb5\u505a\u4e86\u5c0f\u4fee\u5c0f\u8865\u3002"},{"location":"history/the_great_wall/tgw/#_5","title":"\u5927\u540c","text":"<p>\u9547\u6cbb\u4eca\u5c71\u897f\u5927\u540c\uff0c\u7ba1\u8f96\u4e1c\u8d77\u9547\u53e3\u53f0\uff0c\u897f\u81f3\u4e2b\u89d2\u5c71\uff08\u504f\u5173\u4e1c\u5317\uff09\u7684\u957f\u57ce\u9632\u5fa1\u3002 \u201c\u4e1c\u8fde\u4e0a\u8c37\uff0c\u5357\u8fbe\u5e76\u3001\u6052\uff0c\u897f\u754c\u9ec4\u6cb3\uff0c\u5317\u63a7\u6c99\u6f20\uff0c\u5c45\u8fb9\u9685\u4e4b\u8981\u5bb3\uff0c\u4e3a\u4eac\u5e08\u4e4b\u85e9\u5c4f\u3002\u201d</p> \u5e74\u4efd \u4fee\u5efa \u6d2a\u6b66\u4e94\u5e74 \u5927\u540c\u57ce\u300c\u5927\u5c06\u519b\u5f90\u8fbe\u56e0\u65e7\u571f\u57ce\u589e\u7b51\uff0c\u5468\u5341\u4e09\u91cc\u3001\u9ad8\u56db\u4e08\u4e8c\u5c3a\u3001\u5740\u780c\u4ee5\u77f3\u5899\uff0c\u7503\u4ee5\u7816\uff0c\u95e8\u56db\u3002\u300d\u300a\u5927\u540c\u53bf\u5fd7\u300b \u6d2a\u6b66\u4e8c\u5341\u516b\u5e74\u6b63\u6708 \u547d\u300c\u5468\u738b\u3001\u664b\u738b\u7387\u6cb3\u5357\u3001\u5c71\u897f\u8bf8\u536b\u519b\u51fa\u585e\uff0c\u7b51\u57ce\u5c6f\u7530\u3002\u300d\u300a\u660e\u53f2\u00b7\u592a\u7956\u672c\u7eaa\u300b \u6210\u5316\u4e8c\u5341\u4e00\u5e74 \u4f59\u5b50\u4fca\u4ee5\u6237\u90e8\u5c1a\u4e66\u517c\u5de6\u526f\u90fd\u5fa1\u53f2\uff0c\u603b\u7763\u5927\u540c\u3001\u5ba3\u5e9c\u519b\u52a1\uff0c\u7531\u300c\u5927\u540c\u4e2d\u8def\u8d77\uff0c\u897f\u81f3\u504f\u5173\u63a5\u754c\u53bb\u5904\u6b62\uff0c\u4e1c\u897f\u5730\u8fdc\u516d\u767e\u4f59\u91cc\uff0c\u5730\u52bf\u5e73\u5766\uff0c\u65e0\u9669\u53ef\u636e\uff0c\u5e94\u8c03\u96c6\u4e2d\u3001\u897f\u4e8c\u8def\uff0c\u5f81\u64cd\u9a6c\u6b65\u5b98\u519b\u5e76\u5c6f\u79cd\u5ba6\u820d\u4f59\u4eba\u7b49\u505a\u4e0e\u58a9\u6837\uff0c\u4ece\u4e2d\u8def\u8d77\u968f\u5c0f\u8fb9\u6545\u5740\uff0c\u6bcf\u4e8c\u91cc\u7acb\u58a9\u53f0\u4e00\u5ea7\uff0c\u6bcf\u5ea7\u56db\u9762\u6839\u811a\u5404\u9614\u4e09\u4e08\u3001\u9ad8\u4e09\u4e08\u3001\u5bf9\u89d2\u505a\u60ac\u697c\u4e8c\u5ea7\uff0c\u957f\u9614\u5404\u516d\u5c3a\u3002\u7a7a\u4e2d\u6311\u58d5\u5811\uff0c\u9614\u4e00\u4ed7\u4e94\u5c3a\u3001\u6df1\u4e00\u4e08\u6df1\u3002\u300d\u300a\u5927\u540c\u53bf\u5fd7\u300b \u6210\u5316\u4e8c\u5341\u4e00\u5e74 \u300c\u603b\u7763\u519b\u4f59\u5b50\u4fca\u8bf7\u7b51\u957f\u57ce\u3002\u4e94\u6708\uff0c\u90fd\u6307\u6325\u987e\u7eb2\u4ee5\u4eac\u8425\u5175\u516d\u5343\u52a9\u5f79\u3002\u300d\u4f59\u5b50\u4fca\u5728\u5411\u671d\u5ef7\u8bf7\u4fee\u5ba3\u3001\u5927\u8fb9\u5899\u65f6\u300c\u4e1c\u8d77\u56db\u6d77\u51b6\uff0c\u897f\u62b5\u9ec4\u6cb3\uff0c\u5ef6\u88a4\u5343\u4e09\u767e\u4f59\u91cc\uff0c\u65e7\u6709\u58a9\u767e\u4e03\u5341\uff0c\u5e94\u589e\u7b51\u56db\u767e\u56db\u5341......\u300d\u300a\u5927\u540c\u53bf\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e00\u5e74\u516d\u6708 \u300c\u5ef7\u63a8(\u7fdf\u9e4f)\u603b\u7763\u5ba3\u3001\u5927\u3001\u504f\u3001\u4fdd\u5e76\u8282\u5236\u5c71\u4e1c\u3001\u6cb3\u5357\u3002\u516c\u4e43\u6311\u4fee\u5927\u540c\u58d5\u5899\u4e00\u9053\uff0c\u6df1\u5e7f\u5404\u4e8c\u4e08\uff0c\u4e14\u5792\u571f\u4e3a\u5899\uff0c\u9ad8\u590d\u500d\u4e4b\uff0c\u5ef6\u88a4\u4e09\u767e\u4e5d\u5341\u4f59\u91cc\uff0c\u6dfb\u7b51\u65b0\u58a9\u4e8c\u767e\u4e5d\u5341\u4e8c\u5ea7\uff0c\u62a4\u58a9\u5821\u4e00\u5341\u56db\u5ea7\u3002\u300d\u300a\u5927\u540c\u53bf\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e09\u5e74 \u300c\u5de1\u629a\u8a79\u8363\u4ee5\u5927\u540c\u65e0\u9669\uff0c\u4e43\u7b51\u4e1c\u8def\u8fb9\u5899\u767e\u4e09\u5341\u516b\u91cc\uff0c\u5821\u4e03\uff0c\u58a9\u53f0\u767e\u4e94\u5341\u56db\u3002\u300d\u300a\u5927\u540c\u53bf\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74 \u603b\u7763\u7fc1\u4e07\u8fbe\u53ca\u90fd\u5fa1\u53f2\u8a79\u8363\uff0c\u603b\u5175\u5468\u6587\u8bae\u66f0\uff1a\u201c\u5811\u53ef\u586b\u6e21\uff0c\u4e14\u4e0d\u5229\u62d2\u5b88\uff0c\u6545\u5fc5\u6210\u957f\u57ce\u3002\u957f\u57ce\u5fc5\u6709\u53f0\uff0c\u5229\u4e8e\u65c1\u51fb\uff1b\u53f0\u5fc5\u7f6e\u5c4b\uff0c\u4ee5\u5904\u620d\u5352\uff1b\u8fd1\u57ce\u5fc5\u7b51\u5821\uff0c\u4ee5\u4f11\u4f0f\u5175\uff1b\u57ce\u4e0b\u7559\u6570\u6697\u95e8\uff0c\u4ee5\u4fbf\u51fa\u54e8\u3002\u201d\u53c8\u66f0\uff1a\u201c\u81ea\u9633\u548c\u5e9c\u674e\u4fe1\u5c6f\u65e7\u65e0\u57ce\uff0c\u81ea\u4e2b\u89d2\u5c71\u81f3\u9633\u548c\u65e7\u53cb\u5811\u6216\u57ce\u800c\u4e0d\u56fa\uff0c\u4e09\u6708\u4ee4\u901a\u7b51\u957f\u57ce\uff0c\u8865\u6545\u800c\u5203\u65b0\uff0c\u51e1\u4e09\u767e\u4f59\u91cc\u3002\u654c\u53f0\u3001\u6697\u95e8\u79f0\u662f\u589e\u7b51\uff0c\u4fdd\u5b89\u5821\u8bbe\u5175\u620d\u5b88\uff0c\u53c8\u591a\u7b51\u571f\u5821\u4e8e\u5185\uff0c\u4ee5\u5c6f\u4f0f\u5175\u3002\u201d \u300a\u5927\u540c\u53bf\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74\u4e0e\u4e07\u5386\u521d\u5e74 \u300c\u7fc1\u4e07\u8fbe\u4e4b\u603b\u7763\u5ba3\u3001\u5927\u4e5f\uff0c\u7b79\u8fb9\u4e8b\u751a\u6089\u3002...\u4e43\u8bf7\u4fee\u5ba3\u3001\u5927\u8fb9\u5899\u5343\u4f59\u91cc\uff0c\u70fd\u5820\u4e09\u767e\u516d\u5341\u4e09\u6240\u3002\u540e\u4ee5\u901a\u5e02\u6545\uff0c\u4e0d\u590d\u9632\uff0c\u9042\u534a\u4e3a\u654c\u6240\u6bc1\u3002\u81f3\u662f\uff0c\u5175\u90e8\u8bf7\u6555\u8fb9\u5c06\u4fee\u8865\u3002\u300d(\u4e24\u6b21\u4fee\u8fb9\u5206\u522b\u4e3a\u5609\u9756\u4e8c\u5341\u4e94\u5e74\u4e0e\u4e07\u5386\u5e74\u95f4) \u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u4e07\u5386\u4e8c\u5e74\u56db\u6708 \u300c\u6237\u90e8\u53d1\u4e8c\u5341\u516d\u4e07\u4e8c\u5343\u4f59\u91d1\u4fee\u5927\u540c\u8fb9\u5899\uff0c\u5c81\u8d39\u4e94\u4e07\u3002\u300d \u4e07\u5386\u4e03\u5e74\u4e8c\u6708 \u300c\u7b51\u5927\u540c\u9547\u5c6f\u5821\u4e8c\u767e\u4e94\u5341\u4e03\uff0c\u5730\u53f0\u5343\u4e8c\u5341\u516b\u6240\u3002\u300d"},{"location":"history/the_great_wall/tgw/#_6","title":"\u5c71\u897f","text":"<p>\u4ea6\u79f0\u592a\u539f\u9547\u3002\u9547\u6cbb\u4eca\u5c71\u897f\u504f\u5173\u3002\u7ba1\u8f96\u897f\u8d77\u9ec4\u6cb3\u4e1c\u5cb8\uff0c\u7ecf\u5916\u4e09\u5173\u81f3\u5e73\u578b\u5173\u7684\u957f\u57ce\u9632\u5fa1\u3002 \u201c\u504f\u5934\u3001\u5b81\u6b66\u3001\u96c1\u95e8\uff0c\u81ea\u897f\u8fe4\u4e1c\u4e09\u5173\u5e76\u5217\uff0c\u897f\u5c3d\u9ec4\u6cb3\u4e1c\u5cb8\u3001\u4e1c\u62b5\u5927\u540c\u3002\u867d\u592a\u539f\u5317\u5883\u8981\u5bb3\u4e4b\u5730\uff0c\u4e0e\u771f\u5b9a\u76f8\u4e3a\u8822\u9f7f\uff0c\u975e\u552f\u5c71\u897f\u91cd\u9547\uff0c\u800c\u757f\u8f85\u4e4b\u5730\u5b89\u5371\u7cfb\u7109\u3002\u201d</p> \u5e74\u4efd \u4fee\u5efa \u6d2a\u6b66\u516d\u5e74 \u6731\u5143\u748b\u547d\u5927\u5c06\u519b\u5f90\u8fbe\u7b79\u5907\u5c71\u897f\u3001\u5317\u5e73\u8fb9\u65f6\uff0c\u300c\u8bcf\u5c71\u897f\u90fd\u536b\u4e8e\u96c1\u95e8\u5173\u3001\u592a\u548c\u5cad\u5e76\u6b66\u3001\u6714\u8bf8\u5c71\u8c37\u95f4\uff0c\u51e1\u4e03\u5341\u4e09\u9698\uff0c\u4ff1\u8bbe\u620d\u5175\u3002\u300d\u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u5ba3\u5fb7\u4e5d\u5e74 \u300c\u5927\u8fb9\u5728\u5173\u5317\u4e00\u767e\u4e8c\u5341\u91cc\uff0c\u4e1c\u63a5\u5927\u540c\u9547\u5e73\u864f\u536b\u5d16\u5934\u58a9\u754c\uff0c\u897f\u62b5\u9ec4\u6cb3\uff0c\u957f\u4e8c\u767e\u4e5d\u5341\u91cc\u3002\u4eca\u5931\u5728\u4e8c\u8fb9\u4e4b\u5916\uff0c\u4e45\u5c5e\u8349\u5730\uff0c\u6b62\u6709\u85e9\u7bf1\u9057\u5740\uff0c\u672a\u8be6\u4fee\u7b51\u59cb\u672b\u3002\u300d\u300c\u5927\u8fb9\u58a9\u5728\u7ea2\u95e8\u53e3\u5916\u516d\u5341\u91cc\uff0c\u81ea\u7a91\u5b50\u5934\u58a9\u8d77\uff0c\u81f3\u5c0f\u53e3\u5b50\u58a9\u6b62\uff0c\u5171\u8ba1\u4e00\u5341\u516d\u5ea7\u3002\u660e\u5ba3\u5fb7\u4e5d\u5e74\u90fd\u7763\u674e\u8c26\u5efa\u3002\u5609\u9756\u521d\u5e74\u72b9\u5b58\uff0c\u4eca\u7686\u5e9f\u4e3a\u8349\u5730\u3002\u300d\u300a\u504f\u5173\u5fd7\u00b7\u5173\u9698\u300b \u6210\u5316\u4e8c\u5e74 \u300c\u4e8c\u8fb9\u5728\u5173\u5317\u516d\u5341\u91cc\uff0c\u6b63\u5317\u4e3a\u8349\u579b\u5c71\u3002\u8fb9\u8fe4\u4e1c\u4e3a\u6c34\u6cc9\u3001\u7ea2\u95e8\u53e3\u3002\u8fb9\u6781\u4e1c\u4e3a\u8001\u8425\u597d\u6c49\u5c71\u3002\u8fb9\u4e1c\u63a5\u5927\u540c\u9547\u5e73\u864f\u536b\u767d\u8349\u576a\u3002\u8fb9\u4e1c\u5357\u6298\u5411\u5185\u8fb9\uff0c\u63a5\u5229\u6c11\u3001\u6714\u5dde\u754c\uff1b\u897f\u6298\u81f3\u795e\u6c60\u5927\u6c34\u53e3\uff0c\u5b81\u6b66\u9633\u65b9\u53e3\uff0c\u8fe4\u5357\u590d\u4e1c\u6298\u76d8\u9053\u6881\uff0c\u62b5\u96c1\u95e8\u5173\u3002\u8c28\u6309\uff1a\u4e8c\u8fb9\u4e43\u65b0\u8fb9\u4e5f\uff0c\u660e\u6210\u5316\u4e8c\u5e74\u603b\u5175\u738b\u73ba\u5efa\u3002\u300d\u300a\u504f\u5173\u5fd7\u00b7\u5173\u9698\u300b \u6b63\u5fb7\u5341\u5e74 \u300c\u56db\u8fb9\u5728(\u504f)\u5173\u5357\u4e8c\u91cc\uff0c\u4e1c\u8d77\u957f\u6797\u9e70\u7a9d\u5c71\u5d16\uff0c\u897f\u62b5\u672c\u5173\u6559\u519b\u573a\u3002\u968f\u5c71\u636e\u9669\uff0c\u957f\u4e00\u767e\u4e8c\u5341\u91cc\u3002\u53c8\u4e8e\u5173\u5357\u4e94\u91cc\u7b51\u5821\u4e00\u5ea7\uff0c\u66f0\u7f57\u6c49\u576a\u3002\u660e\u6b63\u5fb7\u5341\u5e74\u5175\u5baa\u5f20\u51e4\u7fbe\u3002\u300d\u300a\u504f\u5173\u5fd7\u00b7\u5173\u9698\u300b \u6b63\u5fb7\u5341\u4e00\u5e74 \u300c\u6b63\u5fb7\u5341\u4e00\u5e74\u90fd\u5fa1\u53f2\u674e\u94ba\u4e8e\u96c1\u95e8\u5173\u4e1c\u7b51\u4e03\u5821\uff0c\u77f3\u5899\u3001\u5434\u57ce\u3001\u516d\u90ce\uff0c\u4ee5\u904f\u5c71\u9634\u4e4b\u51b2\uff1b\u4e1c\u6881\u5761\u3001\u4e71\u77f3\u6ee9\u3001\u9a86\u9a7c\u77f3\uff0c\u4ee5\u904f\u5e94\u5dde\u4e4b\u51b2\uff1b\u5929\u4e95\u6881\u4ee5\u904f\u6d51\u6e90\u5dde\u4e4b\u51b2\u3002\u897f\u7b51\u56db\u5821\u3001\u516b\u5c94\u3001\u77f3\u5323\u3001\u5c0f\u83b2\u82b1\uff0c\u4ee5\u904f\u9a6c\u9091\u4e4b\u51b2\uff0c\u5939\u67f3\u6811\u3001\u96d5\u9e57\u6881\uff0c\u4ee5\u904f\u6714\u5dde\u4e4b\u51b2\u3002\u300d\u300a\u5c71\u897f\u901a\u5fd7\u300b \u5609\u9756\u516b\u5e74 \u300c\u4e09\u8fb9\u5728(\u504f)\u5173\u4e1c\u5317\u4e09\u5341\u91cc\uff0c\u4e1c\u8d77\u8001\u8425\u77f3\u5e99\u513f\uff0c\u897f\u62b5\u767d\u9053\u5761\u77f3\u68af\u58a9\u3002\u6cbf\u5c71\u524a\u5d16\uff0c\u5e73\u5730\u7b51\u5899\uff0c\u957f\u4e5d\u5341\u4f59\u91cc\u3002\u660e\u5609\u9756\u516b\u5e74\u603b\u5175\u674e\u747e\u5efa\u3002\u300d\u300a\u504f\u5173\u5fd7\u00b7\u5173\u9698\u300b \u5609\u9756\u5341\u4e09\u5e74 \u300c\u90fd\u5fa1\u53f2\u4efb\u6d1b\u81ea\u96d5\u7a9d\u6881\u81f3\u8fbe\u8fbe\u58a9\uff0c\u7b51(\u5b81\u6b66)\u8fb9\u516b\u91cc\u4e8c\u5341\u516b\u6b65\uff0c\u780c\u4ee5\u77f3\u3002\u300d\u300a\u5b81\u6b66\u5e9c\u5fd7\u300b \u5609\u9756\u5341\u516b\u5e74 \u300c\u90fd\u5fa1\u53f2\u9648\u8bb2\u4e43\u5bfb\u738b\u91ce\u6881\u5e9f\u8ff9\u4fee\u590d\u4e4b\u3002\u4e1c\u8d77\u9633\u65b9\uff0c\u7ecf\u6e29\u5cad\u5927\u3001\u5c0f\u6c34\u53e3\uff0c\u795e\u6c60\u3001\u835e\u9ea6\u5ddd\u81f3\u516b\u89d2\u5821\uff0c\u6089\u7b51\u957f\u57ce\u51e1\u767e\u516b\u5341\u91cc\uff0c\u4e14\u7b51\u4e14\u65a9\uff0c\u56e0\u5c71\u4e3a\u9669\uff0c\u571f\u77f3\u76f8\u534a\uff0c\u5916\u4e3a\u58d5\u5811\u3002\u300d\u300a\u5b81\u6b66\u5e9c\u5fd7\u300b \u5609\u9756\u5341\u4e5d\u5e74 \u300c\u90fd\u5fa1\u53f2\u5218\u81ec\u8bf7\u57ce\u96c1\u95e8\u9698\u5be8\u4e09\u767e\u91cc\uff0c\u9ad8\u9614\u4ee5\u4e00\u4e08\u4e94\u5c3a\u4e3a\u5f0f\u3002\u300d\u300a\u5c71\u897f\u901a\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e00\u5e74\u7fdf\u9e4f\u63a5\u6a0a\u7ee7\u7956\u4efb\u5ba3\u3001\u5927\u603b\u7763 \u7fdf\u9e4f\u5411\u7687\u5e1d\u594f\u8bf7\u300c\u8c03\u9655\u897f\u3001\u84df\u3001\u8fbd\u5ba2\u5175\u516b\u652f\uff0c\u53ca\u5ba3\u3001\u5927\u4e09\u5173\u4e3b\u5175\uff0c\u517c\u52df\u571f\u8457\uff0c\u9009\u9a81\u9510\u8005\u5341\u4e07\uff0c\u7edf\u4ee5\u826f\u5c06\uff0c\u5217\u56db\u8425\uff0c\u5206\u5e03\u585e\u4e0a\uff0c\u6bcf\u8425\u5f53\u4e00\u9762\u3002\u5bc7\u5165\u5883\uff0c\u6e38\u5175\u6311\u4e4b\uff0c\u8bf1\u5176\u8ffd\uff0c\u8bf8\u8425\u5939\u653b\u3002\u300d\u7687\u5e1d\u6279\u51c6\u4e86\u594f\u8bf7\uff0c\u300c\u9e4f\u4e43\u6d5a\u58d5\u7b51\u57a3\uff0c\u4fee\u8fb9\u5899\u4e09\u767e\u4e5d\u5341\u4f59\u91cc\uff0c\u589e\u65b0\u58a9\u4e8c\u767e\u4e5d\u5341\u4e8c\uff0c\u62a4\u58a9\u5821\u4e00\u5341\u56db\uff0c\u5efa\u8425\u820d\u4e00\u5343\u4e94\u767e\u95f4...\u758f\u8bf7\u4e1c\u81ea\u5e73\u578b\uff0c\u897f\u81f3\u504f\u5173\uff0c\u753b\u5730\u5206\u5b88\u3002\u589e\u6e38\u5175\u4e09\u652f\uff0c\u5206\u9a7b\u96c1\u95e8\u3001\u5b81\u6b66\u3001\u504f\u5173\u3002\u5bc7\u653b\u5899\uff0c\u620d\u5175\u62d2\uff0c\u6e38\u5175\u51fa\u5173\u5939\u653b\u3002\u300d\u300a\u660e\u53f2\u00b7\u7fdf\u9e4f\u4f20\u300b \u5609\u9756\u4e8c\u5341\u4e09\u5e74 \u300c\u90fd\u5fa1\u53f2\u66fe\u94e3\u4ee5\u8fb9\u5899\u9ad8\u539a\u52ff\u79f0\u96c1\u95e8\uff0c\u4e43\u590d\u589e\u4fee\u7b51\u4e4b\u3002\u4e09\u5173\u4e2d\u8def\u4e4b\u5907\uff0c\u4e8e\u662f\u59cb\u58ee\u7109\u3002\u300d \u300a\u5c71\u897f\u901a\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e09\u5e74 \u300c\u5de1\u629a\u66fe\u94e3\u81ea\u4e2b\u89d2\u800c\u5357\uff0c\u5386\u8001\u8425\u3001\u91ce\u732a\u6c9f\u3001\u5229\u6c11\u4e00\u5e26\uff0c\u589e\u7b51\u65e7\u8fb9\u4e00\u767e\u56db\u5341\u91cc\uff0c\u671b\u53f0\u4e00\u767e\u4e8c\u5341\u53c8\u516b\u3002\u300d\u300a\u504f\u5173\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74\uff0c\u7fc1\u4e07\u8fbe\u4ee3\u7fdf\u9e4f\u804c\uff0c\u603b\u7763\u5ba3\u3001\u5927\u3001\u4fdd\u5b9a\u519b\u52a1 \u300c\u5ba3\u3001\u5927\u4e24\u9547\u957f\u57ce\uff0c\u7686\u903c\u5de8\u5bc7\uff0c\u9669\u5728\u5916\uff0c\u662f\u6781\u8fb9\uff1b\u800c\u5185\u5916\u4e09\u5173\u957f\u57ce\u7686\u5cfb\u5c71\u5c42\u5c97\uff0c\u9669\u5728\u8fb9\uff0c\u662f\u6b21\u8fb9\u3002\u5916\u8fb9\uff0c\u5927\u540c\u6700\u96be\u5b88\uff0c\u6b21\u5ba3\u5e9c\uff0c\u6b21\u5c71\u897f\u4e4b\u504f\u5173\uff1b\u5185\u8fb9\u7d2b\u8346\u3001\u5b81\u6b66\u3001\u96c1\u95e8\u4e3a\u8981\uff0c\u6b21\u5c45\u5eb8\u3001\u5012\u9a6c\u3001\u9f99\u6cc9\u3001\u5e73\u578b\u3002\u300d \u300a\u5c71\u897f\u901a\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74\uff0c\u7fc1\u4e07\u8fbe\u4ee3\u7fdf\u9e4f\u804c\uff0c\u603b\u7763\u5ba3\u3001\u5927\u3001\u4fdd\u5b9a\u519b\u52a1 \u4e3b\u8981\u4fee\u7b51\u4e86\u5927\u540c\u897f\u8def\u53ca\u5ba3\u5e9c\u4e1c\u8def\u7684\u957f\u57ce\u3002\u540c\u65f6\u4e5f\u4fee\u7b51\u4e86\u5c71\u897f\u9547\u5b81\u6b66\u3001\u96c1\u95e8\u4e00\u5e26\u7684\u957f\u57ce\u3002\u300a\u5c71\u897f\u901a\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74\uff0c\u7fc1\u4e07\u8fbe\u4ee3\u7fdf\u9e4f\u804c\uff0c\u603b\u7763\u5ba3\u3001\u5927\u3001\u4fdd\u5b9a\u519b\u52a1 \u300c\u7fc1\u4e07\u8fbe\u758f\uff0c\u81ea\u6c34\u5cea\u9e26\u513f\u5d16\u8d77\uff0c\u4e1c\u81f3\u9a6c\u5170\u53e3\u970d\u5bb6\u5761\u6b62\uff0c\u4e3a\u57a3\u4e94\u5341\u4e09\u91cc\u6709\u5947\uff0c\u589e\u6dfb\u654c\u53f0\u4e5d\u5341\u516d\uff0c\u94fa\u5c4b\u4e8c\u767e\u516b\u5341\u516b\uff0c\u54c1\u7a91\u4e94\u4e07\u56db\u5343\u516b\u767e\u56db\u5341\u3002\u300d\u300a\u5c71\u897f\u901a\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74\uff0c\u7fc1\u4e07\u8fbe\u4ee3\u7fdf\u9e4f\u804c\uff0c\u603b\u7763\u5ba3\u3001\u5927\u3001\u4fdd\u5b9a\u519b\u52a1 \u300c\u7fc1\u4e07\u8fbe\u758f\uff0c\u81ea\u51cc\u4e91\u53e3\u83dc\u6811\u6c9f\u8d77\uff0c\u4e1c\u81f3\u5927\u5b89\u53e3\u960e\u5bb6\u5cad\u6b62\uff0c\u4e3a\u57a3\u56db\u5341\u4e94\u91cc\u6709\u5947\uff0c\u77f3\u5811\u4e09\u5341\u4e4b\u4e00\uff0c\u589e\u6dfb\u654c\u53f0\u4e00\u5341\u516b\uff0c\u94fa\u5c4b\u4e94\u5341\u56db\u3002\u300d\u300a\u5c71\u897f\u901a\u5fd7\u300b \u4e07\u5386\u4e8c\u5341\u4e09\u5e74 \u300c\u5de1\u629a\u674e\u666f\u91cd\u4fee\u96c1\u95e8\u5173\u8fb9\u5899\uff0c\u7ef5\u4e98\u5341\u4e94\u91cc\u3002\u300d(\u96c1\u95e8\u5173\u5916\u767d\u8349\u53e3\u81f3\u65b0\u5e7f\u6b66\u6bb5\u957f\u57ce)  \u300a\u4ee3\u5dde\u5fd7\u300b"},{"location":"history/the_great_wall/tgw/#_7","title":"\u6986\u6797","text":"<p>\u4ea6\u79f0\u5ef6\u7ee5\u9547\u3002\u9547\u6cbb\u4eca\u9655\u897f\u7ee5\u5fb7\uff0c\u540e\u79fb\u6cbb\u4eca\u9655\u897f\u6986\u6797\u3002\u7ba1\u8f96\u4e1c\u8d77\u6e05\u6c34\u8425\uff0c\u897f\u81f3\u82b1\u9a6c\u6c60\u7684\u957f\u57ce\u9632\u5fa1\u3002</p> \u5e74\u4efd \u4fee\u5efa \u6b63\u7edf\u4e8c\u5e74 \u300c\u5b88\u5c06\u90fd\u7763\u738b\u796f\u59cb\u8bf7\u6986\u6797\u5821\u5f80\u5317\u4e09\u5341\u91cc\u4e4b\u5916\uff0c\u6c99\u6f20\u5e73\u5730\u589e\u7b51\u77ad\u671b\u58a9\u53f0\uff0c\u864f\u7aa5\u5883\u5373\u4e3e\u70df\u793a\u8b66...\u5f00\u521b\u6986\u6797\u4e00\u5e26\u8425\u5821\uff0c\u7d2f\u589e\u81f3\u4e8c\u5341\u56db\u6240\uff0c\u53d1\u8c03\u5ef6\u5b89\u3001\u7ee5\u5fb7\u3001\u5e86\u9633\u4e09\u536b\u5b98\u519b\u5206\u620d\u3002\u300d\u300a\u6986\u6797\u5e9c\u5fd7\u300b \u6210\u5316\u521d\u5e74 \u6210\u5316\u521d\u5e74\uff0c\u201c\u6bdb\u91cc\u5b69\u6270\u8fb9\uff0c\u547d\u590d\u51fa\u89c6\u9655\u897f\u8fb9\u5907\u3002\u81ea\u5ef6\u7ee5\u62b5\u7518\u8083\uff0c\u76f8\u5ea6\u5f62\u52bf\uff0c\u4e0a\u8a00\u300c\u5ef6\u7ee5\u4e1c\u8d77\u9ec4\u6cb3\u5cb8\uff0c\u897f\u81f3\u5b9a\u8fb9\u8425\uff0c\u63a5\u5b81\u590f\u82b1\u9a6c\u6c60\uff0c\u8426\u7ea1\u4e8c\u5343\u4f59\u91cc\u3002\u9669\u9698\u4ff1\u5728\u5185\u5730\uff0c\u800c\u5883\u5916\u4e43\u65e0\u5c4f\u969c\uff0c\u6b62\u51ed\u58a9\u5821\u4ee5\u5b88...\u300d\u201d \u300a\u660e\u53f2\u00b7\u738b\u590d\u4f20\u300b \u6210\u5316\u4e03\u5e74 \u300c\u864f\u9042\u5165\u5957\u62a2\u63a0\uff0c\u7136\u72b9\u4e0d\u6562\u9a7b\u654c\u3002\u300d\u300a\u4e5d\u8fb9\u56fe\u8003\u300b \u6210\u5316\u4e03\u5e74 \u300c\u5ef6\u7ee5\u5de1\u629a\u90fd\u5fa1\u53f2\u4f59\u5b50\u4fca\u5927\u7b51\u8fb9\u5899\u300d\u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u6210\u5316\u4e03\u5e74 \u300c\u5b50\u4fca\u4e43\u5f99\u6cbb\u6986\u6797\u3002\u7531\u9ec4\u752b\u5ddd\u897f\u81f3\u5b9a\u8fb9\u8425\u5343\u4e8c\u767e\u4f59\u91cc\uff0c\u58a9\u5821\u76f8\u671b\uff0c\u6a2a\u622a\u5957\u53e3\uff0c\u5185\u590d\u5811\u5c71\u5819\u8c37\uff0c\u66f0\u5939\u9053\uff0c\u4e1c\u62b5\u7247\u5934\uff0c\u897f\u7ec8\u5b81\u3001\u56fa...\u300d\u300a\u660e\u53f2\u00b7\u5175\u5fd7\u300b \u6210\u5316\u516b\u5e74 \u6986\u6797\u4fee\u7b51\u4e1c\u3001\u897f\u3001\u4e2d\u4e09\u8def\u5899\u5811\uff0c\u5b81\u590f\u4fee\u7b51\u6cb3\u4e1c\u8fb9\u5899\uff0c\u9042\u5f03\u6cb3\u5b88\u5899\u3002\u300a\u4e5d\u8fb9\u56fe\u8003\u300b \u6210\u5316\u4e5d\u5e74 \u90fd\u5fa1\u53f2\u4f59\u5b50\u4fca\u5efa\u8bae\u5f99\u9547\u6986\u6797\u5821\uff0c\u895f\u542d\u65e2\u4e3e\uff0c\u5185\u5730\u9042\u5b89\u3002 \u6210\u5316\u5341\u5e74 \u300c\u95f0\u516d\u6708\uff0c\u4f59\u5b50\u4fca\u594f\u4fee\u7b51\u8fb9\u5899\u4e4b\u6570\uff0c\u4e1c\u81ea\u6e05\u6c34\u8425\u7d2b\u57ce\u5be8\uff0c\u897f\u81f3\u5b81\u590f\u82b1\u9a6c\u6c60\u8425\u754c\u724c\u6b62...\u4fee\u8fb9\u5899\uff0c\u5899\u4e1c\u897f\u957f\u4e00\u5343\u4e03\u767e\u4e03\u5341\u91cc\u4e00\u767e\u4e8c\u5341\u4e09\u6b65\uff0c\u5b88\u62a4\u58d5\u5899\u5d16\u5be8\u516b\u767e\u4e00\u5341\u4e5d\u5ea7\uff0c\u5b88\u62a4\u58d5\u5899\u5c0f\u58a9\u4e03\u5341\u516b\u5ea7\uff0c\u8fb9\u58a9\u4e00\u5341\u4e94\u5ea7\u3002\u300d\u300a\u6986\u6797\u5e9c\u5fd7\u300b \u5609\u9756\u5341\u5e74\u516d\u6708 \u738b\u743c\u594f\u300c\u6986\u6797\u4e1c\u3001\u4e2d\u4e8c\u8def\u5927\u8fb9\u516d\u767e\u4e94\u5341\u516d\u91cc\uff0c\u5f53\u4fee\u8005\u4e09\u767e\u5341\u91cc\uff0c\u4e8c\u8fb9\u516d\u767e\u4e94\u5341\u4e03\u91cc\uff0c\u5f53\u4fee\u8005\u4e8c\u767e\u56db\u5341\u516b\u91cc\u3002\u56e0\u8a00\u4e8c\u8fb9\u4e43\u6210\u5316\u4e2d\u4f59\u5b50\u4fca\u6240\u4fee\uff0c\u56e0\u5c71\u4e3a\u9669\u5c6f\u7530\u591a\u5728\u5176\u5916\uff1b\u5927\u8fb9\u5f18\u6cbb\u4e2d\u6587\u8d35\u6240\u4fee\uff0c\u9632\u62a4\u5c6f\u7530\uff0c\u4e2d\u95f4\u7387\u591a\u5e73\u5730\uff0c\u7b51\u5899\u9ad8\u539a\u4e0d\u8fc7\u4e00\u4e08\uff0c\u53ef\u574f\u800c\u5165\u3002\u4eca\u5f53\u5148\u4fee\u5927\u8fb9\uff0c\u5fc5\u4f7f\u5d16\u5811\u6df1\u9669\uff0c\u5899\u57a3\u9ad8\u539a\u3002\u8ba1\u5352\u4e07\u516b\u5343\u4eba\uff0c\u4e5e\u53d1\u5e11\u91d1\u5341\u4e07\uff0c\u4ece\u4e4b\u3002\u300d\u300a\u6986\u6797\u5e9c\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u56db\u5e74 \u603b\u7763\u66fe\u94e3\u8a00\uff0c\u300c\u81ea\u5b9a\u8fb9\u8425\u81f3\u9ec4\u752b\u5ddd\uff0c\u8fde\u5e74\u864f\u5165\uff0c\u7387\u7531\u662f\u9053\uff0c\u5f53\u4e9f\u4e3a\u4fee\u7f2e\uff0c\u5206\u5730\u5b9a\u5de5\uff0c\u6b21\u7b2c\u4fee\u4e3e\u3002\u897f\u81ea\u5b9a\u8fb9\u8425\uff0c\u4e1c\u81f3\u9f99\u57ce\u5821\uff0c\u8ba1\u957f\u56db\u767e\u56db\u5341\u4f59\u91cc\uff0c\u4e3a\u897f\u6bb5\uff0c\u6240\u5f53\u5148\u7b51\uff1b\u81ea\u9f99\u57ce\u5821\u4e1c\u81f3\u53cc\u5c71\u5821\uff0c\u8ba1\u957f\u56db\u767e\u4e5d\u5341\u4f59\u91cc\uff0c\u4e3a\u4e2d\u6bb5\uff1b\u81ea\u53cc\u5c71\u5821\u4e1c\u81f3\u9ec4\u752b\u5ddd\uff0c\u8ba1\u957f\u4e94\u767e\u4e5d\u5341\u4f59\u91cc\uff0c\u4e3a\u4e1c\u6bb5\u3002\u5c81\u4fee\u4e00\u6bb5\uff0c\u671f\u4e43\u4e09\u5e74\u7ae3\u4e8b\u3002\u300d\u300a\u6986\u6797\u5e9c\u5fd7\u300b \u4e07\u5386\u4e8c\u5e74 \u300c\u9898\u51c6\u4fee\u5efa\u5ef6\u7ee5\u4e00\u9547\u4e09\u6bb5\u8fb9\u5899\u516d\u767e\u4e03\u5341\u4e00\u91cc\uff0c\u58a9\u53f0\u4e03\u5341\u4e94\u5ea7\uff0c\u58a9\u9662\u516b\u5ea7\uff0c\u5be8\u57ce\u4e03\u5ea7\uff0c\u77f3\u780c\u5927\u5ddd\u6cb3\u53e3\u4e00\u5904\uff0c\u571f\u7b51\u5927\u5ddd\u6cb3\u53e3\u56db\u5904\uff0c\u77f3\u780c\u6cb3\u53e3\u6c34\u6d1e\u8fde\u53f0\u4e00\u5ea7\uff0c\u77f3\u5238\u5173\u95e8\u4e00\u5ea7\uff0c\u77f3\u780c\u5e76\u571f\u7b51\u6c9f\u53e3\u4e00\u5341\u4e03\u5904\uff0c\u7816\u77f3\u5238\u780c\u5927\u5c0f\u6c34\u6d1e\u6697\u95e8\u516b\u5341\u4e09\u5904\uff0c\u6c34\u53e3\u56db\u5341\u4e94\u5904\uff0c\u6c34\u773c\u4e94\u5341\u4e00\u5904\uff0c\u6c34\u9053\u56db\u767e\u4e8c\u5341\u4e94\u5904\u3002\u300d\u300a\u6986\u6797\u5e9c\u5fd7\u300b \u4e07\u5386\u4e09\u5e74 \u300c\u9898\u51c6\u5ef6\u7ee5\u6986\u6797\u3001\u795e\u6728\u3001\u5b9a\u8fb9\u3001\u9756\u8fb9\u56db\u9053\u7b51\u7a7a\u5fc3\u654c\u53f0\uff0c\u89c1\u5b58\u57ce\u57a3\u516d\u5341\u4e8c\u5ea7\uff0c\u6c11\u5be8\u5821\u57ce\u4e00\u767e\u56db\u5341\u4e5d\u5ea7\uff0c\u5be8\u57ce\u4e94\u5341\u4e94\u5ea7\uff0c\u7a7a\u5fc3\u654c\u53f0\u4e8c\u767e\u4e09\u5341\u4e5d\u5ea7\uff0c\u654c\u53f0\u4e00\u767e\u4e00\u5341\u516d\u5ea7\uff0c\u58a9\u53f0\u4e00\u5343\u4e09\u767e\u4e00\u5341\u516d\u5ea7\u3002\u300d\u300a\u6986\u6797\u5e9c\u5fd7\u300b"},{"location":"history/the_great_wall/tgw/#_8","title":"\u5b81\u590f","text":"<p>\u9547\u6cbb\u4eca\u5b81\u590f\u94f6\u5ddd\u3002\u7ba1\u8f96\u4e1c\u8d77\u76d0\u6c60\uff0c\u897f\u81f3\u9756\u8fdc\u7684\u957f\u57ce\u9632\u5fa1\u3002 \u201c\u5173\u4e2d\u4e4b\u5c4f\u853d\uff0c\u6cb3\u9647\u4e4b\u5664\u5589\u3002\u201d</p> \u5e74\u4efd \u4fee\u5efa \u6b63\u7edf\u521d \u300c\u6b63\u7edf\u521d\uff0c(\u53f2)\u662d\u4ee5\u5b81\u590f\u5b64\u60ac\u6cb3\u5916\uff0c\u4e1c\u62b5\u7ee5\u5fb7\u4e8c\u5343\u91cc\uff0c\u65f7\u8fdc\u96be\u5b88\uff0c\u8bf7\u4e8e\u82b1\u9a6c\u6c60\u7b51\u54e8\u9a6c\u8425\uff0c\u589e\u8bbe\u5cf0\u5820\uff0c\u76f4\u8fbe\u54c8\u524c\u5140\u901f\u4e4b\u5883\u3002\u8fb9\u5907\u5927\u56fa\u3002\u300d\u300a\u660e\u53f2\u00b7\u53f2\u662d\u4f20\u300b \u6210\u5316\u5341\u5e74 \u300c\u5de1\u629a\u5b81\u590f\u90fd\u5fa1\u53f2\u5f90\u5ef7\u748b\u3001\u9547\u5b88\u90fd\u7763\u8303\u747e\u594f\u7b51\u6cb3\u4e1c\u8fb9\u5899\uff0c\u81ea\u9ec4\u6c99\u5634\u8d77\uff0c\u81f3\u82b1\u9a6c\u6c60\u6b62\uff0c\u957f\u4e09\u767e\u516b\u5341\u4e03\u91cc\u3002\u300d\u300a\u5317\u864f\u4e8b\u8ff9\u300b \u6210\u5316\u5341\u5e74 \u300c\u81ea\u9ec4\u6c99\u5634\u8d77\uff0c\u81f3\u82b1\u9a6c\u6c60\u6b62\uff0c\u957f\u4e09\u767e\u516b\u5341\u4e03\u91cc\u3002\u6210\u5316\u5341\u5e74\u90fd\u5fa1\u53f2\u4f59\u5b50\u4fca\u594f\u7b51\uff0c\u5de1\u629a\u90fd\u5fa1\u53f2\u5f90\u5ef7\u748b\u3001\u603b\u5175\u5b98\u8303\u747e\u529b\u4e3e\u800c\u6210\u4e4b\u3002\u300d\u300a\u5609\u9756\u5b81\u590f\u65b0\u5fd7\u300b \u6210\u5316\u5341\u4e09\u5e74 \u300c\u8bf7\u4fee\u5b81\u590f\u897f\u8def\u6c38\u5b89\u58a9\u81f3\u897f\u6c99\u5634\u4e00\u5e26\u8fb9\u5899\u3002\u300d\u300a\u8bfb\u53f2\u65b9\u8206\u7eaa\u8981\u300b \u6210\u5316\u5341\u4e94\u5e74 \u300c\u5341\u4e00\u6708\uff0c\u7b51\u5b81\u590f\u6cbf\u6cb3\u8fb9\u5899\u300d\u300a\u660e\u4f1a\u8981\u300b \u6b63\u5fb7\u5143\u5e74 \u300c\u603b\u5236\u9655\u897f\u8fb9\u52a1\u5de6\u526f\u90fd\u5fa1\u53f2\u6768\u4e00\u6e05\u5efa\u8bae\u5927\u53d1\u4e01\u592b\uff0c\u5b81\u590f\u5e76\u897f\u5b89\u7b49\u4e8c\u5341\u56db\u536b\u6240\u56db\u4e07\u540d\uff0c\u897f\u5b89\u7b49\u4e03\u5e9c\u4e94\u4e07\u540d\uff0c\u5171\u4e5d\u4e07\u4eba\uff0c\u5e2e\u7b51\u5148\u5e74\u90fd\u5fa1\u53f2\u5f90\u5ef7\u748b\u7b49\u6240\u4fee\u65e7\u5899\uff0c\u9ad8\u539a\u5404\u4e8c\u4e08\uff0c\u5899\u4e0a\u4fee\u76d6\u6696\u94fa\u4e5d\u767e\u95f4\uff0c\u7528\u519b\u56db\u5343\u4e94\u767e\u4eba\u5b88\u4e4b\u3002\u6311\u6d5a\u65e7\u5811\uff0c\u4ea6\u6df1\u9614\u5404\u4e8c\u4e08\u3002\u300d\u300a\u5317\u864f\u4e8b\u8ff9\u300b \u6b63\u5fb7\u4e8c\u5e74 \u300c\u56db\u6708,\u4ec5\u81ea\u4e1c\u800c\u5357\u53ea\u7b51\u4e86\u4e09\u5341\u91cc\u957f\u57ce\uff0c\u4e5d\u4e07\u4e01\u592b\u56e0\u805a\u96c6\u6c72\u7228\u8270\u96be\uff0c\u53c8\u7686\u9732\u5bbf\uff0c\u98ce\u96e8\u65e0\u6240\u907f\uff0c\u591a\u751f\u75be\u75c5\uff0c\u81f3\u6709\u6b7b\u8005\uff0c\u4eba\u5fc3\u6028\u603c\uff0c\u9042\u6298\u7aff\u60ac\u65d7\uff0c\u547c\u566a\u6b32\u6e83\u6563\u3002\u7ba1\u5de5\u5b98\u4f1a\u9a91\u5175\uff0c\u5468\u800c\u5c04\u4e4b\uff0c\u4e43\u6b62\u3002\u300d\u7ed3\u679c\u4e5d\u4e07\u91cc\u4e01\u592b\u53ea\u4fee\u4e86\u82b1\u9a6c\u6c60\u57ce\uff0c\u4fbf\u5404\u56de\u5404\u5904\u4e86\u3002\u300a\u5317\u864f\u4e8b\u8ff9\u300b \u6b63\u5fb7\u4e94\u5e74 \u8d3a\u5170\u5c71\u300c\u6cbf\u5c71\u8bf8\u53e3\uff0c\u867d\u901a\u864f\u9a91\uff0c\u5c1a\u6709\u9669\u53ef\u5b88\uff0c\u5317\u4fa7\u60df\u6253\u7859\u53e3\u3001\u5357\u4fa7\u60df\u8d64\u6728\u65f7\u884d\u65e0\u788d\uff0c\u6253\u7859\u65e7\u6709\u4e09\u5173\uff0c\u81ea\u6b63\u5fb7\u4e94\u5e74\u4ee5\u6765\uff0c\u6e10\u81f3\u9893\u572e\u3002\u300d\u300a\u5609\u9756\u5b81\u590f\u65b0\u5fd7\u300b \u5609\u9756\u5341\u5e74 \u4e09\u8fb9\u603b\u5236\u738b\u743c\u8ba4\u4e3a\uff0c\u5b81\u590f\u6cb3\u4e1c\u957f\u57ce\uff0c\u56e0\u5e74\u4e45\u5931\u4fee\uff0c\u572e\u584c\u4e25\u91cd\uff0c\u53c8\u79bb\u519b\u8425\u8f83\u8fdc\uff0c\u4e8e\u4f5c\u6218\u4e0d\u5229\u3002\u6240\u4ee5\u5c06\u5174\u6b66\u8425\u4ee5\u4e1c\u7684\u957f\u57ce\u5357\u79fb\uff0c\u5e76\u5728\u5899\u5916\u63a7\u6311\u58d5\u5811\uff0c\u79f0\u4e4b\u4e3a\u6df1\u6c9f\u9ad8\u5792\u3002\u603b\u5236\u738b\u743c\u4e8e\u5185\u590d\u7b51\u8fb9\u5899\u4e00\u9053\uff0c\u5b98\u519b\u9042\u5f03\u5916\u8fb9\u4e0d\u5b88\uff0c\u4ee5\u81f4\u8fb9\u5185\u7530\u5730\u8352\u829c\u3002(\u8be5\u6bb5\u957f\u57ce\u4fee\u7b51\u4e8e\u660e\u521d\u81f3\u5f18\u6cbb\u5e74\u95f4) \u300a\u5609\u9756\u5b81\u590f\u65b0\u5fd7\u300b \u5609\u9756\u5341\u56db\u5e74 \u738b\u743c\u5b81\u590f\u6cb3\u4e1c\u957f\u57ce\u4fee\u7b51\u5b8c\u6210\u3002\u300a\u5609\u9756\u5b81\u590f\u65b0\u5fd7\u300b \u5609\u9756\u5341\u4e94\u5e74 \u300c\u4e8e\u5916\u8fb9\u5bf9\u5cb8\u5904\u7b51\u957f\u5824\u4e00\u9053\uff0c\u987a\u6cb3\u76f4\u62b5\u6a2a\u57ce\u5927\u8fb9\u5899\uff0c\u4e3a\u622a\u5957\u864f\u81ea\u4e1c\u8fc7\u6cb3\u4ee5\u5165\u5b81\u590f\u4e4b\u8def\u3002\u300d\u300a\u7687\u660e\u4e5d\u8fb9\u8003\u300b \u5609\u9756\u5341\u4e94\u5e74 \u300c\u5609\u9756\u4e19\u7533\u5e74\u5927\u53f8\u9a6c\u5218\u516c\u603b\u7763\u4e09\u8fb9\u519b\u52a1\uff0c\u6df1\u4ee5\u5b81\u590f\u5931\u9669\u4e3a\u5fe7\uff0c\u547d\u4fee\u8d3a\u5170\u5c71\u4e0a\u8fb9\u5899\u65f6\uff0c\u8d64\u6728\u53e3\u585e\u5c71\u9e93\u6709\u53e4\u5899\u53ef\u8e74\u800c\u503e\u4e5f\u3002\u300d\u300a\u5609\u9756\u5b81\u590f\u65b0\u5fd7\u300b \u9686\u5e86\u4e94\u5e74 \u300c\u7763\u81e3\u738b\u4e4b\u8bf0\u8bf7\u4e8e\u5b81\u590f\u626f\u6728\u5ce1\u65e7\u5821\u6cb3\u53e3\u81f3\u4e94\u65b9\u5bfa\u3001\u5854\u513f\u6e7e\u3001\u767d\u8349\u5ddd\u58a9\u589e\u7b51\u8fb9\u5899\u3001\u58a9\u53f0\u3001\u5927\u5c0f\u5821\u5be8\uff0c\u9a7b\u5c06\u9886\u4e8e\u6b64\uff0c\u4ee5\u904f\u5bc7\u51fa\u5165\u8981\u8def\uff0c\u5e76\u7b51\u4e1c\u897f\u5927\u5c0f\u9698\u53e3\u3002\u300d \u300a\u8bfb\u53f2\u65b9\u8206\u7eaa\u8981\u300b"},{"location":"history/the_great_wall/tgw/#_9","title":"\u56fa\u539f","text":"<p>\u9547\u6cbb\u4eca\u5b81\u590f\u56fa\u539f\u3002\u7ba1\u8f96\u4e1c\u8d77\u5b9a\u8fb9\uff0c\u897f\u81f3\u91d1\u57ce\u7684\u5185\u957f\u57ce\u9632\u5fa1\u3002</p> \u5e74\u4efd \u4fee\u5efa \u6210\u5316\u521d \u300c\u6210\u5316\u521d\uff0c\u5175\u90e8\u5c1a\u4e66\u738b\u590d\u51fa\u89c6\u9655\u897f\u8fb9\u5907\u53ca\u7ecf\u7565\u5b81\u590f\u8fb9\u5907\u65f6\uff0c\u7ed9\u7687\u5e1d\u7684\u594f\u758f\u4e2d\u9053\uff1a\u201c\u81ea\u5b89\u8fb9\u8425\u63a5\u5e86\u9633\uff0c\u81ea\u5b9a\u8fb9\u8425\u63a5\u73af\u5dde\uff0c\u6bcf\u4e8c\u5341\u91cc\u7b51\u58a9\u53f0\u4e00\uff0c\u8ba1\u51e1\u4e09\u5341\u6709\u56db\u3002\u968f\u5f62\u52bf\u4e3a\u6c9f\u5899\uff0c\u5eb6\u606f\u54cd\u76f8\u95fb\uff0c\u6613\u4e8e\u5b88\u5fa1\u3002\u201d\u4e2d\u8def\u7075\u5dde\u4ee5\u5357\u672c\u65e0\u4ead\u71e7\u3002\u4e1c\u897f\u4e8c\u8def\u8425\u5821\u8fbd\u7edd\uff0c\u58f0\u95fb\u4e0d\u5c5e\uff0c\u81f4\u654c\u6bcf\u6df1\u5165\u3002\u4ea6\u8bf7\u5efa\u7f6e\u58a9\u53f0\u5982\u5ef6\u7ee5\uff0c\u8ba1\u4e3a\u53f0\u4e94\u5341\u6709\u516b\u3002\u300d\u300a\u660e\u53f2\u00b7\u738b\u590d\u4f20\u300b \u5f18\u6cbb\u5341\u56db\u5e74 \u660e\u56fa\u539f\u9547\u957f\u57ce\u4e3a\u5f18\u6cbb\u5341\u56db\u5e74\u8bbe\u9547\u4e4b\u540e\uff0c\u6237\u90e8\u5c1a\u4e66\u517c\u53f3\u526f\u90fd\u5fa1\u53f2\u79e6\u7eae\u603b\u5236\u4e09\u8fb9\u519b\u52a1\u65f6\u59cb\u5efa\u3002\u300a\u4e5d\u8fb9\u56fe\u8003\u300b \u5f18\u6cbb\u5341\u4e94\u5e74 \u300c\u79e6\u8944\u6bc5\u603b\u5236\u4e09\u8fb9\uff0c\u7b51\u5185\u8fb9\u4e00\u6761\uff0c\u81ea\u9976\u9633\u754c\u8d77\u897f\u81f3\u5f90\u51b0\u6c34\u4e09\u767e\u91cc\uff0c\u81ea\u5f90\u51b0\u6c34\u8d77\u897f\u81f3\u9756\u864f\u82b1\u513f\u5c94\u6b62\uff0c\u957f\u516d\u767e\u4f59\u91cc\u3002\u300d\u300a\u4e5d\u8fb9\u56fe\u8003\u300b \u5f18\u6cbb\u5341\u4e94\u5e74 \u603b\u5236\u5c1a\u4e66\u79e6\u7eae\u4fee\u7406\u5899\u5811\u4f4e\u6d45\uff0c\u65e5\u4e45\u574d\u574f\u586b\u585e\uff0c\u5957\u864f\u8282\u5e74\u8fc7\u82b1\u9a6c\u6c60\uff0c\u5206\u9053\u6df1\u5165\uff0c\u4e0d\u80fd\u963b\u9694\u3002\u662f\u5e74\u516b\u6708\uff0c\u738b\u743c\u4ee4\u9547\u5b88\u56fa\u5143\u7f72\u90fd\u7763\u4f65\u4e8b\u5218\u6587\u7edf\u9886\u5b98\u5175\u516b\u5343\u56db\u767e\u4f59\u5458\u540d\uff0c\u5de1\u884c\u54cd\u77f3\u6c9f\u7b49\u5904\uff0c\u9632\u5fa1\u5957\u8d3c\u3002\u6311\u6316\u54cd\u77f3\u6c9f\u81f3\u4e0b\u9a6c\u623f\u65e7\u5811\u957f\u4e09\u5341\u91cc\uff0c\u4ff1\u6df1\u4e8c\u4e08\u3001\u9614\u4e8c\u4e08\u4e94\u5c3a\uff0c\u5357\u9762\u5811\u4e0a\u7b51\u5899\uff0c\u8fde\u6c9f\u5171\u9ad8\u4e09\u4e08\u3002\u53c8\u4fee\u7406\u4e0b\u9a6c\u623f\u897f\u63a5\u5e73\u864f\u3001\u9547\u620e\uff0c\u7ecf\u53e4\u57ce\u3001\u6d77\u524c\u90fd\u3001\u897f\u5b89\u5dde\uff0c\u4e94\u5821\u574d\u584c\u8fb9\u5899\u4e00\u767e\u4e8c\u5341\u4e94\u91cc\uff0c\u968f\u5c71\u5c31\u5d16\uff0c\u94f2\u524a\u9661\u5cfb\uff0c\u81f3\u4e5d\u6708\u521d\u4e09\u65e5\u6b21\u7b2c\u4fee\u5b8c\u3002\u53c8\u4e8e\u5e72\u76d0\u6c60\uff0c\u5730\u540d\u9752\u6c99\u5c98\uff0c\u94f2\u5d16\u6311\u6c9f\u957f\u56db\u5341\u91cc\uff0c\u6df1\u9669\u58ee\u56fa\u4ee5\u7edd\u80e1\u864f\u897f\u5165\u4e34\u3001\u56fa\u4e4b\u8def\uff0c\u53ca\u5e72\u76d0\u6c60\u4ee5\u897f\u6805\u585e\u5d16\u5811\u4e8c\u5341\u4e5d\u91cc\uff0c\u4ee4\u9756\u864f\u5b88\u5907\u90fd\u6307\u6325\u8d75\u6636\u4fee\u7406\u5b8c\u5907\u3002\u300a\u5317\u864f\u4e8b\u8ff9\u300b \u5f18\u6cbb\u5341\u516b\u5e74 \u603b\u5236\u6768\u516c\u4e00\u6e05\u4fee\u8fb9\u56db\u5341\u4f59\u91cc\u3002\u300a\u56fa\u539f\u5dde\u5fd7\u300b \u6b63\u5fb7\u5143\u5e74 \u6768\u4e00\u6e05\u88ab\u4efb\u547d\u4e3a\u5ef6\u7ee5\u3001\u5b81\u590f\u3001\u7518\u8083\u603b\u5236\u4e09\u8fb9\u519b\u52a1\u524d\u540e\u4ea6\u4fee\u7b51\u8fc7\u56fa\u539f\u9547\u957f\u57ce\u3002\u300c\u603b\u5236\u5c1a\u4e66\u79e6\u7eae\u4ec5\u4fee\u56db\u4e94\u5c0f\u5821\u53ca\u9756\u864f\u81f3\u73af\u5e86\u6cbb\u5811\u4e03\u767e\u91cc\uff0c\u8c13\u53ef\u65e0\u60a3\u3002\u4e0d\u4e00\u4e8c\u5e74\uff0c\u5bc7\u590d\u6df1\u5165\u3002\u662f\u7eae\u6240\u4fee\u4e0d\u8db3\u634d\u654c\u3002\u300d\u300c\u4fee\u6d5a\u5899\u5811\uff0c\u4ee5\u56fa\u8fb9\u9632\uff1b\u589e\u8bbe\u8859\u6240\uff0c\u4ee5\u58ee\u8fb9\u5175\uff1b\u7ecf\u7406\u7075\u3001\u590f\uff0c\u4ee5\u5b89\u5185\u9644\uff1b\u6574\u996c\u97e6\u5dde\uff0c\u4ee5\u904f\u5916\u4fb5\u3002\u300d\u671d\u5ef7\u6279\u51c6\u4fee\u8fb9\u5efa\u8bae\u53d1\u5e11\u91d1\u6570\u5341\u4e07\u7b51\u957f\u57ce\uff0c\u5305\u62ec\u56fa\u539f\u9547\u77f3\u6d9d\u6c60\u81f3\u5b9a\u8fb9\u8425\u4e00\u767e\u516d\u5341\u4e09\u91cc\u957f\u57ce\u3002\u300a\u660e\u53f2\u00b7\u6768\u4e00\u6e05\u4f20\u300b \u5609\u9756\u56db\u5e74 \u300c\u603b\u5236\u6768\u516c\u4e00\u6e05\u7b51\u4fee\u4e1c\u5317\u5811\u5c71\uff0c\u589e\u7b51\u5173\u57ce\uff0c\u5cbf\u7136\u5c71\u5dc5\u5d16\u581e\uff0c\u79f0\u5929\u9669\u7109\u3002\u300d \u300a\u56fa\u539f\u5dde\u5fd7\u300b \u5609\u9756\u4e5d\u5e74 \u738b\u743c\u4efb\u4e09\u8fb9\u603b\u7763\u65f6\uff0c\u201c\u81ea\u73af\u53bf\u840c\u57ce\u897f\u54cd\u77f3\u6c9f\u81f3\u9756\u864f\u536b\u5730\u540d\u82b1\u513f\u5c94\uff0c\u957f\u516d\u767e\u4e09\u5341\u516d\u91cc\uff0c\u7cfb\u9655\u897f\u56fa\u539f\u9547\u8be5\u7ba1\u8fb9\u754c\u3002\u201d \u300a\u5317\u864f\u4e8b\u8ff9\u300b \u5609\u9756\u5341\u4e94\u5e74 \u4e09\u8fb9\u603b\u5236\u5218\u5929\u548c\u5206\u6790\u56fa\u539f\u9547\u8fb9\u5907\u5f62\u52bf\u300c\u56fa\u539f\u4e3a\u5957\u90e8\u6df1\u5165\u4e4b\u51b2\uff0c\u524d\u5c1a\u4e66\u79e6\u7eae\u4fee\u7b51\u8fb9\u5899\uff0c\u5ef6\u88a4\u5343\u91cc\u3002\u7136\u5f7c\u5927\u4e3e\u5165\u5bc7\uff0c\u5c1a\u4e0d\u80fd\u652f\u3002\u53ca\u6768\u4e00\u6e05\u7b51\u767d\u9a6c\u57ce\u5821\uff0c\u800c\u540e\u4e1c\u8def\u4e4b\u5bc7\u4e0d\u81f3\u3002\u738b\u743c\u7b51\u4e0b\u9a6c\u623f\u5173\uff0c\u800c\u540e\u4e2d\u8def\u4e4b\u60a3\u5f97\u514d\u3002\u552f\u897f\u8def\u81ea\u5f90\u51b0\u6c34\uff0c\u81f3\u9e23\u6c99\u5dde\u6cb3\u5cb8\u53ef\u4e8c\u767e\u4e8c\u5341\u91cc\u3002\u603b\u5175\u4efb\u6770\u8bae\u4e8e\u6b64\u5730\u4fee\u7b51\u65b0\u8fb9\u4e00\u9053\uff0c\u8fc1\u7ea2\u5bfa\u5821\u4e8e\u8fb9\u5185\uff0c\u64a4\u65e7\u58a9\u519b\u58eb\uff0c\u4f7f\u5b88\u65b0\u8fb9\u3002\u300d\u300a\u8bfb\u53f2\u65b9\u8206\u7eaa\u8981\u300b \u5609\u9756\u5341\u516d\u5e74 \u5175\u90e8\u5de6\u4f8d\u90ce\u5218\u5929\u548c\u603b\u5236\u4e09\u8fb9\u519b\u52a1\u65f6\uff0c\u56fa\u539f\u9547\u603b\u5175\u5b98\u4efb\u6770\u6240\u7b51\u5f90\u51b0\u6c34\u81f3\u9e23\u6c99\u5dde\u65b0\u8fb9\u3002 \u300a\u56fa\u539f\u5dde\u5fd7\u300b \u5609\u9756\u5341\u516d\u5e74 \u300c\u603b\u5236\u5218\u5929\u548c\u4fee\u5e72\u6c9f\u3001\u5e72\u6da7\u516d\u5341\u4f59\u91cc\uff0c\u6311\u7b51\u58d5\u5824\u5404\u4e00\u9053\u3002\u590d\u81ea\u5f90\u51b0\u6c34\u8fe4\u9e23\u6c99\u5dde\u9ec4\u6cb3\u5cb8\u4fee\u4e00\u767e\u4e8c\u5341\u4e94\u91cc\uff0c\u589e\u847a\u5973\u5899\uff0c\u59cb\u9669\u5cfb\u3002\u300d\u300a\u56fa\u539f\u5dde\u5fd7\u300b"},{"location":"history/the_great_wall/tgw/#_10","title":"\u7518\u8083","text":"<p>\u9547\u6cbb\u4eca\u7518\u8083\u5f20\u6396\u3002\u7ba1\u8f96\u4e1c\u8d77\u91d1\u57ce\uff0c\u897f\u81f3\u5609\u5cea\u5173\u7684\u957f\u57ce\u9632\u5fa1\u3002</p> \u5e74\u4efd \u4fee\u5efa \u6d2a\u6b66\u4e94\u5e74 \u300c\u5b8b\u56fd\u516c\u51af\u80dc\u5c06\u5175\u7565\u5b9a\u6cb3\u897f\u3002\u7518\u8083\u9547\u5373\u6c49\u6cb3\u897f\u56db\u90e1\u5730\u3002\u660e\u521d\uff0c\u4e0b\u6cb3\u897f\uff0c\u5f03\u6566\u714c\uff0c\u5212\u5609\u5cea\u5173\u4e3a\u754c\u3002\u7531\u5e84\u6d6a\u8fe4\u5357\u4e09\u767e\u4f59\u91cc\u4e3a\u59d1\u85cf\u5730\uff0c\u7f6e\u9547\u756a\u536b\u3002\u53c8\u8bbe\u7518\u5dde\u7b49\u4e94\u536b\u4e8e\u5f20\u6396\uff0c\u8083\u5dde\u536b\u4e8e\u9152\u6cc9\uff0c\u5170\u5dde\u536b\u4e8e\u91d1\u57ce\uff0c\u7686\u5c6f\u5175\u62d2\u5b88\uff0c\u5168\u9547\u4e4b\u5730\u51e1\u4e8c\u5343\u91cc\u3002\u300d\u300a\u91cd\u4fee\u8083\u5dde\u65b0\u5fd7\u300b \u5609\u9756\u4e8c\u5341\u4e94\u5e74 \u6768\u535a\u300c\u8d85\u62dc\u53f3\u4f65\u90fd\u5fa1\u53f2\uff0c\u5de1\u629a\u7518\u8083\u3002\u5927\u5174\u5c6f\u5229\uff0c\u8bf7\u52df\u6c11\u57a6\u7530\uff0c\u6c38\u4e0d\u5f81\u79df\u3002\u53c8\u4ee5\u6687\u4fee\u7b51\u8083\u5dde\u6986\u6797\u6cc9\u53ca\u7518\u5dde\u5e73\u5ddd\u5883\u5916\u5927\u82a6\u6cc9\u8bf8\u5904\u58a9\u53f0\u3002\u300d\u300a\u660e\u53f2\u00b7\u6768\u535a\u4f20\u300b \u5609\u9756\u4e8c\u5341\u4e03\u5e74 \u300c\u81ea\u4e1c\u4e50\u5927\u53e3\u5b50\u8fe4\u5317\u4eba\u7956\u5c71\u81f3\u7834\u5c71\u7b49\u53e3\u4e00\u5341\u4e09\u5904\uff0c\u864f\u9a91\u51fa\u6ca1\u65e0\u5e38\uff0c\u5c24\u4e3a\u8981\u5bb3\u3002\u5609\u9756\u4e8c\u5341\u4e03\u5e74\uff0c\u5de1\u629a\u90fd\u5fa1\u53f2\u6768\u535a\u5de1\u5386\u8bf8\u9669\uff0c\u4e8e\u8bf8\u53e3\u5404\u8bbe\u58d5\u5811\u3001\u67de\u5792\u4ee5\u627c\u5bc7\u5bb3\u3002\u300d\u300a\u8083\u9547\u5fd7\u300b \u9686\u5e86\u516d\u5e74 \u300c\u4e1c\u3001\u897f\u3001\u5357\u3001\u5317\u56db\u8def\uff0c\u5609\u5cea\u5173\u8d77\u9547\u5937\u5343\u6237\u6240\u6b62\uff0c\u8fb9\u5899\u3001\u5d16\u67de\u4e00\u4e07\u4e09\u5343\u516d\u767e\u4e09\u5341\u4e08\uff0c\u8ba1\u4e03\u5341\u4e94\u91cc\u4e8c\u767e\u516d\u5341\u6b65\uff0c\u90fd\u5fa1\u53f2\u5ed6\u9022\u8282\u8bae\u9898\uff0c\u9686\u5e86\u516d\u5e74\u4fee\u5b8c\u3002\u300d\u300a\u91cd\u4fee\u8083\u5dde\u65b0\u5fd7\u300b \u9686\u5e86\u516d\u5e74 \u300c\u9547\u57ce\u897f\u3001\u5317\u3001\u4e1c\u3001\u5357\u56db\u8def\uff0c\u677f\u6865\u5821\u8d77\u81f3\u660e\u6c99\u5821\u6b62\uff0c\u8fb9\u5899\u3001\u58d5\u67de\u4e8c\u5343\u516b\u767e\u4e00\u5341\u4e8c\u4e08\uff0c\u8ba1\u4e00\u5341\u4e94\u91cc\u4e8c\u767e\u4e8c\u5341\u56db\u6b65\uff0c\u90fd\u5fa1\u53f2\u5ed6\u9022\u8282\u8bae\u9898\u3002\u9686\u5e86\u516d\u5e74\u4fee\u5b8c\u3002\u300d\u300a\u8083\u9547\u5fd7\u300b \u4e07\u5386\u5143\u5e74 \u300c\u4fee\u5b8c\u4e1c\u4e50\u3001\u6d2a\u6c34\u3001\u5c3e\u7a91\u3001\u7518\u5cfb\u3001\u68a8\u56ed\u3001\u5e73\u5ddd\u3001\u660e\u6c99\u7b49\u5821\u5899\u3001\u58d5\u5d16\u3001\u69a8\u53e0\u6c34\u56db\u767e\u4e5d\u5341\u4e94\u4e08\uff0c\u5185\u8fb9\u5899\u5e95\u9614\u4e5d\u5c3a\u3001\u9876\u9614\u4e94\u5c3a\uff0c\u5b9e\u53f0\u4e00\u4e08\u4e8c\u5c3a\uff0c\u579b\u5899\u4e09\u5c3a\uff0c\u5171\u9ad8\u4e00\u4e08\u4e94\u5c3a\u3002\u58d5\u53e3\u9614\u6df1\u5404\u4e8c\u4e08\u3001\u5e95\u9614\u4e00\u4e08\uff0c\u5d16\u67de\u9ad8\u3001\u9614\u3001\u6df1\u5404\u4e09\u4e08\uff0c\u4ff1\u4e0d\u652f\u94b1\u7cae\u3002\u300d\u300a\u8083\u9547\u5fd7\u300b \u4e07\u5386\u5143\u5e74 \u300c\u81ea\u65b0\u57ce\u513f\u4e1c\uff0c\u957f\u57ce\u897f\u5934\u8d77\uff0c\u5609\u5cea\u5173\u5317\u8fb9\u5899\u65b0\u8170\u58a9\u6b62\uff0c\u8fb9\u5899\u4e00\u4e07\u4e5d\u767e\u516b\u5341\u56db\u4e08\uff0c\u5e95\u9614\u516b\u5c3a\u3001\u9876\u9614\u4e8c\u5c3a\u4e94\u5bf8\uff0c\u5b9e\u53f0\u9ad8\u4e00\u4e08\uff0c\u579b\u5899\u4e8c\u5c3a\uff0c\u5171\u9ad8\u4e00\u4e08\u4e8c\u5c3a\uff0c\u968f\u5899\u5927\u3001\u4e2d\u58a9\u4e8c\u5ea7\uff0c\u4e07\u5386\u5143\u5e74\u4fee\u5b8c\u3002\u300d\u300a\u91cd\u4fee\u8083\u5dde\u65b0\u5fd7\u300b \u4e07\u5386\u4e8c\u5e74 \u300c\u81ea\u4e0b\u53e4\u57ce\u8fe4\u5317\u4e1c\u957f\u57ce\u89d2\u58a9\u8d77\uff0c\u9756\u864f\u58a9\u4e1c\u58d5\u5934\u3001\u4e34\u6c34\u6cb3\u5317\u5cb8\u6b62\uff0c\u53c8\u81ea\u5609\u5cea\u5173\u8d77\uff0c\u9547\u5937\u6240\u6b62\uff0c\u8fb9\u5899\u3001\u5d16\u67de\u4e8c\u5343\u516d\u767e\u56db\u5341\u516d\u4e08\u3002\u8fb9\u5899\u5e95\u9614\u4e00\u4e08\u3001\u9876\u9614\u516d\u5c3a\uff0c\u5b9e\u53f0\u9ad8\u4e00\u4e08\u4e8c\u5c3a\uff0c\u579b\u5899\u4e09\u5c3a\uff0c\u5171\u9ad8\u4e00\u4e08\u4e94\u5c3a\uff0c\u5d16\u67de\u9ad8\u4e09\u4e08\u3001\u9614\u4e8c\u4e08\u3002\u4e07\u5386\u4e8c\u5e74\u4fee\u5b8c\u3002\u300d\u300a\u91cd\u4fee\u8083\u5dde\u65b0\u5fd7\u300b \u4e07\u5386\u4e8c\u5e74 \u300c\u4fee\u5b8c\u5e73\u5ddd\u3001\u4e09\u575d\u3001\u5b64\u5c71\u513f\u3001\u5e73\u864f\u7b49\u58a9\u8d77\uff0c\u5e2e\u63a5\u8fb9\u5899\u957f\u4e00\u5343\u4e00\u767e\u516b\u5341\u4e03\u4e08\u3002\u300d\u65b0\u52a0\u539a\u3001\u52a0\u9ad8\u90e8\u5206\u8fb9\u5899\u300c\u5e95\u9614\u4e94\u5c3a\u3001\u9876\u9614\u4e09\u5c3a\uff0c\u5b9e\u53f0\u9ad8\u4e09\u5c3a\u6216\u56db\u5c3a\uff0c\u579b\u53e3\u4e09\u5c3a\u3002\u8fde\u65e7\u5899\u5171\u5e95\u9614\u4e5d\u5c3a\u3001\u9876\u9614\u4e94\u5c3a\u3001\u9ad8\u4e00\u4e08\u4e03\u5c3a\u3002\u300d\u300a\u8083\u9547\u5fd7\u300b \u4e07\u5386\u4e8c\u5341\u516d\u5e74 \u4ee5\u677e\u5c71\u3001\u5e73\u5b9a\u8bae\u7b51\u65b0\u8fb9\u3002\u5e9c\u540c\u77e5\u51af\u8be2\u7b49\uff0c\u8e0f\u770b\u5f97\u677e\u5c71\u53cc\u5b50\u58a9\u4ee5\u4e1c\u81f3\u7ea2\u6c34\u6cb3\u56db\u5341\u91cc\uff0c\u6709\u6c34\u53ef\u4ee5\u7b51\u5899\u3002\u7ea2\u6c34\u6cb3\u4ee5\u4e1c\u4e09\u5341\u91cc\uff0c\u5177\u77f3\uff0c\u5c71\u65e0\u571f\uff0c\u4e0d\u582a\u6311\u7b51\uff0c\u5e94\u780c\u77f3\u5899\u3002\u81ea\u6ee9\u58a9\u81f3\u6c38\u5b89\u5821\u7d22\u6865\u4e09\u5341\u91cc\uff0c\u5ddd\u9669\u95f4\u65ad\uff0c\u6216\u7b51\u5899\uff0c\u6216\u6311\u6d5a\uff0c\u5404\u76f8\u4fbf\u5b9c\u3002\u65b0\u8fb9\u81ea\u9756\u864f\u536b\u53bf\u9ec4\u6cb3\u7d22\u6865\u8d77\u81f3\u5e84\u6d6a\u53bf\u754c\u571f\u95e8\u5ddd\uff0c\u5171\u957f\u56db\u767e\u91cc\uff0c\u800c\u5170\u9756\u3001\u5e84\u6d6a\u5343\u56db\u767e\u91cc\u4e4b\u51b2\u8fb9\u59cb\u5b89\u3002\u7b2c\u82a6\u5858\u3001\u4e09\u773c\u4e95\u7b49\u5904\uff0c\u571f\u758f\u6613\u572e\uff0c\u65f6\u8d39\u4fee\u7b51\uff0c\u4ecd\u6309\u660e\u521d\u65e7\u5740\uff0c\u81ea\u9547\u756a\u76f4\u63a5\u5b81\u590f\u4e2d\u536b\u3002\u300a\u5170\u5dde\u5e9c\u5fd7\u300b"},{"location":"history/the_right_side_of_history/note1/","title":"The Pursuit of Happiness","text":"<p>Politics is about working to build the framework for the pursuit of happiness, not the achievement of it; politics helps us establish the preconditions necessary for happiness, but can't provide happiness in and of itself.</p> <p>\u8eab\u5fc3\u7684\u6109\u60a6\uff0c\u7ecf\u6d4e\u751f\u6d3b\u7684\u7a33\u5b9a\u5bf9\u4e8e\u4eba\u751f\u7684\u5e78\u798f\u7684\u786e\u5f88\u91cd\u8981\uff0c\u4f46\u5e76\u975e\u662f\u957f\u4e45\u53ef\u6301\u7eed\u7684\u5e78\u798f\u3002\u6362\u8a00\u4e4b\uff0c\u5728Ben Shapiro\u8fd9\u6837\u7684\u8654\u8bda\u7684\u72b9\u592a\u6559\u5f92\u800c\u8a00\uff0c\u8fd9\u4e9b\u8ffd\u6c42\u90fd\u201c\u4e0d\u591f\u9ad8\u7ea7\u201d\u3002</p>"},{"location":"history/the_right_side_of_history/note1/#happiness-is-moral-purpose","title":"Happiness is moral purpose","text":"<p>What does the Bible mean by simcha? It means right action in accordance with God's will.</p> <p>\u9664\u72b9\u592a\u6559\u4e0e\u57fa\u7763\u6559\u4e4b\u5916\uff0c\u53e4\u5e0c\u814a\u4e9a\u91cc\u58eb\u591a\u5fb7\u4e5f\u5f3a\u8c03\u9053\u5fb7\u76ee\u6807\u3002\u4e9a\u91cc\u58eb\u591a\u5fb7\u4e5f\u4e0d\u5c06\u5e78\u798f\u89c6\u4e3a\u4e34\u65f6\u7684\u6b22\u4e50\u3002\u4e9a\u91cc\u58eb\u591a\u5fb7\u9996\u5148\u9700\u8981\u5b9a\u4e49\u4ec0\u4e48\u662f\u201c\u597d\u201d(\u5178\u578b\u7684\u53e4\u5e0c\u814a\u201c\u4e09\u6bb5\u8bba\u201d\u54f2\u5b66)</p> <p>To Aristotle, \"good\" wasn't a subjective term, something for each of us to define for ourselves; \"good\" was a statement of objective fact. Something was \"good\" if it fulfilled its purpose. A good watch tells time; a good dog defends its master. What does a good human being do? Acts in accordance with right reason. What makes human beings unique, says Aristotle, is our capacity to reason, and to use that reason to investigate the nature of the world and our purpose in it. Act well, and in accordance with your value as a rational being, and you will be happy. We find moral purpose in cultivating our reason, and using that reason to act virtuously; pursuing moral purpose makes us \"great-souled\".</p> <p>\u5723\u7ecf\u4e0e\u53e4\u5e0c\u814a\u54f2\u5b66\u5728\u6b64\u5904\u5408\u6d41\uff0c\u5171\u540c\u5b9a\u4e49\u51fa\u4eba\u7684\u4ef7\u503c\u5c31\u662f\u8ffd\u6c42\u66f4\u4e3a\u5d07\u9ad8\u7684\u76ee\u6807\uff0c\u6216\u662f\u53bb\u611f\u53d7\u5bdf\u89c9\u5b87\u5b99\u7684\u672c\u8d28</p> <p>Bible commands us to serve God with happiness and identifies that moral purpose with happiness; Aristotle suggests that it is impossible to achieve happiness without virtue, which means acting in accordance with a moral purpose that rational human beings can discern from the nature of the universe.</p>"},{"location":"history/the_right_side_of_history/note1/#the-necessity-for-individual-moral-purpose","title":"The necessity for individual moral purpose","text":"<p>\u5728\u300a\u6c49\u8c1f\u62c9\u6bd4\u6cd5\u5178\u300b\u4e2d\u8bb0\u8f7d\uff0c\u53ea\u6709\u56fd\u738b\u662f\u6839\u636e\u795e\u7684\u5f62\u8c61\u521b\u9020\u7684\uff0c\u8ddd\u79bb\u56fd\u738b\u8d8a\u8fd1\u5219\u62e5\u6709\u6743\u5229\u8d8a\u591a\u3002\u4f46\u662f\u5728\u5723\u7ecf\u4e2d\uff1a</p> <p>Genesis 1:26: we are all made in God's image.</p> <p>\u4e0d\u8bba\u662f\u56fd\u738b\u4ea6\u6216\u662f\u541b\u4e3b\u8fd8\u662f\u5e73\u6c11\uff0c\u6240\u6709\u4eba\u5728\u72b9\u592a-\u57fa\u7763\u6559\u4e49\u4e2d\u90fd\u662f\u4e0a\u5e1d\u6839\u636e\u81ea\u5df1\u7684\u5f62\u8c61\u521b\u9020\u7684\u3002</p> <p>The root of our relationship with other people is our relationship with the Divine Creator who endowed us with our value, and who insists that we seek Him out.</p> <p>Atomistic individualism has a tendency to drift toward self-justifying oppression of others.</p> <p>\u539f\u5b50\u5316\u7684\u4e2a\u4eba\u4e3b\u4e49\u503e\u5411\u4e8e\u81ea\u6211\u8fa9\u62a4\u5730\u538b\u8feb\u4ed6\u4eba(zero-sum???)</p>"},{"location":"history/the_right_side_of_history/note1/#the-necessity-for-individual-capacity","title":"The necessity for individual capacity","text":"<p>Finally, we must believe that we are pursuing true goals--not merely effective ones. Darwinian evolution leaves no room for the true; it only leaves room for the evolutionarily beneficial. Survival of the fittest isn't a moral principle; survival itself isn't a moral proposition. If it were beneficial to us to kill babies and eat them, that would not make it moral; if it were beneficial for us to calculate that 2+2=5, it would not make it true. But we care about both the moral and the true, and that requires a baseline assumption: that we can discover the moral and the true.</p> <p>\u533a\u5206\u4ec0\u4e48\u662f\u201c(\u9053\u5fb7\u4e0a)\u6b63\u786e\u7684\u201d\u548c\u4ec0\u4e48\u662f\u201c\u6709\u5229\u7684\u201d\u3002\u81f3\u5c11\u5728\u4e2d\u56fd\u7684\u4f20\u7edf\u4e2d\u4e5f\u6709\u8fd9\u79cd\u8981\u6c42\uff0c\u6240\u8c13\u201c\u541b\u5b50\u4e0d\u98df\u55df\u6765\u4e4b\u98df\u201d\u6216\u662f\u201c\u8eab\u6b7b\u4e8b\u5c0f\uff0c\u5931\u8282\u4e8b\u5927\u201d\uff0c\u4e00\u4e2a\u7eaf\u7cb9\u8ffd\u9010\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u793e\u4f1a\u7684\u7ed3\u5c40\u52bf\u5fc5\u4f1a\u662f\u793e\u4f1a\u7684\u74e6\u89e3\u3002\u5bf9\u4e8e\u4e00\u4e2a\u793e\u4f1a\u800c\u8a00\uff0c\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u9700\u8981\u67d0\u79cd\u8d85\u8131\u4e16\u4fd7\u5229\u76ca\u4e4b\u5916\u7684\u4e1c\u897f\u7ef4\u7cfb\u7684\uff0c\u5bf9\u4e8e\u72b9\u592a-\u57fa\u7763\u6559\u793e\u4f1a\u800c\u8a00\uff0c\"all are made in God's image\"\u5c06\u5176\u5851\u9020\u6210\u4e3a\u4e00\u4e2a\u5171\u540c\u4f53\u3002\u5bf9\u6c49\u4eba\u800c\u8a00\uff0c\u4e09\u7eb2\u4e94\u5e38\u7684\u793e\u4f1a\u4e60\u4fd7\u4e0e\u534e\u5937\u79e9\u5e8f\u5c06\u6c49\u4eba\u5851\u9020\u6210\u4e00\u4e2a\u5171\u540c\u4f53\u3002</p>"},{"location":"history/the_right_side_of_history/note1/#the-necessity-for-communal-moral-purpose","title":"The necessity for communal moral purpose","text":"<p>The best countries -- and the best societies -- are those where citizens are virtuous enough to sacrifice for the common good but unwilling to be forced to sacrifice for the \"greater\" good.</p> <p>That's dangerous stuff. It's tempting to mobilize our ardor for collective mobilization and use it as a state-wielded club to force individual virtue, or to force large-scale change. Tyranny rarely begins with jackboots; it usually begins with ardent wishes for a better future, combined with an unfailing faith in the power of mass mobilization.</p> <p>So, what does positive communal capacity look like? It looks like a governmental system capable of mobilizing to stop external threats, but unable to threaten individual liberties; it looks like a social fabric powerful enough to support community members, confident enough to avoid the tools of governmental compulsion. Few governments in human history have met that standard.</p> <p>Communal capacity must somehow make room for us to pursue our individual moral purposes and exercise our individual capacity while also providing us the means to work together toward communal moral goals.</p>"},{"location":"history/the_right_side_of_history/note1/#the-ingredients-for-happiness","title":"The ingredients for happiness","text":"<p>We receive our notions of Divine meaning from a three-millennia-old lineage stretching back to the ancient Jews; we receive our notions of reason from a twenty-five-hundred-year-old lineage stretching back to the ancient Greeks.</p> <p>\u4ece\u53e4\u72b9\u592a\u4eba\u83b7\u5f97\u7684\u795e\u5723\u6027\u662f\u5c3d\u53ef\u80fd\u5730\u5bfb\u627e\u4e0a\u5e1d\uff0c\u63a5\u8fd1\u4e0a\u5e1d\u3002(\u76ee\u6807)\uff1b</p> <p>\u4ece\u53e4\u5e0c\u814a\u4eba\u83b7\u5f97\u7684\u7406\u6027\u5de5\u5177(\u4e0d\u8fc7\u53e4\u5e0c\u814a\u4eba\u662f\u4f7f\u7528\u7406\u6027\u53bb\u63a2\u6c42the nature of the universe\uff0c\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770bthe nature of the universe\u4e5f\u662f\u4e0a\u5e1d\u7684\u53e6\u4e00\u79cd\u5f62\u5f0f\u3002)\u3002</p> <p>\u5c06\u4e8c\u8005\u7ed3\u5408\u4e00\u4e0b\u5c31\u662f\uff0c\u4f7f\u7528\u53e4\u5e0c\u814a\u4eba\u7684\u7406\u6027\u5de5\u5177\u53bb\u4e0d\u65ad\u63a5\u8fd1\u4e0a\u5e1d\u7684\u8fc7\u7a0b\u5c31\u662fthe pursuit of happiness\uff0c\u5bf9\u4e8eBen Shapiro\u800c\u8a00\uff0c\u5c31\u662f\u4e00\u79cd\u9ad8\u7ea7\u7684\u5e78\u798f\u3002</p>"},{"location":"history/the_right_side_of_history/note2/","title":"1 From the Mountaintop","text":"<p>You may seek to appease the gods through sacrifices, but they're as volatile and uncaring as other human beings. Those gods have invested kings and potentates with power; you are a commoner, trying to scratch your life from the dirt. You comfort yourself with the things around you, with simple pleasures; perhaps you even find communal meaning in service to the regime. But you are essentially a cork, bobbing on the eddies of an ocean you do not control - an ocean no one truly controls.</p> <p>\u975e\u72b9\u592a-\u57fa\u7763\u6559\u7684\u5b97\u6559\u4e0b\u7684\u751f\u6d3b\u65b9\u5f0f\uff0c\u795e\u4e0d\u8bb2\u89c4\u5219\u559c\u6012\u65e0\u5e38\uff0c\u4e2a\u4eba\u7684\u4ef7\u503c\u4f9d\u9644\u4e8e\u653f\u6743\u3002</p> <p>First, Judaism claimed that God was unified, that a master plan stood behind everything.</p> <p>Second, Judaism stated that human beings were held to particular behavioral standards for moral, not utilitarian reasons.</p> <p>Third, Judaism claimed that history progressed: that revelation was the beginning, but it was not the end, that man had a responsibility to pursue God and bring about a redemption of mankind.</p> <p>Finally, Judaism claimed that God had endowed man with choice, that men were responsible for their choices, and that our choices mattered.</p>"},{"location":"history/the_right_side_of_history/note2/#gods-ordered-universe","title":"God's ordered universe","text":"<p>The vast majority of religions prior to Judaism were polytheistic. That's not because polytheists were fools. It's actually because polytheism is sophisticated and natural in many ways.</p> <p>Polytheism is sophisticated in its willingness to absorb new, strange gods.</p> <p>\u53e4\u5e0c\u814a\u3001\u53e4\u57c3\u53ca\u3001\u53e4\u7f57\u9a6c\u90fd\u662f\u591a\u795e\u6559\u7cfb\u7edf\u3002\u76f8\u53cd\uff0c\u72b9\u592a\u6559\u662f\u4e00\u795e\u6559\uff0c\u5bf9\u4e8e\u5176\u4ed6\u65cf\u7fa4\u7684\u4fe1\u4ef0\u6709\u7740\u6700\u4f4e\u7a0b\u5ea6\u7684\u5bb9\u5fcd\uff0c\u6216\u8bb8\u4e5f\u662f\u72b9\u592a\u4e4b\u540e\u4e0d\u53d7\u4eba\u5f85\u89c1\u7684\u539f\u56e0\u4e4b\u4e00\u3002</p> <p>Paganism recognizes that the universe is a chaotic place, one we can't fully understand. Pagan religious creation stories demonstrate colorfully how such beliefs manifest. The plethora of gods were created to explain a world without rules. In that way, polytheism is more pessimistic and more cynical than Judeo-Christian monotheism. Polytheism is rooted in a hardheaded belief in that which we can see. </p> <p>\u591a\u795e\u6559\u7684\u7279\u70b9\uff1a\u65e0\u89c4\u5219\u4f46\u662f\u4e0d\u62bd\u8c61\uff0c\u53ef\u4ee5\u8bf4\u662f\u5341\u5206\u7684\u4e16\u4fd7\u3002\u65e0\u89c4\u5219\u5728\u4e8e\u591a\u795e\u6559\u7684\u4f53\u7cfb\u901a\u8fc7\u521b\u9020\u65b0\u7684\u795e\u89e3\u91ca\u65e7\u7684\u795e\uff0c\u4e0d\u8bba\u662f\u521b\u4e16\uff0c\u8fd8\u662f\u5404\u79cd\u81ea\u7136\u73b0\u8c61\u90fd\u662f\u795e\u7684\u4f5c\u7528\uff0c\u548c\u4eba\u6ca1\u6709\u5173\u7cfb\u3002\u4e0d\u62bd\u8c61\u5728\u4e8e\uff0c\u591a\u795e\u6559\u7684\u795e\u5723\u6027\u53d6\u51b3\u4e8e\u8089\u773c\u53ef\u89c1\u7684\u201c\u5947\u89c2\u201d\uff0c\u800c\u6b64\u7c7b\u201c\u5947\u89c2\u201d\u662f\u7ed9\u795e\u7528\u7684\uff0c\u4e0d\u662f\u7ed9\u4eba\u7528\u7684\u3002</p> <p>Judaism claimed that God was now singular. Judaism claimed that God had rules - and that He abide by those rules. The universe wasn't random; the rules were generally discoverable and largely understandable. The Bible isn't a set of just-so stories designed to explain why the rain falls and the sun shines. Instead, the Bible lays forth, for the first time, an argument for the internal logic of the universe. God, according to the Bible, worked through a singular, unified system; nature operated according to a set of predictable rules from which God could stray if He so chose.</p> <p>\u72b9\u592a\u6559\u76f8\u8f83\u4e8e\u591a\u795e\u6559\u5728\u4e8e\uff0c\u5176\u8ba4\u4e3a\u4e0a\u5e1d\u662f\u5355\u4e00\uff0c\u4e14\u201c\u8bb2\u7406\u7684\u201d\u3002\u4e0d\u4f46\u662f\u4eba\u8981\u9075\u5b88\u89c4\u5219\uff0c\u4e0a\u5e1d\u672c\u8eab\u4e5f\u662f\u4f9d\u636e\u8fd9\u5957\u89c4\u5219\u521b\u4e16\uff0c\u4e14\u4e0a\u5e1d\u81ea\u8eab\u4e5f\u8981\u9075\u5b88\u8fd9\u5957\u89c4\u5219\u3002\u6b63\u56e0\u4e3a\u6709\u6b64\u7c7b\u9700\u8981\u5171\u540c\u9075\u5b88\u7684\u89c4\u5219\uff0c\u4eba\u4e0e\u4e0a\u5e1d\u662f\u80fd\u591f\u5bf9\u8bdd\u7684\uff0c\u4e5f\u662f\u80fd\u591f\u4e89\u8fa9\u7684\u3002</p>"},{"location":"ios/iosstanford/lec1/","title":"Lecture 1","text":"<p>Content View</p> <pre><code>import SwiftUI\n\nstruct ContentView: View {\n  var body: some View {\n    ZStack {\n      RoundedRectangle(cornerRadius: 5)\n        .stroke(lineWidth: 3)\n      Text(\"Hello, World!\")\n    }\n    .padding(.horizontal)\n    .foregroundColor(.red)\n  }\n}\n\nstruct ContentView_Preview: PreviewProvider {\n  static var previews: some View {\n    ContentView()\n  }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec2/","title":"Lecture 2","text":"<p>Content View</p> <pre><code>import SwiftUI\n\nstruct ContentView: View {\n  var emojis = [\"\ud83d\ude97\",\"\ud83d\ude95\",\"\ud83d\ude99\",\"\ud83d\ude8c\",\"\ud83d\ude8e\",\"\ud83c\udfce\",\"\ud83d\ude93\",\"\ud83d\ude91\",\"\ud83d\ude92\",\"\ud83d\ude90\", \"\ud83d\udefb\",\"\ud83d\ude9a\",\"\ud83d\ude9b\",\"\ud83d\ude9c\"]\n  @State var emojiCount = 3\n  var body: some View {\n    VStack{\n      ScrollView {\n        LazyVGrid(columns: [GridItem(.adaptive(minimum: 100))]) {\n          ForEach(emojis[0..&lt;emojiCount], id: \\.self) {\n            emoji in\n            CardView(content: emoji).aspectRatio(2/3, contentMode: .fit)\n          }\n        }\n      }\n    }\n    .foregroundColor(.red)\n    Spacer()\n    HStack {\n      remove\n      Spacer()\n      add\n    }\n    .font(.largeTitle)\n    .padding(.horizontal)\n  }\n  .padding(.horizontal)\n}\n\nvar remove: some View {\n  Button(action: {\n    if emojiCount &gt; 1 {\n      emojiCount -= 1\n    }\n  }){\n    Image(systemName: \"minus.circle\")\n  }\n}\n\nvar add: some View {\n  Button(action: {\n    if emojiCount &lt; emojis.count {\n      emojiCount += 1\n    }\n  }) {\n    Image(systemName: \"plus.circle\")\n  }\n}\n\nstruct CardView: View {\n  var content: String\n  @State var isFace: Bool = true\n  var body: some View {\n    ZStack {\n      let shape = RoundedRectangle(cornorRadius: 5)\n      if isFaceUp {\n        shape.fill().foregroundColor(.white)\n        shape.strokeBorder(lineWidth: 3)\n        Text(content).font(.largeTitle)\n      }\n      else {\n        shape.fill()\n      }\n    }\n    .onTapGesture {\n      isFaceUp = !isFaceUp\n    }\n  }\n}\n\nstruct ContentView_Preview: PreviewProvider {\n  static var previews: some View {\n    ContentView()\n        .preferredColorScheme(.dark)\n    ContentView()\n        .preferredColorScheme(.light)\n  }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec3/","title":"Lecture 3","text":""},{"location":"ios/iosstanford/lec3/#mvvm","title":"MVVM","text":"<ul> <li>Model</li> <li>UI Independent</li> <li>Data + Logic</li> <li>The information itself<ul> <li>notices changes</li> </ul> </li> <li>ViewModel</li> <li>Binds View to Model</li> <li>Interpreter</li> <li>Gatekeeper</li> <li>Process Intent<ul> <li>publishes \"something changed\"</li> <li><code>ObservableObject</code></li> <li><code>@Published</code></li> <li><code>objectWillChange.send()</code></li> <li>modifies the Model</li> </ul> </li> <li>View</li> <li>Reflects the Model</li> <li>Stateless(<code>@State</code>)</li> <li>Declared</li> <li>Reactive<ul> <li>automatically observes publications, pulls data and rebuilds</li> <li><code>@ObservedObject</code></li> <li><code>@Binding</code></li> <li><code>.onReceive</code></li> <li><code>@EnvironmentObject</code></li> <li><code>.environmentObject()</code></li> <li>calls Intent function</li> </ul> </li> </ul>"},{"location":"ios/iosstanford/lec3/#varieties-of-types","title":"Varieties of Types","text":"<ul> <li> <p><code>struct</code></p> </li> <li> <p><code>class</code></p> </li> <li> <p>Both <code>struct</code> and <code>class</code> have much exactly the same syntax</p> </li> <li> <p>Both <code>struct</code> and <code>class</code> have <code>functions</code></p> </li> </ul> <pre><code> // functions\n func multiply(operand: Int, by: Int)-&gt; Int {\n   return operand * by\n }\n multiply(operand: 5, by: 6)\n func multiply(_ operand: Int, by otherOperand: Int)-&gt;Int {\n   return operand * otherOperand\n }\n multiply(5, by: 6)\n</code></pre> <ul> <li> <p>Both <code>struct</code> and <code>class</code> have <code>init</code>ializers</p> <p><code>swift struct MemoryGame { init(numberOfPairsOfCards: Int) {   // create a game with that many pairs of cards }   }</code></p> </li> <li> <p><code>struct</code> is a value type</p> </li> <li>Copied when passed or assigned</li> <li>Copy on write, Functional programming</li> <li>No inheritance</li> <li>\"Free\" <code>init</code> initializes ALL <code>var</code>s</li> <li>Mutability must be explicitly stated </li> <li>Your \"go to\" data structure</li> <li> <p>Everything you've seen so far is a <code>struct</code>, except <code>View</code> is a protocol</p> </li> <li> <p><code>class</code> is a reference type</p> </li> <li>Passed around via pointers</li> <li>Automatically reference counted</li> <li>Object-oriented programming</li> <li>Inheritance(single)</li> <li>\"Free\" <code>init</code> initializes NO <code>var</code>s</li> <li>Always mutable</li> <li>Used in specific circumstances</li> <li> <p><code>ViewModel</code> is always a <code>class</code></p> </li> <li> <p>Generics</p> <pre><code>struct Array&lt;Element&gt; {\n  ...\n  func append(_ element: Element) {...}\n}\n</code></pre> </li> <li> <p>Functions</p> </li> </ul> <pre><code>(Int, Int) -&gt; Bool \n// take two Ints and return a Bool\n(Double) -&gt; Void\n() -&gt; Array&lt;String&gt;\n() -&gt; Void\nvar foo: (Double) -&gt; Void\nfunc doSomething(what: ()-&gt;Bool)\n\nvar operation: (Double) -&gt; Double\nfunc square(operand: Double) -&gt; Double {\n  return operand * operand\n}\noperation = square\nlet result1 = operation(4)\n// result1 == 16\n// sqrt is a build-in function in swift\noperation = sqrt\nlet result2 = operation(4)\n// result2 == 2\n</code></pre>"},{"location":"ios/iosstanford/lec3/#modelmemorygameswift","title":"Model(<code>MemoryGame.swift</code>)","text":"<pre><code>import Foundation\n\nstruct MemoryGame&lt;CardContent&gt; {\n  private(set) var cards: Array&lt;Card&gt;\n\n  func choose(_ card: Card) {\n\n  }\n\n  init(numberOfPairsOfCards: Int, createCardContent: (Int) -&gt; CardContent) {\n    cards = Array&lt;Card&gt;()\n    for pairIndex in 0..&lt;numberOfPairOfCards {\n      let content = createCardContent(pairIndex)\n      cards.append(Card(content: content))\n      cards.append(Card(content: content))\n    }\n  }\n\n  struct Card {\n    var isFaceUp: Bool = false\n    var isMatched: Bool = false\n    var content: CardContent\n  }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec3/#viewmodelemojimemorygameswift","title":"ViewModel(<code>EmojiMemoryGame.swift</code>)","text":"<p>ViewModel is part of UI, but not part of View in MVVM</p> <pre><code>import SwiftUI\n\nclass EmojiMemoryGame {\n    static let emojis = [\"\ud83d\ude97\",\"\ud83d\ude95\",\"\ud83d\ude99\",\"\ud83d\ude8c\",\"\ud83d\ude8e\",\"\ud83c\udfce\",\"\ud83d\ude93\",\"\ud83d\ude91\",\"\ud83d\ude92\",\"\ud83d\ude90\", \"\ud83d\udefb\",\"\ud83d\ude9a\",\"\ud83d\ude9b\",\"\ud83d\ude9c\"]\n    // put a static sign ahead, the emojis is really now the EmojiMemoryGame.emojis\n    // static will solve the property initializers errors(make it 'global')\n\n    // firstly, to creat ViewModel's own model\n    // view model itself is the truth, stores the truth of the Model(MVVM)\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//    MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4, createCardContent: { (index: Int) -&gt; String in // in seperate argument and function's content\n//            return \"\ud83d\ude0a\"\n//        })\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { _ in \"\ud83d\ude0a\" }\n    static func createMemoryGame() -&gt; MemoryGame&lt;String&gt; {\n        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { pairIndex in\n            EmojiMemoryGame.emojis[pairIndex]\n        }\n    }\n\n    // the order of these properties(like model, like emojis) being initialized is random\n    // it is no way that you can have one of their initializers depending on another one already having been initialized\n    // when we want to initialize here, emojis may not initialize\n\n    private(set) var model: MemoryGame&lt;String&gt; = EmojiMemoryGame.createMemoryGame()\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { pairIndex in\n//            emojis[pairIndex]\n//            // '=' is a property initializer\n//        }\n\n    // notice the func makeCardContent above, here to simplify the code\n\n    // private(set) can look (from other class), but cannot change\n    var cards: Array&lt;MemoryGame&lt;String&gt;.Card&gt; {\n        return model.cards\n    }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec4/","title":"Lecture 4","text":""},{"location":"ios/iosstanford/lec4/#enum","title":"<code>enum</code>","text":"<p>Another variety of data structure in addition to <code>struct</code> and <code>class</code></p> <pre><code>enum FastFoodMenuItem {\n  case hamburger\n  case fries\n  case drink\n  case cookie\n}\n</code></pre> <p>An <code>enum</code> is a value type(like <code>struct</code>), so it is <code>copied</code> as it is passed around</p> <pre><code>enum FryOrderSize {\n  case large\n  case small\n}\n</code></pre> <ul> <li>Setting the value of an enum</li> </ul> <pre><code>let menuItem: FastFoodMenuItem = FastFoodMenu.hamburger(patties: 2)\nvar otherItem: FastFoodItem = FastFoodMenuItem.cookie\nvar yetAnotherItem = .cookie // this is illegal\n</code></pre> <ul> <li>Checking an <code>enum</code>'s state</li> </ul> <pre><code>var menuItem = FastFoodMenuItem.hamburger(patties: 2)\nswitch menuItem {\n  case .hamburger: break;\n  case .fries: print(\"fries\")\n  case .drink: print(\"drink\")\n  case .cookie: print(\"cookie\")\n}\n</code></pre>"},{"location":"ios/iosstanford/lec4/#optional","title":"<code>Optional</code>","text":"<p>An Optional is just an enum.</p> <pre><code>enum Optional&lt;T&gt; {\n  case none\n  case some(T)\n}\n</code></pre> <p>Declaring something of type <code>Optional&lt;T&gt;</code> can be done with the syntax <code>T?</code></p> <p>You can then assign it the value <code>nil</code>(<code>Optional.none</code>)</p> <p>Or you can assign it something of the type <code>T</code>(<code>Optional.some</code>)</p> <pre><code>var hello: String?\nvar hello: String? = \"hello\"\nvar hello: String? = nil\n</code></pre> <p>You can access the associated value either by force(with <code>!</code>)</p> <pre><code>let hello: String? = ...\nprint(hello!)\n</code></pre> <p>Or \"safely\" using <code>if let</code> and then using the safely-gotten associated value in <code>{}</code></p> <pre><code>if let safehello = hello {\n  print(safehello)\n}\nelse {\n  // do sth else\n}\n</code></pre> <p><code>??</code> \"Optional Defaulting\", It's called the \"nil-coalescing operator\"</p> <pre><code>let x: String? = ...\nlet y = x ?? \"foo\"\n\nswitch x {\n  case .none: y = \"foo\"\n  case .some(let data): y = data\n}\n\nlet x: String? = ...\nlet y = x?.foo()?.bar?.z\n\nswitch x {\n  case .none: y = nil\n  case .some(let xval):\n    switch xval.foo() {\n      case .none: y = nil\n      case .some(let xfooval) {\n        switch xfooval.bar {\n          case .none: y = nil\n          case .some(let xfbval): y = xfbval.z\n        }\n      }\n    }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec4/#view","title":"<code>View</code>","text":"<pre><code>import SwiftUI\n\nstruct ContentView: View {\n    // view is just an agent for showing what in the model through the view model, should pass viewModel as an argument\n    @ObservedObject var viewModel: EmojiMemoryGame\n    // @ObservedObject means that something changed plz rebuild entire body\n\n    var body: some View {\n        ScrollView {\n            LazyVGrid(columns: [GridItem(.adaptive(minimum: 65))]){\n                ForEach(viewModel.cards) { card in\n                    CardView(card: card)\n                        .aspectRatio(2/3, contentMode: .fit)\n                        .onTapGesture {\n                            // this is the intent of an user\n                            // intent is stored in ViewModel\n                            viewModel.choose(card)\n                        }\n                }\n            }\n        }\n        .foregroundColor(.red)\n        .padding(.horizontal)\n    }\n\n}\n\nstruct CardView: View {\n    let card: MemoryGame&lt;String&gt;.Card\n\n    var body: some View {\n        ZStack {\n            let shape = RoundedRectangle(cornerRadius: 20)\n            if card.isFaceUp {\n                shape.fill().foregroundColor(.white)\n                shape.strokeBorder(lineWidth: 3)\n                Text(card.content).font(.largeTitle)\n            } else if card.isMatched {\n                shape.opacity(0)\n            }\n            else {\n                shape.fill()\n            }\n        }\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        let game = EmojiMemoryGame()\n        ContentView(viewModel: game)\n            .preferredColorScheme(.light)\n        ContentView(viewModel: game)\n            .preferredColorScheme(.dark)\n\n    }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec4/#viewmodel","title":"<code>ViewModel</code>","text":"<pre><code>// ViewModel is a part of UI, but not the part of View in MVVM\nimport SwiftUI\n// view model in mvvm is a class, can inheritate\n\n//func makeCardContent(index: Int) -&gt; String {\n//    return \"\ud83d\ude0a\"\n//}\n\n// ObservableObject tells the world that something is changed\nclass EmojiMemoryGame: ObservableObject {\n\n    static let emojis = [\"\ud83d\ude97\",\"\ud83d\ude95\",\"\ud83d\ude99\",\"\ud83d\ude8c\",\"\ud83d\ude8e\",\"\ud83c\udfce\",\"\ud83d\ude93\",\"\ud83d\ude91\",\"\ud83d\ude92\",\"\ud83d\ude90\", \"\ud83d\udefb\",\"\ud83d\ude9a\",\"\ud83d\ude9b\",\"\ud83d\ude9c\"]\n    // put a static sign ahead, the emojis is really now the EmojiMemoryGame.emojis\n    // static will solve the property initializers errors(make it 'global')\n\n    // firstly, to creat ViewModel's own model\n    // view model itself is the truth, stores the truth of the Model(MVVM)\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//    MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4, createCardContent: { (index: Int) -&gt; String in // in seperate argument and function's content\n//            return \"\ud83d\ude0a\"\n//        })\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { _ in \"\ud83d\ude0a\" }\n    static func createMemoryGame() -&gt; MemoryGame&lt;String&gt; {\n        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 3) { pairIndex in\n            EmojiMemoryGame.emojis[pairIndex]\n        }\n    }\n\n    // the order of these properties(like model, like emojis) being initialized is random\n    // it is no way that you can have one of their initializers depending on another one already having been initialized\n    // when we want to initialize here, emojis may not initialize\n\n    // @Published means that \"something changed\" every time its model changes\n    @Published private(set) var model: MemoryGame&lt;String&gt; = EmojiMemoryGame.createMemoryGame()\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { pairIndex in\n//            emojis[pairIndex]\n//            // '=' is a property initializer\n//        }\n\n    // notice the func makeCardContent above, here to simplify the code\n\n    // private(set) can look (from other class), but cannot change\n    var cards: Array&lt;MemoryGame&lt;String&gt;.Card&gt; {\n        model.cards\n    }\n\n    // MARK: - Intent(s)\n\n    func choose(_ card: MemoryGame&lt;String&gt;.Card) {\n        // model is the model\n        model.choose(card)\n    }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec4/#model","title":"<code>Model</code>","text":"<pre><code>import Foundation\n// this is the model in mvvm\nstruct MemoryGame&lt;CardContent&gt; where CardContent: Equatable{\n    private(set) var cards: Array&lt;Card&gt;\n\n    private var indexOfTheOneAndOnlyFaceUpCard: Int?\n    // This is a type that sometimes not set, which means that it should be an optional\n    // \u4e00\u822c\u60c5\u51b5\u4e0b\u4e00\u4e2aoptional\u88ab\u521d\u59cb\u5316\u4e3anil\n\n    mutating func choose(_ card: Card) {\n        // card.isFaceUp.toggle()\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u6b64\u5904\u7684card\u662f\u6307func choose(_ card: Card)\u4e2d\u7684card\uff0c\u4f5c\u4e3afunction\u4e2d\u7684arrgument\u672c\u8eab\u662f\u4e00\u4e2alet\uff0c\u65e0\u6cd5\u6539\u53d8\n\n        // \u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570func index(of card: Card)-&gt;Int\uff0c\u4ee5\u5f97\u5230card\u5728cards\u4e2d\u7684index\uff0c\u5e76\u5355\u72ec\u4fee\u6539cards[index]\u4e2d\u7684isFaceUp\uff0c\u884c\u5417\uff1f\n\n//        let chosenIndex = index(of: card)\n\n//        var chosenCard = cards[chosenIndex]\n//        chosenCard.isFaceUp.toggle()\n        // \u4e8b\u5b9e\u8bc1\u660e\u662f\u4e0d\u884c\u7684\n        // var chosenCard = cards[chosenIndex]\u5f97\u5230\u7684\u662f\u4e00\u4e2acopy\uff0c\u7531\u4e8estruct\n        // \u6240\u4ee5\u5982\u679c\u8981\u4fee\u6539\uff0c\u5e94\u5f53\u76f4\u63a5\u4fee\u6539cards[chosenIndex]\n\n//        cards[chosenIndex].isFaceUp.toggle()\n\n        // Cannot use mutating member on immutable value: 'self' is immutable\n        // \u9700\u8981\u5728func\u524d\u6dfb\u52a0mutating\uff0c\u4ece\u800cfunction\u80fd\u591fmutate\u8fd9\u4e2astruct\uff0cstruct\u9ed8\u8ba4\u4e0a\u662fimmutable\u7684\n        // \u4f46\u662f\u5728UI\u4e2d, cards[chosenIndex].isFaceUp\u4ecd\u6ca1\u6709\u6539\u53d8\n\n        // \u5f53\u4fee\u6539\u6210\u4e3afunc index(of card: Card) -&gt; Int?\u540e\uff0c\u4e0d\u8bba\u662f\u4fee\u6539\u4e3alet chosenIndex = index(of: card)!\u8fd8\u662fcards[chosenIndex!].isFaceUp.toggle()\uff0c\u5f53index(of card: Card)\u8fd4\u56denil\u65f6\u90fd\u4f1acrash\uff0c\u6240\u4ee5\u8981\u4f7f\u7528if let\u91cd\u5199func choose(_ card: Card)\n//        if let chosenIndex = index(of: card) {\n//            cards[chosenIndex].isFaceUp.toggle()\n//        }\n\n        if let chosenIndex = cards.firstIndex(where: { $0.id == card.id}), !cards[chosenIndex].isFaceUp,\n            !cards[chosenIndex].isMatched {\n            if let potentialMatchIndex = indexOfTheOneAndOnlyFaceUpCard {\n                if cards[chosenIndex].content == cards[potentialMatchIndex].content {\n                    cards[chosenIndex].isMatched = true\n                    cards[potentialMatchIndex].isMatched = true\n                }\n                indexOfTheOneAndOnlyFaceUpCard = nil\n            } else {\n                for index in cards.indices {\n                    cards[index].isFaceUp = false\n                }\n                indexOfTheOneAndOnlyFaceUpCard = chosenIndex\n            }\n\n            cards[chosenIndex].isFaceUp.toggle()\n        }\n        // \u6b64\u5904code\u53d6\u4ee3\u4e86if let chosenIndex = index(of: card)\u548cfunc index(of card: Card) -&gt; Int?\n    }\n\n    func index(of card: Card) -&gt; Int? {\n        for index in 0..&lt;cards.count {\n            if(cards[index].id == card.id) {\n                return index\n            }\n        }\n        return nil\n    }\n\n    init(numberOfPairsOfCards: Int, createCardContent: (Int) -&gt; CardContent) {\n        cards = Array&lt;Card&gt;()\n        // add numberOfPairsOfCards * 2 cards to cards array\n        for pairIndex in 0..&lt;numberOfPairsOfCards {\n            // maybe: var content: CardContent = ...?\n            let content = createCardContent(pairIndex)\n            cards.append(Card(content: content, id: pairIndex*2))\n            cards.append(Card(content: content, id: pairIndex*2+1))\n            // stop here, how to create CardContent?\n        }\n    }\n\n    // how to make things Identifiable?\n    // \u76f4\u63a5\u6dfb\u52a0Identifiable\n    struct Card: Identifiable {\n        // MemoryGame.Card(outside of this code)\n        var isFaceUp: Bool = false\n        var isMatched: Bool = false\n        var content: CardContent\n        var id: Int\n        // var id: Int makes it identifiable\n    }\n}\n// above is the entire model in mvvm\n</code></pre>"},{"location":"ios/iosstanford/lec5/","title":"Lecture 5","text":""},{"location":"ios/iosstanford/lec5/#state","title":"<code>@State</code>","text":"<p>Currently, all of View <code>struct</code>s are completely and utterly read-only</p> <p>only <code>let</code> or computed <code>var</code> (which are read-only) make much sense on a View</p> <p>The exception is property wrappers like <code>@ObservedObject</code> which must be marked <code>var</code></p> <p>Views are mostly supposed to be \"stateless\"(just drawing the Model all the time). They don't need any state of their own. So no need for them to be none-read-only.</p> <p>You must mark any <code>var</code>s used for this temporary state with <code>@State</code></p> <pre><code>@State private var somethingTemporary: SomeType // SomeType can be any struct\n</code></pre> <p>These are marked. <code>private</code> because no one else can access them anyway</p> <p><code>@State</code> is only used inside the View</p> <p>Changes to this <code>@State</code> <code>var</code> will cause View to rebuild its body</p> <p>It's sort of like an <code>@ObservedObject</code> but on a random piece of data instead of a ViewModel</p> <pre><code>@State private var somethingTemporary: SomeType\n</code></pre> <p>When read-only View gets rebuilt, the new version will continue to point to it. In other words, changes to your View(via its arguments) will not dump this state</p>"},{"location":"ios/iosstanford/lec5/#property-observers","title":"Property Observers","text":"<p>Property observers are essentially a way to \"watch\" a <code>var</code> and execute code when it changes</p> <p>The syntax can look a lot like a computed <code>var</code>, but it is completely unrelated to that</p> <pre><code>var isFaceUp: Bool {\n  willSet {\n    if newValue {\n      startUsingBonusTime()\n    } else {\n      stopUsingBonusTime()\n    }\n  }\n}\n</code></pre> <p>Inside here, <code>newVal</code> is a special variable(the value it's going to get set to)</p> <p>There's also a <code>didSet</code> (inside that one, <code>oldValue</code> is what the value used to be)</p>"},{"location":"ios/iosstanford/lec5/#layout","title":"Layout","text":"<p>Container Views \"offer\" space to the Views inside them</p> <p>Views then choose what size they want to be</p> <p>Container Views then position the Views inside of them</p> <p><code>HStack</code> and <code>VStack</code></p> <p>Stacks divide up the space that is offered to them and then offer that to the Vies inside.</p> <p>It offers space to its \"least flexible\"(with respect to sizing) subviews first</p> <p><code>Image</code>(it wants to be a fixed size) is an \"inflexible\" View</p> <p>After an offered Vies(s) takes what it wants, its size is removed from the space available</p> <p>Then the stack moves on to the next \"least flexible\" Views</p> <p>Very flexible views will share evenly(mostly)</p> <p>Rinse and repeat</p> <pre><code>HStack {\n  Text(\"Important\").layoutPriority(100)\n  Image(systemName: \"arrow.up\") // the default layout priority is 0\n  Text(\"Uimportant\")\n}\n</code></pre> <p><code>LazyHStack</code> and <code>LazyVStack</code></p> <p>These \"lazy\" versions of the stack don't build any of their Views that are not visible.</p> <p>They also size themselves to fit their Views.</p> <p>So they don't take up all the space offered to them even if they have flexible views inside.</p> <p>You'd use these when you have a stack that is in a ScrollView</p> <p><code>ScrollView</code></p> <p>ScrollView takes all the space offered to it.</p> <p>The views inside it are sized to fit along the axis your scrolling on.</p> <p><code>GeometryRead</code></p>"},{"location":"ios/iosstanford/lec5/#viewbuilder","title":"<code>@ViewBuilder</code>","text":"<p>Any func or read-only computed <code>var</code> can be marked with <code>@ViewBuilder</code></p> <p>If so marked, the contents of that <code>func</code> or <code>var</code> will be interpreted as a list of <code>Views</code></p> <pre><code>@ViewBuilder\nfunc front(of card: Card) -&gt; some View {\n  let shape = RoundedRectangle(cornerRadius: 20)\n  shape\n  shape.stroke()\n  Text(card.content)\n}\n</code></pre> <p>can also use <code>@ViewBuilder</code> to mark a parameter of a function or an init.</p> <p>That argument's type must be \"a function that returns a View\"</p> <pre><code>import SwiftUI\n\nstruct EmojiMemoryGameView: View {\n    // view is just an agent for showing what in the model through the view model, should pass viewModel as an argument\n    @ObservedObject var game: EmojiMemoryGame\n    // @ObservedObject means that something changed plz rebuild entire body\n\n    var body: some View {\n        ScrollView {\n            LazyVGrid(columns: [GridItem(.adaptive(minimum: 100))]){\n                ForEach(game.cards) { card in\n                    CardView(card: card)\n                        .aspectRatio(2/3, contentMode: .fit)\n                        .onTapGesture {\n                            // this is the intent of an user\n                            // intent is stored in ViewModel\n                            game.choose(card)\n                        }\n                }\n            }\n        }\n        .foregroundColor(.red)\n        .padding(.horizontal)\n    }\n\n}\n\nstruct CardView: View {\n    let card: EmojiMemoryGame.Card\n\n    var body: some View {\n//        ZStack {\n//            let shape = RoundedRectangle(cornerRadius: 20)\n//            if card.isFaceUp {\n//                shape.fill().foregroundColor(.white)\n//                shape.strokeBorder(lineWidth: 3)\n//                Text(card.content).font(.largeTitle)\n//            } else if card.isMatched {\n//                shape.opacity(0)\n//            }\n//            else {\n//                shape.fill()\n//            }\n//        }\n\n        // The whole point of GeometryReader is it's offered some size,\n        // it offers that to its Views and tells its View\n        // what that size is via proxy(geometry)\n        GeometryReader { geometry in\n            ZStack {\n                let shape = RoundedRectangle(cornerRadius: DrawingConstants.cornerRadius)\n                if card.isFaceUp {\n                    shape.fill().foregroundColor(.white)\n                    shape.strokeBorder(lineWidth: DrawingConstants.lineWidth)\n                    Text(card.content).font(font(in: geometry.size))\n                } else if card.isMatched {\n                    shape.opacity(0)\n                }\n                else {\n                    shape.fill()\n                }\n            }\n        }\n    }\n\n    private func font(in size: CGSize) -&gt; Font {\n        Font.system(size: min(size.width, size.height) * DrawingConstants.fontScale)\n    }\n\n    private struct DrawingConstants {\n        static let cornerRadius: CGFloat = 20\n        static let lineWidth: CGFloat = 3\n        static let fontScale: CGFloat = 0.8\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        let game = EmojiMemoryGame()\n        EmojiMemoryGameView(game: game)\n            .preferredColorScheme(.light)\n        EmojiMemoryGameView(game: game)\n            .preferredColorScheme(.dark)\n\n    }\n}\n</code></pre> <pre><code>import Foundation\n// this is the model in mvvm\nstruct MemoryGame&lt;CardContent&gt; where CardContent: Equatable{\n    private(set) var cards: Array&lt;Card&gt;\n\n    // computed property\n    private var indexOfTheOneAndOnlyFaceUpCard: Int? {\n        get { cards.indices.filter({cards[$0].isFaceUp}).oneAndOnly }\n        set { cards.indices.forEach({cards[$0].isFaceUp = ($0 == newValue)})\n//            for index in cards.indices {\n                // \u4e0d\u80fd\u5728indexOfTheOneAndOnlyFaceUpCard\u4e2d\u4f7f\u7528indexOfTheOneAndOnlyFaceUpCard\n//                if index != indexOfTheOneAndOnlyFaceUpCard {\n//                if index != newValue {\n//                    cards[index].isFaceUp = false\n//                } else {\n//                    cards[index].isFaceUp = true\n//                }\n\n            }\n    }\n\n\n    // private var indexOfTheOneAndOnlyFaceUpCard: Int?\n    // This is a type that sometimes not set, which means that it should be an optional\n    // \u4e00\u822c\u60c5\u51b5\u4e0b\u4e00\u4e2aoptional\u88ab\u521d\u59cb\u5316\u4e3anil\n\n    mutating func choose(_ card: Card) {\n        // card.isFaceUp.toggle()\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u6b64\u5904\u7684card\u662f\u6307func choose(_ card: Card)\u4e2d\u7684card\uff0c\u4f5c\u4e3afunction\u4e2d\u7684arrgument\u672c\u8eab\u662f\u4e00\u4e2alet\uff0c\u65e0\u6cd5\u6539\u53d8\n\n        // \u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570func index(of card: Card)-&gt;Int\uff0c\u4ee5\u5f97\u5230card\u5728cards\u4e2d\u7684index\uff0c\u5e76\u5355\u72ec\u4fee\u6539cards[index]\u4e2d\u7684isFaceUp\uff0c\u884c\u5417\uff1f\n\n//        let chosenIndex = index(of: card)\n\n//        var chosenCard = cards[chosenIndex]\n//        chosenCard.isFaceUp.toggle()\n        // \u4e8b\u5b9e\u8bc1\u660e\u662f\u4e0d\u884c\u7684\n        // var chosenCard = cards[chosenIndex]\u5f97\u5230\u7684\u662f\u4e00\u4e2acopy\uff0c\u7531\u4e8estruct\n        // \u6240\u4ee5\u5982\u679c\u8981\u4fee\u6539\uff0c\u5e94\u5f53\u76f4\u63a5\u4fee\u6539cards[chosenIndex]\n\n//        cards[chosenIndex].isFaceUp.toggle()\n\n        // Cannot use mutating member on immutable value: 'self' is immutable\n        // \u9700\u8981\u5728func\u524d\u6dfb\u52a0mutating\uff0c\u4ece\u800cfunction\u80fd\u591fmutate\u8fd9\u4e2astruct\uff0cstruct\u9ed8\u8ba4\u4e0a\u662fimmutable\u7684\n        // \u4f46\u662f\u5728UI\u4e2d, cards[chosenIndex].isFaceUp\u4ecd\u6ca1\u6709\u6539\u53d8\n\n        // \u5f53\u4fee\u6539\u6210\u4e3afunc index(of card: Card) -&gt; Int?\u540e\uff0c\u4e0d\u8bba\u662f\u4fee\u6539\u4e3alet chosenIndex = index(of: card)!\u8fd8\u662fcards[chosenIndex!].isFaceUp.toggle()\uff0c\u5f53index(of card: Card)\u8fd4\u56denil\u65f6\u90fd\u4f1acrash\uff0c\u6240\u4ee5\u8981\u4f7f\u7528if let\u91cd\u5199func choose(_ card: Card)\n//        if let chosenIndex = index(of: card) {\n//            cards[chosenIndex].isFaceUp.toggle()\n//        }\n\n        if let chosenIndex = cards.firstIndex(where: { $0.id == card.id}), !cards[chosenIndex].isFaceUp,\n            !cards[chosenIndex].isMatched {\n            if let potentialMatchIndex = indexOfTheOneAndOnlyFaceUpCard {\n                if cards[chosenIndex].content == cards[potentialMatchIndex].content {\n                    cards[chosenIndex].isMatched = true\n                    cards[potentialMatchIndex].isMatched = true\n                }\n                cards[chosenIndex].isFaceUp = true\n            } else {\n                for index in cards.indices {\n                    cards[index].isFaceUp = false\n                }\n                indexOfTheOneAndOnlyFaceUpCard = chosenIndex\n            }\n        }\n        // \u6b64\u5904code\u53d6\u4ee3\u4e86if let chosenIndex = index(of: card)\u548cfunc index(of card: Card) -&gt; Int?\n    }\n\n    func index(of card: Card) -&gt; Int? {\n        for index in 0..&lt;cards.count {\n            if(cards[index].id == card.id) {\n                return index\n            }\n        }\n        return nil\n    }\n\n    init(numberOfPairsOfCards: Int, createCardContent: (Int) -&gt; CardContent) {\n        cards = []\n        // add numberOfPairsOfCards * 2 cards to cards array\n        for pairIndex in 0..&lt;numberOfPairsOfCards {\n            // maybe: var content: CardContent = ...?\n            let content = createCardContent(pairIndex)\n            cards.append(Card(content: content, id: pairIndex*2))\n            cards.append(Card(content: content, id: pairIndex*2+1))\n            // stop here, how to create CardContent?\n        }\n    }\n\n    // how to make things Identifiable?\n    // \u76f4\u63a5\u6dfb\u52a0Identifiable\n    struct Card: Identifiable {\n        // MemoryGame.Card(outside of this code)\n        var isFaceUp = true\n        var isMatched = false\n        let content: CardContent\n        let id: Int\n        // var id: Int makes it identifiable\n    }\n}\n// above is the entire model in mvvm\n\nextension Array {\n    var oneAndOnly: Element? {\n        if count == 1 {\n            return first\n        } else {\n            return nil\n        }\n    }\n}\n</code></pre> <pre><code>// ViewModel is a part of UI, but not the part of View in MVVM\nimport SwiftUI\n// view model in mvvm is a class, can inheritate\n\n//func makeCardContent(index: Int) -&gt; String {\n//    return \"\ud83d\ude0a\"\n//}\n\n// ObservableObject tells the world that something is changed\nclass EmojiMemoryGame: ObservableObject {\n    typealias Card = MemoryGame&lt;String&gt;.Card\n\n    private static let emojis = [\"\ud83d\ude97\",\"\ud83d\ude95\",\"\ud83d\ude99\",\"\ud83d\ude8c\",\"\ud83d\ude8e\",\"\ud83c\udfce\",\"\ud83d\ude93\",\"\ud83d\ude91\",\"\ud83d\ude92\",\"\ud83d\ude90\", \"\ud83d\udefb\",\"\ud83d\ude9a\",\"\ud83d\ude9b\",\"\ud83d\ude9c\"]\n    // put a static sign ahead, the emojis is really now the EmojiMemoryGame.emojis\n    // static will solve the property initializers errors(make it 'global')\n\n    // firstly, to creat ViewModel's own model\n    // view model itself is the truth, stores the truth of the Model(MVVM)\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//    MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4, createCardContent: { (index: Int) -&gt; String in // in seperate argument and function's content\n//            return \"\ud83d\ude0a\"\n//        })\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { _ in \"\ud83d\ude0a\" }\n    private static func createMemoryGame() -&gt; MemoryGame&lt;String&gt; {\n        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 5) { pairIndex in\n            EmojiMemoryGame.emojis[pairIndex]\n        }\n    }\n\n    // the order of these properties(like model, like emojis) being initialized is random\n    // it is no way that you can have one of their initializers depending on another one already having been initialized\n    // when we want to initialize here, emojis may not initialize\n\n    // @Published means that \"something changed\" every time its model changes\n    @Published private var model = EmojiMemoryGame.createMemoryGame()\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { pairIndex in\n//            emojis[pairIndex]\n//            // '=' is a property initializer\n//        }\n\n    // notice the func makeCardContent above, here to simplify the code\n\n    // private(set) can look (from other class), but cannot change\n    var cards: Array&lt;Card&gt; {\n        model.cards\n    }\n\n    // MARK: - Intent(s)\n\n    func choose(_ card: Card) {\n        // model is the model\n        model.choose(card)\n    }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec6/","title":"Lecture 6","text":""},{"location":"ios/iosstanford/lec6/#protocol","title":"<code>protocol</code>","text":"<p>A <code>protocol</code> is sort of a \"stripped-down\" <code>struct</code>/<code>class</code></p> <p>It has functions and vars, but no implementation(or storage)</p> <p>Declaring a protocol looks very similar to struct or class</p> <pre><code>protocol Moveable {\n  func move(by: Int)\n  var hasMoved: Bool { get }\n  var distanceFromStart: Int{ get set }\n}\n</code></pre> <p>then other type can claim to implement Moveable</p> <pre><code>struct PortableThing: Moveable {\n  // must implement move(by:), hasMoved and distanceFromStart here\n}\n// PortableThing conforms to Movealbe\n</code></pre> <p>and this is also legal</p> <pre><code>protocol Vehicle: Moveable {\n  var passengerCount: Int {get set}\n}\nclass Car: Vehicle, Impundable, Leasable {\n  // must implement move(by:), hasMoved, distanceFromStart and passengerCount here\n  // and must implement any funcs/vars in Impoundable and Leasable too\n}\n</code></pre> <p>Very rarely, a protocol can be used as a type (in any other circumstance, a type can be used). Not all protocols can be used this way(<code>View</code> can't, nor <code>Equatable</code>, nor <code>Identifiable</code>)</p> <pre><code>func travelAround(using moveable: Moveable)\n// can pass a Car or PortableThing in here\nlet foo = [Moveable]\n// this Array can now contains Cars and also PortableThings\n</code></pre> <p>A much more common usage is to specify the behavior of a <code>struct</code>, <code>class</code> or <code>enum</code></p> <pre><code>struct EmojiMemoryGameView: View\n</code></pre> <p><code>EmojiMemoryGameView</code> became a very powerful <code>struct</code></p> <pre><code>class EmojiMemoryGame: ObservableObject\n</code></pre> <p>Another use is turning \"don't cares\" into \"somewhat cares\"</p> <pre><code>struct MemoryGame&lt;CardContent&gt; where CardContent: Equatable\n</code></pre> <p>can also use protocols to restrict an <code>extension</code> to work only with certain thins</p> <pre><code>extension Array where Element: Hashable {...}\n</code></pre> <p>This <code>extension</code> will only be available for certain <code>Array</code>s, that elements conform to <code>Hashable</code></p> <p>can also use <code>protocol</code>s to restrict individual functions to work only with certain things</p> <pre><code>init(data: Data) where Data: Collection, Data.Element: Identifiable\n</code></pre> <p><code>Data</code> is a don't care on whatever <code>struct</code> this <code>init</code> is in</p> <p>You can't even create this thing unless the data you provide is a <code>Collection</code> of <code>Identifiables</code></p> <p>Occasionally a <code>protocol</code> is used to set up an agreement between two entities.</p> <p>One of the most powerful uses of <code>protocol</code>s is to facilitate code sharing</p> <p>Implementation can be added to a <code>protocol</code> by creating an <code>extension</code> to it.</p> <p>An <code>extension</code> can also add a default implementation for a <code>func</code> or <code>var</code> in the <code>protocol</code>. (That's how <code>ObservableObject</code>s get <code>objectWillChange</code> for <code>free</code>)</p> <pre><code>func filter(_ isIncluded: (Element) -&gt; Bool) -&gt; Array&lt;Element&gt;\n</code></pre> <p>This function was written once by Apple.</p> <p>And yet it works on Array and Range and String and Dictionary and others.</p> <p><code>filter</code> was added to the Foundation library as an <code>extension</code> to the Sequence protocol.</p> <p>Array, Range, String, Dictionary all conform to the Sequence protocol</p> <p>So they all get the filter function that was added to Sequence via that extension</p> <p>Adding protocol implementation</p> <pre><code>struct Tesla: Vehicle {\n  // Tesla is constrained to have to implement everything in Vehicle\n  // but it gains all the capabilities a Vehicle has too\n}\n// Things that comform to Vehicle \"gain capabilities\" via an extension to the Vehicle protocol\nextension Vehicle {\n  func registerWithDMV() {/* actual implementation here*/}\n}\n// now Teslas (and all other Vehicles) have gained to ability to be registered with DMV\n</code></pre> <pre><code>struct CardView: View {\n  var body: some View { ... }\n}\n</code></pre> <p>Here <code>CardView</code> is declaring that it implements the protocol <code>View</code></p> <p>Since <code>CardView</code> claims to implement this protocol ...</p> <p>... it must(i.e. is constrained to) implement all of the <code>View</code> protocol's <code>func</code>s/<code>var</code>s</p> <p>Luckily, the only thing that needs implementation in the <code>View</code> protocol is <code>body</code></p> <p>So once <code>CardView</code> implements <code>body</code>, it now fully \"conforms\" to <code>View</code></p> <p>And SwiftUI has added a whole ton of other <code>func/var</code>  to <code>View</code> via <code>extension</code></p> <p>So <code>CardView</code> gains the ability to respond to any of those <code>fun/var</code> too</p> <pre><code>protocol View {\n  var body: some View\n}\nextension View {\n  func foregroundColor(_ color: Color) -&gt; some View {}\n  func font(_ font: Font?) -&gt; some View {}\n  func blur(radius: CGFloat, opaque: Bool) -&gt; some View {}\n  ...\n}\n</code></pre> <p>Generics + Protocols</p> <pre><code>protocol Identifiable {\n  var id: ID {get}\n}\n</code></pre> <p>The type <code>ID</code> here is a \"don't care\" for <code>Identifiable</code></p> <p>protocols can be generic too</p> <p>however, protocols don't declare their \"don't care\" types in the same way as a <code>struct</code> does</p> <pre><code>protocol Identifiable {\n  associatedtype ID\n  var id: ID {get}\n}\n</code></pre> <p>not <code>protocol Identifiable&lt;ID&gt;</code></p> <p>The type <code>ID</code> also has to be <code>Hashable</code></p> <pre><code>protocol Identifiable {\n  associatedtype ID where ID: Hashable\n  var id: ID {get}\n}\nor, more simply\nprotocol Identifiable {\n  associatedtype ID: Hashable\n  var id: ID {get}\n}\n</code></pre> <p><code>Hashable</code> is a simple protocol</p> <pre><code>protocol Hashable {\n  func hash(into hasher: inout Hasher)\n}\nstruct Foo: Hashable {\n  var i: Int\n  var s: String\n  func hash(into hasher: inout Hasher) {\n    hasher.combine(i)\n    hasher.combine(s)\n  }\n}\n</code></pre> <pre><code>protocol Equatable {\n  static func ==(lhs: Self, rhs: Self) -&gt; Bool\n}\n</code></pre> <p>The <code>Self</code> means \"the actual type that is implementing Equatable\"</p> <p>When you implement Equatable in a struct, you replace Self with your struct's type. This kind of Self-referencing protocol cannot be used as a normal type.</p> <p>In other word, <code>var x: [Equatable]</code> makes no sense.</p> <p>if declare a <code>struct</code> to be <code>Equatable</code></p> <p>Then Swift will implement the static <code>==</code> func for you</p> <pre><code>struct Card: Identifiable, Equatable {\n  var isFaceUp: Bool\n  var isMatched: Bool\n  var content: CardContent\n  var id: Int\n}\n</code></pre> <p>now <code>card1 == card2</code> will be legal</p> <p>Shape is a protocol that inherits from <code>View</code></p> <p>all Shapes are also Views</p> <p>By default, Shapes draw themselves by filling with the current foreground color. But we've already seen that this can be changed with <code>.stroke()</code> and <code>.fill()</code></p> <p>They return a View that draws the Shape in the specified way (by stroking or filling)</p> <pre><code>func fill&lt;S&gt;(_ whatToFillWith: S) -&gt; some View where S: ShapeStyle\n</code></pre> <p>The <code>ShapeStyle</code> protocol turns a <code>Shape</code> into a <code>View</code> by apply some styling to it</p> <p>Like, Color, ImagePaint, AngularGradient, LinearGradient</p> <p>The Shape protocol (by extension) implements View's body var for you</p> <pre><code>func path(in rect: CGRect) -&gt; Path {\n  return a Path\n}\n</code></pre> <p><code>AspectGrid.swift</code></p> <pre><code>import SwiftUI\n\nstruct AspectVGrid&lt;Item, ItemView&gt;: View where ItemView: View, Item: Identifiable {\n    var items: [Item]\n    var aspectRatio: CGFloat\n    var content: (Item) -&gt; ItemView\n    // content\u7684\u8fd4\u56de\u5bf9\u8c61\u80fd\u4e0d\u80fd\u662fView\u5462\uff1f\u4e0d\u80fd\uff0cView\u662f\u4e00\u4e2aprotocol\uff0c\u662f\u4e00\u4e2a\u81ea\u6211\u5f15\u7528\u7684\u7c7b\u578b\n    // \u80fd\u4e0d\u80fd\u662fsome View\u5462\uff1f\u4e0d\u80fd\n    // \u8fd4\u56de\u7684\u5bf9\u8c61\u5fc5\u987b\u662f\u4e00\u4e2aView\u7684Generics\n\n    init(items: [Item], aspectRatio: CGFloat, @ViewBuilder content: @escaping (Item) -&gt; ItemView) {\n        self.items = items\n        self.aspectRatio = aspectRatio\n        self.content = content\n    }\n\n    // \u4f7f\u7528\u4e0a\u8ff0properties\u548cView\u4e2d\u7684AspectVGrid()\u5171\u540cbuild\u6587\u4ef6AspectVGrid.swift\u4e2d\u7684body\uff0c\u5982\u4e0b\n    var body: some View {\n        GeometryReader { geometry in\n            VStack {\n                let width: CGFloat = widthThatFits(itemCount: items.count, int: geometry.size, itemAspectRatio: aspectRatio)\n                LazyVGrid(columns: [adaptiveGridItem(width: width)], spacing: 0) {\n                    // ForEach(Element)\u8981\u6c42Element\u662fIdentifiable\u7684\n                    ForEach(items) { item in\n                        content(item).aspectRatio(aspectRatio, contentMode: .fit)\n                    }\n                }\n            }\n            Spacer(minLength: 0)\n        }\n    }\n\n    private func adaptiveGridItem(width: CGFloat) -&gt; GridItem {\n        var gridItem = GridItem(.adaptive(minimum: width))\n        gridItem.spacing = 0\n        return gridItem\n    }\n\n    private func widthThatFits(itemCount: Int, int size: CGSize, itemAspectRatio: CGFloat) -&gt; CGFloat {\n        var columnCount = 1\n        var rowCount = itemCount\n        repeat {\n            let itemWidth = size.width / CGFloat(columnCount)\n            let itemHeight = itemWidth / itemAspectRatio\n            if CGFloat(rowCount) * itemHeight &lt; size.height {\n                break\n            }\n            columnCount += 1\n            rowCount = (itemCount + (columnCount - 1)) / columnCount\n        } while columnCount &lt; itemCount\n        if columnCount &gt; itemCount {\n            columnCount = itemCount\n        }\n        return floor(size.width / CGFloat(columnCount))\n    }\n}\n\n//struct AspectVGrid_Previews: PreviewProvider {\n//    static var previews: some View {\n//        AspectVGrid()\n//    }\n//}\n</code></pre> <pre><code>import SwiftUI\n\nstruct EmojiMemoryGameView: View {\n    // view is just an agent for showing what in the model through the view model, should pass viewModel as an argument\n    @ObservedObject var game: EmojiMemoryGame\n    // @ObservedObject means that something changed plz rebuild entire body\n\n    var body: some View {\n//        ScrollView {\n//            LazyVGrid(columns: [GridItem(.adaptive(minimum: 100))]){\n//                ForEach(game.cards) { card in\n//                    CardView(card: card)\n//                        .aspectRatio(2/3, contentMode: .fit)\n//                        .onTapGesture {\n//                            // this is the intent of an user\n//                            // intent is stored in ViewModel\n//                            game.choose(card)\n//                        }\n//                }\n//            }\n//        }\n        AspectVGrid(items: game.cards, aspectRatio: 2/3) { card in\n            if card.isMatched &amp;&amp; !card.isFaceUp {\n                Rectangle().opacity(0)\n            } else {\n                CardView(card: card)\n                    .padding(4)\n    //                .aspectRatio(2/3, contentMode: .fit) AspectVGrid()\u91cc\u5df2\u7ecf\u7ed9\u4e86aspectRatio\u4e86\n                    .onTapGesture {\n                        game.choose(card)\n                    }\n            }\n//            cardView(for: card)\n        }\n        .foregroundColor(.red)\n        .padding(.horizontal)\n\n    }\n\n//    @ViewBuilder\n//    private func cardView(for card: EmojiMemoryGame.Card) -&gt; some View {\n//        if card.isMatched &amp;&amp; !card.isFaceUp {\n//            Rectangle().opacity(0)\n//        } else {\n//            CardView(card: card)\n//                .padding(4)\n//                .onTapGesture {\n//                    game.choose(card)\n//                }\n//        }\n//    }\n    // func cardView()\u5e76\u6ca1\u6709\u8fd4\u56deView\uff0c\u4f46\u9700\u8981\u5176\u8fd4\u56desome View\uff0c\u6240\u4ee5\u8981\u6dfb\u52a0 @ViewBuilder\u544a\u8bc9compiler\n\n\n}\n\nstruct CardView: View {\n    let card: EmojiMemoryGame.Card\n\n    var body: some View {\n//        ZStack {\n//            let shape = RoundedRectangle(cornerRadius: 20)\n//            if card.isFaceUp {\n//                shape.fill().foregroundColor(.white)\n//                shape.strokeBorder(lineWidth: 3)\n//                Text(card.content).font(.largeTitle)\n//            } else if card.isMatched {\n//                shape.opacity(0)\n//            }\n//            else {\n//                shape.fill()\n//            }\n//        }\n\n        // The whole point of GeometryReader is it's offered some size,\n        // it offers that to its Views and tells its View\n        // what that size is via proxy(geometry)\n        GeometryReader { geometry in\n            ZStack {\n                let shape = RoundedRectangle(cornerRadius: DrawingConstants.cornerRadius)\n                if card.isFaceUp {\n                    shape.fill().foregroundColor(.white)\n                    shape.strokeBorder(lineWidth: DrawingConstants.lineWidth)\n                    Pie(startAngle: Angle(degrees: 0-90), endAngle: Angle(degrees: 110-90))\n                        .padding(5).opacity(0.5)\n                    Text(card.content).font(font(in: geometry.size))\n                } else if card.isMatched {\n                    shape.opacity(0)\n                }\n                else {\n                    shape.fill()\n                }\n            }\n        }\n    }\n\n    private func font(in size: CGSize) -&gt; Font {\n        Font.system(size: min(size.width, size.height) * DrawingConstants.fontScale)\n    }\n\n    private struct DrawingConstants {\n        static let cornerRadius: CGFloat = 10\n        static let lineWidth: CGFloat = 3\n        static let fontScale: CGFloat = 0.7\n    }\n}\n\n// \u53f3\u4fa7preview\u662f\u4ec0\u4e48\u6837\u7684\u7531\u4e0b\u9762\u7684\u4ee3\u7801\u51b3\u5b9a\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        let game = EmojiMemoryGame()\n        game.choose(game.cards.first!)\n        return EmojiMemoryGameView(game: game)\n            .preferredColorScheme(.light)\n    }\n}\n</code></pre> <pre><code>import SwiftUI\n\nstruct Pie: Shape {\n    // startAngle\u548cendAngle\u662fvar\uff0c\u662f\u56e0\u4e3a\u4e4b\u540e\u9700\u8981animate\u8fd9\u4e24\u4e2aproperty\n    // View\u53ef\u4ee5\u662flet\uff0c\u800cShape\u53ef\u4ee5animate\u6240\u4ee5\u662fvar\n    var startAngle: Angle\n    var endAngle: Angle\n    var clockwise: Bool = false\n\n    func path(in rect: CGRect) -&gt; Path {\n\n        let center = CGPoint(x: rect.midX, y: rect.midY)\n        let radius = min(rect.width, rect.height) / 2\n        let start = CGPoint(\n            x: center.x + radius * CGFloat(cos(startAngle.radians)),\n            y: center.y + radius * CGFloat(sin(startAngle.radians))\n        )\n\n        var p = Path()\n        p.move(to: center)\n        p.addLine(to: start)\n        p.addArc(\n            center: center,\n            radius: radius,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: !clockwise\n        )\n        p.addLine(to: center)\n\n        return p\n    }\n}\n</code></pre> <pre><code>import Foundation\n// this is the model in mvvm\nstruct MemoryGame&lt;CardContent&gt; where CardContent: Equatable{\n    private(set) var cards: Array&lt;Card&gt;\n\n    // computed property\n    private var indexOfTheOneAndOnlyFaceUpCard: Int? {\n        get { cards.indices.filter({cards[$0].isFaceUp}).oneAndOnly }\n        set { cards.indices.forEach({cards[$0].isFaceUp = ($0 == newValue)})\n//            for index in cards.indices {\n                // \u4e0d\u80fd\u5728indexOfTheOneAndOnlyFaceUpCard\u4e2d\u4f7f\u7528indexOfTheOneAndOnlyFaceUpCard\n//                if index != indexOfTheOneAndOnlyFaceUpCard {\n//                if index != newValue {\n//                    cards[index].isFaceUp = false\n//                } else {\n//                    cards[index].isFaceUp = true\n//                }\n\n            }\n    }\n\n\n    // private var indexOfTheOneAndOnlyFaceUpCard: Int?\n    // This is a type that sometimes not set, which means that it should be an optional\n    // \u4e00\u822c\u60c5\u51b5\u4e0b\u4e00\u4e2aoptional\u88ab\u521d\u59cb\u5316\u4e3anil\n\n    mutating func choose(_ card: Card) {\n        // card.isFaceUp.toggle()\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u6b64\u5904\u7684card\u662f\u6307func choose(_ card: Card)\u4e2d\u7684card\uff0c\u4f5c\u4e3afunction\u4e2d\u7684arrgument\u672c\u8eab\u662f\u4e00\u4e2alet\uff0c\u65e0\u6cd5\u6539\u53d8\n\n        // \u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570func index(of card: Card)-&gt;Int\uff0c\u4ee5\u5f97\u5230card\u5728cards\u4e2d\u7684index\uff0c\u5e76\u5355\u72ec\u4fee\u6539cards[index]\u4e2d\u7684isFaceUp\uff0c\u884c\u5417\uff1f\n\n//        let chosenIndex = index(of: card)\n\n//        var chosenCard = cards[chosenIndex]\n//        chosenCard.isFaceUp.toggle()\n        // \u4e8b\u5b9e\u8bc1\u660e\u662f\u4e0d\u884c\u7684\n        // var chosenCard = cards[chosenIndex]\u5f97\u5230\u7684\u662f\u4e00\u4e2acopy\uff0c\u7531\u4e8estruct\n        // \u6240\u4ee5\u5982\u679c\u8981\u4fee\u6539\uff0c\u5e94\u5f53\u76f4\u63a5\u4fee\u6539cards[chosenIndex]\n\n//        cards[chosenIndex].isFaceUp.toggle()\n\n        // Cannot use mutating member on immutable value: 'self' is immutable\n        // \u9700\u8981\u5728func\u524d\u6dfb\u52a0mutating\uff0c\u4ece\u800cfunction\u80fd\u591fmutate\u8fd9\u4e2astruct\uff0cstruct\u9ed8\u8ba4\u4e0a\u662fimmutable\u7684\n        // \u4f46\u662f\u5728UI\u4e2d, cards[chosenIndex].isFaceUp\u4ecd\u6ca1\u6709\u6539\u53d8\n\n        // \u5f53\u4fee\u6539\u6210\u4e3afunc index(of card: Card) -&gt; Int?\u540e\uff0c\u4e0d\u8bba\u662f\u4fee\u6539\u4e3alet chosenIndex = index(of: card)!\u8fd8\u662fcards[chosenIndex!].isFaceUp.toggle()\uff0c\u5f53index(of card: Card)\u8fd4\u56denil\u65f6\u90fd\u4f1acrash\uff0c\u6240\u4ee5\u8981\u4f7f\u7528if let\u91cd\u5199func choose(_ card: Card)\n//        if let chosenIndex = index(of: card) {\n//            cards[chosenIndex].isFaceUp.toggle()\n//        }\n\n        if let chosenIndex = cards.firstIndex(where: { $0.id == card.id}), !cards[chosenIndex].isFaceUp,\n            !cards[chosenIndex].isMatched {\n            if let potentialMatchIndex = indexOfTheOneAndOnlyFaceUpCard {\n                if cards[chosenIndex].content == cards[potentialMatchIndex].content {\n                    cards[chosenIndex].isMatched = true\n                    cards[potentialMatchIndex].isMatched = true\n                }\n                cards[chosenIndex].isFaceUp = true\n            } else {\n                for index in cards.indices {\n                    cards[index].isFaceUp = false\n                }\n                indexOfTheOneAndOnlyFaceUpCard = chosenIndex\n            }\n        }\n        // \u6b64\u5904code\u53d6\u4ee3\u4e86if let chosenIndex = index(of: card)\u548cfunc index(of card: Card) -&gt; Int?\n    }\n\n//    func index(of card: Card) -&gt; Int? {\n//        for index in 0..&lt;cards.count {\n//            if(cards[index].id == card.id) {\n//                return index\n//            }\n//        }\n//        return nil\n//    }\n\n    init(numberOfPairsOfCards: Int, createCardContent: (Int) -&gt; CardContent) {\n        cards = []\n        // add numberOfPairsOfCards * 2 cards to cards array\n        for pairIndex in 0..&lt;numberOfPairsOfCards {\n            // maybe: var content: CardContent = ...?\n            let content = createCardContent(pairIndex)\n            cards.append(Card(content: content, id: pairIndex*2))\n            cards.append(Card(content: content, id: pairIndex*2+1))\n            // stop here, how to create CardContent?\n        }\n    }\n\n    // how to make things Identifiable?\n    // \u76f4\u63a5\u6dfb\u52a0Identifiable\n    struct Card: Identifiable {\n        // MemoryGame.Card(outside of this code)\n        var isFaceUp = false\n        var isMatched = false\n        let content: CardContent\n        let id: Int\n        // var id: Int makes it identifiable\n    }\n}\n// above is the entire model in mvvm\n\nextension Array {\n    var oneAndOnly: Element? {\n        if count == 1 {\n            return first\n        } else {\n            return nil\n        }\n    }\n}\n</code></pre> <pre><code>// ViewModel is a part of UI, but not the part of View in MVVM\nimport SwiftUI\n// view model in mvvm is a class, can inheritate\n\n//func makeCardContent(index: Int) -&gt; String {\n//    return \"\ud83d\ude0a\"\n//}\n\n// ObservableObject tells the world that something is changed\nclass EmojiMemoryGame: ObservableObject {\n    typealias Card = MemoryGame&lt;String&gt;.Card\n\n    private static let emojis = [\"\ud83d\ude97\",\"\ud83d\ude95\",\"\ud83d\ude99\",\"\ud83d\ude8c\",\"\ud83d\ude8e\",\"\ud83c\udfce\",\"\ud83d\ude93\",\"\ud83d\ude91\",\"\ud83d\ude92\",\"\ud83d\ude90\", \"\ud83d\udefb\",\"\ud83d\ude9a\",\"\ud83d\ude9b\",\"\ud83d\ude9c\"]\n    // put a static sign ahead, the emojis is really now the EmojiMemoryGame.emojis\n    // static will solve the property initializers errors(make it 'global')\n\n    // firstly, to creat ViewModel's own model\n    // view model itself is the truth, stores the truth of the Model(MVVM)\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//    MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4, createCardContent: { (index: Int) -&gt; String in // in seperate argument and function's content\n//            return \"\ud83d\ude0a\"\n//        })\n\n//    private(set) var model: MemoryGame&lt;String&gt; =\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { _ in \"\ud83d\ude0a\" }\n    private static func createMemoryGame() -&gt; MemoryGame&lt;String&gt; {\n        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 6) { pairIndex in\n            EmojiMemoryGame.emojis[pairIndex]\n        }\n    }\n\n    // the order of these properties(like model, like emojis) being initialized is random\n    // it is no way that you can have one of their initializers depending on another one already having been initialized\n    // when we want to initialize here, emojis may not initialize\n\n    // @Published means that \"something changed\" every time its model changes\n    @Published private var model = EmojiMemoryGame.createMemoryGame()\n//        MemoryGame&lt;String&gt;(numberOfPairsOfCards: 4) { pairIndex in\n//            emojis[pairIndex]\n//            // '=' is a property initializer\n//        }\n\n    // notice the func makeCardContent above, here to simplify the code\n\n    // private(set) can look (from other class), but cannot change\n    var cards: Array&lt;Card&gt; {\n        model.cards\n    }\n\n    // MARK: - Intent(s)\n\n    func choose(_ card: Card) {\n        // model is the model\n        model.choose(card)\n    }\n}\n</code></pre>"},{"location":"ios/iosstanford/lec7/","title":"Lecture 7","text":"<p>ViewModifier</p> <p>The ViewModifier protocol has one function in it.</p> <p>Its only job is to create a new View based on the thing passed to it.</p> <pre><code>protocol ViewModifier {\n  typealias Content // the type of the View passed to body(content:)\n  func body(content: Content) -&gt; some View {\n    return some View that almost certainly contains the View content\n  }\n}\n</code></pre> <p>When caa <code>.modifier</code> on a View, the <code>Content</code> passed to this function is that View</p> <p>ViewModifier code looks a lot like View code(<code>func body(content:)</code> instead of <code>var body</code>), because <code>ViewModifier</code>s are Views</p> <p>Animation</p> <p>Only changes can be animated.</p> <p>ViewModifier arguments</p> <p>Shapes</p> <p>The \"existence\" of a View in the UI</p> <p>Animation is showing the user changes that have already happened</p> <p>ViewModifiers are the primary \"change agents\" in the UI</p> <p>A change to a ViewModifier's arguments has to happen after the View is initially put in the UI.</p> <p>In other words, only changes in a ViewModifier's arguments since it joined the UI are animated.</p> <p>Not all ViewModifier arguments are animatable, but most are.</p> <p>A View coming on-screen is only animated if it's joining a container that is already in the UI</p> <p>A View going off-screen is only animated if it's leaving a container that is staying in the UI.</p> <p>Implicitly(automatically), by using the view modifier <code>.animation(Animation)</code></p> <p>Explicitly, by wrapping <code>withAnimation(Animation) {}</code></p> <p>By making Views be included or excluded from the UI</p> <p>Explicit animation creates an animation transaction during which all eligible changes made as a result of executing a block of code will be animated together.</p> <p>Explicit animations are almost always wrapped around calls to ViewModel Intent functions.</p> <p>Do not override an implicit animation.</p> <p>Transitions</p> <p>Transitions specify how to animate the arrival/departure of Views</p> <p>Only works for Views that are inside CTAAOS(Containers That Are Already On-Screen)</p> <p>Unlike <code>.animation()</code>, <code>.transition()</code> does not get redistributed to a container's content Views. So putting <code>.transition()</code> on the <code>ZStack</code> above only works if the entire <code>ZStack</code> came/went. Group and ForEach do distribute <code>.transition()</code> to their content Views, however.</p>"},{"location":"ios/iosstanford/lec8/","title":"Lecture 8","text":""},{"location":"language/german/apple/text1/","title":"\"Wir haben ein Jahr Vorsprung\"","text":"<p>Apples iPhone k\u00f6nnte den Markt f\u00fcr Multimedia-Handys gewaltig durcheinanderwirbeln.</p> <ul> <li>den Markt durcheinanderwirbeln \u27a1\ufe0f \u6405\u52a8\u5e02\u573a(\u9cb6\u9c7c\u6548\u5e94): Tesla k\u00f6nnte den chinesischen Markt von EV enorm durcheinanderwirbeln.</li> </ul> <p>Wir glauben, dass derartige vernetzte Multimediager\u00e4te jene Ger\u00e4te abl\u00f6sen werden, der nur eine einzige Funktion haben.</p> <ul> <li> <p>derartig == this kind of(auf Englisch)</p> </li> <li> <p>abl\u00f6sen: Die traditionelle Ger\u00e4te, die eine einzige Funktion hat, werden von Multimediager\u00e4ten wie iPhone abgel\u00f6st.</p> </li> </ul> <p>Aber Nokia hat den Markt f\u00fcr Musikhandys doch selbst ein wenig verschlafen.</p> <ul> <li>verschlafen: jemand kann die Augen aufhalten.</li> <li>den Markt verschlafen \u27a1\ufe0f \u4f7f\u5f97Markt\u53d8\u5f97schlafen, \u5f62\u5bb9\u4e0d\u6d3b\u8dc3</li> </ul> <p>Im vergangenen Jahr haben wir fast 70 Millionen Musikhandys verkauft. So viele iPods hat Apple in etwa f\u00fcnf Jahren abgesetzt.</p> <ul> <li>verkaufen == absetzen</li> </ul> <p>Unser Marktanteil betr\u00e4gt hier 50 Prozent, wie sind also unangefochten die Nummer eins.</p> <ul> <li>unangefochten == with no doubt</li> </ul>"},{"location":"language/german/apple/text1/#das-display-konnte-zerbrechen","title":"\"Das Display k\u00f6nnte zerbrechen\"","text":"<p>Wenn Apple noch l\u00e4nger gez\u00f6gert h\u00e4tte, w\u00e4ren die Leute irgendwann entt\u00e4uscht gewesen.</p> <ul> <li>If Apple hesitated any longer, people would have been disappointed at some point.</li> <li>z\u00f6gern == hesitate / entt\u00e4uschen = disappoint</li> </ul> <p>Ich bin aber gespannt darauf, wie es Apple gelingt, die verschiedenen Techniken im iPhone so zusammenzubringen, dass es gut funktioniert.</p> <ul> <li>gespannt darauf ... == be curious to</li> <li>wie es jd gelingt, ... zu tun == manage to do sth</li> </ul> <p>Es hat einen Touchscreen und nutzt Techniken, die zuvor noch niemand eingesetzt hat. Das Display nimmt praktisch die gesamte Oberfl\u00e4che ein. Es k\u00f6nnte permanent mit Fingerabdr\u00fccken bedeckt sein, es k\u00f6nnte auch leicht zerbrechen.</p> <ul> <li>einsetzen == benutzen</li> <li>einnehmen == take up</li> </ul> <p>Das Handy hat nur einen einzigen Knopf und ein ber\u00fchrungsempfindliches Display. Ein v\u00f6llig anderes Bedienkonzept als wir von Telefon kennen.</p> <ul> <li>ber\u00fchrungsempfindlich == sensitive to touch / empfindlich == sensitive</li> </ul> <p>Wenn Apple das iPhone nicht perfekt umsetzt, werden die Leute Schwierigkeiten machen.</p> <ul> <li>umsetzen: implement</li> </ul> <p>Das iPhone ist ein cooles Ger\u00e4t, aber es k\u00f6nnte sich als knifflig erweisen.</p> <ul> <li>knifflig == tricky</li> </ul>"},{"location":"language/german/apple/text1/#apple-auf-dem-weg-zu-neuen-markten","title":"Apple auf dem Weg zu neuen M\u00e4rkten","text":"<p>In der internationalen Presse herrscht weitgehende Einigkeit: Was Apple da auf der Macworld Expo vorgestellt hat, ist ein Knaller. Doch nicht alle Branchenbeobachter haut das Handy gleich um.</p> <ul> <li>\u8868\u660e\u5171\u8bc6\uff1aherrscht weitgehende Einigkeit</li> <li>\u8868\u660e\u51b2\u51fb\uff1aein Knaller</li> <li>\u8868\u660e\u5f81\u670d(umhauen)\uff1aDas Handy haut alle Branchenbeobachter gleich um.</li> </ul> <p>Niemand, der sich heute dieses Thema entgehen lassen w\u00fcrde. Da kann die liebe Konkurrenz nur vor Neid erblassen: An diesem Morgen erntet Apple mehr Presse, als die 2700 Aussteller der CES in Las Vegas zusammen in der ganzen Woche erhalten werden.</p> <ul> <li>sich etw entgehen == miss sth.</li> <li>vor Neid erblassen: \"\u5728\u5ac9\u5992\u524d\"\u8138\u8272\u53d8\u767d\uff0c\u5f62\u5bb9\u4e0d\u5982\u67d0\u4eba\u67d0\u7269\uff0cIch erblasse vor ihm\u8868\u660e\u201c\u6211\u201d\u4e0d\u53ca\u201c\u4ed6\u201d</li> <li>ernten == reap</li> </ul> <p>Das iPhone, schreiben die Asiaten, k\u00f6nnte sowohl Apple als auch den ganzen Mobilmarkt umkrempeln.</p> <ul> <li>umkrempeln == hochschlagen == hochkrempeln == \u5f7b\u5e95\u6539\u53d8</li> </ul> <p>Gar nicht abwegig, dass das reichen k\u00f6nnte, das iPhone trotz fehlender 3G-Features zu einem Erfolg zu machen. Wenn da nicht noch ein ebenfalls Apple-typischer Haken w\u00e4re: Das Ding wird richtig, richtig teuer.</p> <ul> <li>abwegig == absurd</li> <li>Haken == Nachteil</li> </ul>"},{"location":"language/german/apple/text1/#scharfer-schneller-ausdauernder","title":"Sch\u00e4rfer, schneller, ausdauernder","text":"<p>Sekunden sp\u00e4ter zeigte er das erste offizielle Bild des neue Smartphones, \u00fcber das seit langem orakelt wurde.</p> <ul> <li>orakeln == oracle(auf englisch) == voraussagen == vorhersagen</li> </ul> <p>Die schlachteten ihr Wissen reichlich aus, bevor sie das Ger\u00e4t auf Anfrage Apples zur\u00fcckgaben.</p> <ul> <li>ausschlachten (\u6beb\u65e0\u987e\u53ca\u5730)\u5229\u7528[\u8d2c]/\u62c6\u9664\u6709\u7528\u7684\u96f6\u4ef6</li> </ul> <p>Humorvoll jedenfalls kann man es nicht nennen, dass Gizmodo nun die Akkreditierend zur WWDC-Er\u00f6ffnungsveranstaltung verwehrt wurde.</p> <ul> <li>verwehren == abweisen/ablehnen/verweigern</li> <li>Adj jedenfalls kann man es nicht nennen: \u65e0\u8bba\u5982\u4f55\u4e0d\u80fd\u8bf4\u662f...\uff0c\u4f8b\u5982\uff1a\u65e0\u8bba\u5982\u4f55\uff0c\u5b89\u500d\u664b\u4e09\u7684\u53bb\u4e16\u4e0d\u80fd\u8bf4\u662f\u4e00\u4ef6\u9ad8\u5174\u7684\u4e8b: Fr\u00f6hlich jedenfalls kann man es nicht nennen, dass Shinzo Abe nach Attentat gestorben war.</li> </ul> <p>Steve Jobs rechnet das in 300 Stunden Standby-Zeit, sieben Stunden Sprechzeit und zehn Stunden Video gucken um.</p> <ul> <li>um/rechnen == \u6362\u7b97</li> </ul> <p>Mit einer Aufl\u00f6sung von f\u00fcnf Megapixeln schlie\u00dft sie zum Smartphone-Standard auf, wird von einem LED-Blitz begleitet, der bei schlechtem Umgebungslicht helfen soll.</p> <ul> <li>aufschlie\u00dfen zu == catch up with</li> </ul> <p>Bemerkenswert ist allerdings, dass sie auch noch Videos in der HD-Aufl\u00f6sung 720p aufnehmen kann. Hier d\u00fcrfte der A4-Prozessor die treibende Kraft sein. Passend dazu bietet Apple ab sofort eine an das Handy angepasste Version von Apples Videoschnittsoftware iMovie im App Store zum Preis von 4,99 Dollar an.</p> <ul> <li>Video aufnehmen == record video</li> <li>passend dazu ... \u6070\u597d\u7684\u662f...</li> </ul> <p>Dar\u00fcber hinaus wird das iPhone 4 mit einer zus\u00e4tzlichen Kamera f\u00fcr Videotelefonate ausgestattet sein.</p> <ul> <li>Dar\u00fcber hinaus == Furthermore</li> <li>ausstatten == equip</li> </ul> <p>Auch daf\u00fcr hat sich das Unternehmen einen griffigen Namen ausgedacht und bezeichnet die, bei anderen Smartphones l\u00e4ngst g\u00e4ngige, Videotelefoniefunktion als FaceTime.</p> <ul> <li>griffige Namen: \u54cd\u4eae\u7684\u540d\u5b57</li> <li>g\u00e4ngig == common</li> <li>ausdenken == come up with</li> </ul> <p>... ob diese Funktion danach auch f\u00fcr die Nutzung in UMTS-Netzen freigeschaltet wird, sagt Jobs allerdings nichts.</p> <ul> <li>freigeschaltet \u81ea\u52a8\u6253\u5f00\u7684\uff0c\u81ea\u52a8\u63a5\u901a\u7684</li> </ul> <p>Die wichtigsten neuen Funktionen: Eingeschr\u00e4nktes Multitasking, Apps k\u00f6nnen in Ordner sortiert werden, sowie eine vereinheitlichte Inbox, in der neue Nachrichten aller E-Mail-Accounts zusammengef\u00fchrt werden, die das iPhone abfragt.</p> <ul> <li>einschr\u00e4nken == limit</li> </ul> <p>Ebenso wie am Apple Tablet. soll man damit B\u00fccher und PDF-Dateien lesen und mit Anmerkungen versehen k\u00f6nnen.</p> <ul> <li>ebenso wie == just like</li> <li>mit Anmerkungen ... versehen == annotate</li> </ul>"},{"location":"language/german/apple/text2/","title":"Foxconn-Mitarbeiter d\u00fcrfen keinen Selbstmord mehr begehen","text":"<p>Zwischen M\u00e4rz und Mai letzten Jahres hatten neun Besch\u00e4ftigte des Konzerns Selbstmord begangen, allesamt Springer.</p> <ul> <li>Selbstmord begehen == commit suicide</li> </ul> <p>Seitdem hat das Unternehmen eine Reihe von Vorkehrungen getroffen, um Mitarbeiter vom Selbstmord abzuhalten.</p> <ul> <li>Vorkehrung == precaution</li> <li>jn von etw(D) abhalten == prevent</li> </ul> <p>Unter anderem installierte Foxconn an fast allen h\u00f6heren Firmengeb\u00e4uden Fangnetze, die Mitarbeiter beim Sturz in die Tiefe auffangen sollen.</p> <ul> <li>beim Sturz \u27a1\ufe0f jn/sich in A st\u00fcrzen \u628a..\u63a8\u5165</li> <li>auffangen == catch</li> </ul> <p>F\u00fcr Foxconn und Abnehmer wie Apple, HP, Nokia, Palm und Sony verursachten vor allem die Selbstmorde letztes Jahr ein massives PR-Problem.</p> <ul> <li>der Abnehmer == customer</li> </ul> <p>Zudem hatten sich Mitarbeiter Foxconn-Managern zufolge von den D\u00e4chern gest\u00fcrzt, um ihren Familien den Zugang zu Entsch\u00e4digungsprogrammen des Konzerns zu verschaffen.</p> <ul> <li>verschaffen \u27a1\ufe0f jm[sich] etw(A) verschaffen == gain sth.</li> <li>den Zugang zu etw verschaffen</li> </ul>"},{"location":"language/german/beim_bau_der_chinesischen_mauer/text1/","title":"Beim Bau der chinesischen Mauer(I)","text":"<p>Autor: Franz Kafka</p> <p>Von S\u00fcdosten und S\u00fcdwesten wurde der Bau herangef\u00fchrt und hier vereinigt.</p> <ul> <li>etw von ... heranf\u00fchren == bring sth from ...</li> </ul> <p>Es geschah das so, dass Gruppen von etwa zwanzig Arbeitern gebildet wurden, welche eine Teilmauer von etwa f\u00fcnfhundert Meter L\u00e4nge aufzuf\u00fchren hatten, eine Nachbargruppe baute ihnen dann eine Mauer von gleicher L\u00e4nge entgegen.</p> <ul> <li> <p>es geschieht das so, dass ...\uff1a\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u662f... \u27a1\ufe0f \u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u662f\uff0c\u5b66\u751f\u901a\u8fc7\u4e0d\u540c\u9636\u6bb5\u7684\u8003\u8bd5\u6839\u636e\u6210\u7ee9\u7533\u8bf7\u5927\u5b66\uff1aEs geschieht das so, dass Sch\u00fcler und Sch\u00fclerin die Pr\u00fcfungen in unterschiedlichen Abschnitten teilnehmen und sich nach den Ergebnissen um die Universit\u00e4t bewerben.</p> </li> <li> <p>auff\u00fchren == erbauen == errichten</p> </li> </ul> <p>Nachdem dann aber die Vereinigung vollzogen war, wurde nicht etwa der Bau am Ende dieser tausend Meter wieder fortgesetzt, vielmehr wurden die Arbeitergruppen wieder in ganz anderen Gegenden zum Mauerbau verschickt.</p> <ul> <li>vollziehen == complete == erf\u00fcllen == nachkommen == vollbringen</li> <li>Gegend == Bereich == Region</li> </ul> <p>Nat\u00fcrlich entstanden auf diese Weise viele L\u00fccken, die erst nach und nach langsam ausgef\u00fcllt wurden, machen sogar erst, nachdem der Mauerbau schon als vollendet verk\u00fcndigt worden war.</p> <ul> <li>auf diese Weise == in this way</li> <li>L\u00fccke == gap</li> </ul> <p>Ja, es soll L\u00fccken geben, die \u00fcberhaupt nicht verbaut worden sind, eine Behauptung allerdings, die m\u00f6glicherweise nur zu den vielen Legenden geh\u00f6rt, die um den Bau entstanden sind, und die f\u00fcr den einzelnen Menschen wenigstens mit eignen Augen und eignem Ma\u00dfstab infolge der Ausdehnung des Baus unnachpr\u00fcfbar sind.</p> <ul> <li>es soll ... geben, die ... verbaut worden sind, eine Behauptung, die ... zu ... geh\u00f6rt, die ... entstanden sind, und die ... mit ... infolge ... sind.</li> </ul> <p>Nun w\u00fcrde man von vornherein glauben, es w\u00e4re in jedem Sinne vorteilhafter gewesen, zusammenh\u00e4ngend zu bauen oder wenigstens zusammenh\u00e4ngend innerhalb der zwei Hauptteile.</p> <ul> <li>von vornherein: from the beginning</li> <li>zusammenh\u00e4ngend == contiguous</li> </ul> <p>Wie kann aber eine Mauer sch\u00fctzen, die nicht zusammenh\u00e4ngend gebaut ist. Ja, eine solche Mauer kann nicht nur nicht sch\u00fctzen, der Bau selbst ist in fortw\u00e4hrender Gefahr.</p> <ul> <li>zusammenh\u00e4ngend == fortw\u00e4hrend</li> </ul> <p>Diese in \u00f6der Gegend verlassen stehenden Mauerteile k\u00f6nnen immer wieder leicht von den Nomaden zerst\u00f6rt werden, zumal diese damals, ge\u00e4ngstigt durch den Mauerbau, mit unbegreiflicher Schnelligkeit, wie Heuschrecken, ihre Wohnsitze wechselten und deshalb vielleicht einen besseren \u00dcberblick \u00fcber die Baufortschritte hatten, als selbst wir, die Erbauer.</p> <ul> <li>Die in ... Mauerteile k\u00f6nnen ... von ... werden, ... , ge\u00e4ngstigt ..., mit ..., ihre ... wechselten und deshalb ... hatten, als ... , die Erbauer.</li> <li>unbegreifliche Schnelligkeit, wie Heuschrecken</li> </ul> <p>Trotzdem konnte der Bau wohl nicht anders ausgef\u00fchrt werden als es geschehen ist. Um das zu verstehen, muss man folgendes bedenken: Die Mauer sollte zum Schutz f\u00fcr die Jahrhunderte werden; sorgf\u00e4ltigster Bau, Benutzung der Bauweisheit aller bekannten Zeiten und V\u00f6lker, dauerndes Gef\u00fchl der pers\u00f6nlichen Verantwortung der Bauenden waren deshalb unumg\u00e4ngliche Voraussetzung f\u00fcr die Arbeit.</p> <ul> <li>ausf\u00fchren == carry out</li> <li>sorgf\u00e4ltig == careful </li> <li>unumg\u00e4nglich == essential</li> <li>anders als es geschehen ist == different than it was done</li> </ul> <p>Zu den niederen Arbeiten konnten zwar unwissende Tagl\u00f6hner aus dem Volke, M\u00e4nner, Frauen, Kinder, wer sich f\u00fcr gutes Geld anbot, verwendet werden; aber schon zur Leitung von vier Tagl\u00f6hnern war ein verst\u00e4ndiger, im Baufach gebildeter Mann n\u00f6tig; ein Mann, der imstande war, bis in die Tiefe des Herzens mitzuf\u00fchlen, um was es hier ging. Und je h\u00f6her die Leistung, desto gr\u00f6\u00dfer nat\u00fcrlich die Anforderungen. Und solche M\u00e4nner standen tats\u00e4chlich zur Verf\u00fcgung, wenn auch nicht in jeder Menge, wie sie dieser Bau h\u00e4tte verbrauchen k\u00f6nnen, so doch in gro\u00dfer Zahl.</p> <ul> <li>zur Verf\u00fcgung == available </li> <li>imstande == able: imstande sein. ... zu tun == be able to do</li> <li>Zu ... konnten ... werden; aber ... war ... n\u00f6tig; ein Mann, der ... war, ... mitzuf\u00fchlen, um was es ... ging. Und je h\u00f6her ... , desto gr\u00f6\u00dfer ... Und solche M\u00e4nner standen ..., wenn ... , wie sie ... h\u00e4tte verbrauchen k\u00f6nnen, so ...</li> </ul> <p>Man war nicht leichtsinnig an das Werk herangegangen. F\u00fcnfzig Jahre vor Beginn des Baues hatte man im ganzen China, das ummauert werden sollte, die Baukunst, insbesondere das Mauerhandwerk, zur wichtigsten Wissenschaft erkl\u00e4rt und alles andere nur anerkannt, soweit es damit in Beziehung stand.</p> <ul> <li>leichtsinnig == sorglos</li> <li>an etw(A) herangehen == \u505a...\u5de5\u4f5c</li> <li>mit etw(D) in Beziehung stehen == \u540c...\u6709\u5173\u7cfb == \u4e0e...\u76f8\u5173</li> </ul> <p>Ich erinnere mich sehr wohl, wie wir als kleine Kinder, kaum unserer Beine sicher, im G\u00e4rtchen unseres Lehrers standen, aus Kieselsteinen eine Art Mauer bauen mussten, wie der Lehrer den Rock sch\u00fcrzte, gegen die Mauer rannte, nat\u00fcrlich alles zusammenwarf und uns wegen der Schw\u00e4che unseres Baus solche Vorw\u00fcrfe machte, dass wir heulend uns nach allen Seiten zu unseren Eltern verliefen. - Ein winziger Vorfall, aber bezeichnend f\u00fcr den Geist der Zeit.</p> <ul> <li>den Rock sch\u00fcrzen \u64a9\u8d77\u88d9\u5b50</li> <li>jm Vorw\u00fcrfe machen \u6279\u8bc4\u67d0\u4eba</li> <li>sich zu ... verliefen</li> <li>winzig == ganz klein</li> </ul>"},{"location":"language/german/beim_bau_der_chinesischen_mauer/text2/","title":"Beim Bau der chinesischen Mauer(II)","text":"<p>Autor: Franz Kafka</p> <p>Ich sage Gl\u00fcck, denn viele, die fr\u00fcher die oberste H\u00f6he der ihnen zug\u00e4nglichen Ausbildung erreicht hatten, wussten jahrelang mit ihrem ihrem Wissen nichts anzufangen, trieben sich, im Kopf die gro\u00dfartigsten Baupl\u00e4ne, nutzlos herum und verlotterten in Mengen.</p> <ul> <li>wissen mit etw(D) etw(A) zu tun</li> <li>sich herumtreiben == (\u65e0\u6240\u4e8b\u4e8b)\u6f2b\u6e38\u3001\u95f2\u901b</li> <li>verlottern == go to ruin</li> </ul> <p>Es waren Maurer, die viel \u00fcber den Bau nachgedacht hatte und nicht aufh\u00f6rten, dar\u00fcber nachzudenken, die sich mit dem ersten Stein, den sie in den Boden einsenken lie\u00dfen, dem Bau verwachsen f\u00fchlten.</p> <ul> <li>etw(D) verwachsen f\u00fchlen \u540c...\u6709\u8054\u7cfb</li> </ul> <p>Solche Maurer trieb aber nat\u00fcrlich, neben der Begierde, gr\u00fcndlichste Arbeit zu leisten, auch die Ungeduld, den Bau in seiner Vollkommenheit endlich erstehen zu sehen.</p> <ul> <li>die Begierde == desire</li> <li>die Ungeduld == impatience</li> <li>in seiner Vollkommenheit endlich erstehen</li> </ul> <p>Aber f\u00fcr die unteren, geistig weit \u00fcber ihrer \u00e4u\u00dferlich kleinen Aufgabe stehenden M\u00e4nner, musste anders vorgesorgt werden. Mann konnte sie nicht z.B. in einer unbewohnten Gebirgsgegend, hunderte Meilen von ihrer Heimat, monate- oder gar jahrelang Mauerstein an Mauerstein f\u00fcgen lassen; die Hoffnungslosigkeit solcher flei\u00dfigen, aber selbst in einem langen Menschenleben nicht zum Ziel f\u00fchrenden Arbeit h\u00e4tte sie verzweifelt und vor allem wertloser f\u00fcr die Arbeit gemacht.</p> <ul> <li>Aber f\u00fcr ..., ... M\u00e4nner, musste ... vorgesorgt werden. Man konnte ... f\u00fcgen lassen; die ... , aber ... in einem Menschenleben nicht ... h\u00e4tte sie verzweifelt und vor allem wertlos f\u00fcr ... gemacht.</li> <li>Nomen + G + (Adj.-en)\uff1a...\u4e00\u7c7b\u7684...</li> </ul> <p>Alles bes\u00e4nftigte ihre Ungeduld. Das ruhige Leben der Heimat, in der sie einige Zeit verbrachten, kr\u00e4ftigte sie, das Ansehen, in dem alle Bauenden standen, die gl\u00e4ubige Demut, mit der ihre Berichte angeh\u00f6rt wurden, das Vertrauen, das der einfache, stille B\u00fcrger in die einstige Vollendung der Mauer setzte, alles dies spannte die Saiten der Seele.</p> <ul> <li>bes\u00e4nftigen == sooth == \u5b89\u629a</li> <li>etw(A) in etw(D) setzen \u27a1\ufe0f das Vertrauen in einstiger Vollendung der Mauer setzen \u5bf9\u8fc7\u53bb\u4fee\u5efa\u5b8c\u6210\u7684\u57ce\u5899(\u653e\u7f6e)\u4fe1\u5fc3</li> </ul> <p>Wie ewig hoffende Kinder nahmen sie dann von der Heimat Abschied, die Lust, wieder am Volkswerk zu arbeiten, wurde unbezwinglich. Sie reisten fr\u00fcher von Hause fort, als es n\u00f6tig gewesen w\u00e4re, das halbe Dorf begleitete sie langen Strecken weit.</p> <ul> <li>unbezwinglich == \u4e0d\u53ef\u6291\u5236\u7684</li> <li>langen Strecken weit == for a long distance</li> </ul> <p>Auf allen Wegen Gruppen, Wimpel, Fahnen, niemals hatten sie gesehen, wie gro\u00df und reich und sch\u00f6n und liebenswert ihr Land war. Jeder Landmann war ein Bruder, f\u00fcr den man eine Schutzmauer baute, und der mit allem, was er hatte und war, sein Leben lang daf\u00fcr dankte.</p> <ul> <li>alles, was er hat und ist == \u4e00\u5207\u548c\u8eab\u4efd</li> </ul> <p>Einheit! Einheit! Brust an Brust, ein Reigen des Volkes, Blut nicht mehr eingesperrt im k\u00e4rglichen Kreislauf des K\u00f6rpers, sondern s\u00fc\u00df rollend und doch wiederkehrend durch das unendliche China.</p> <ul> <li>k\u00e4rglich == knapp</li> <li>wiederkehrend == regelm\u00e4\u00dfig == wiederholend</li> </ul>"},{"location":"language/german/beim_bau_der_chinesischen_mauer/text3/","title":"Beim Bau der chinesischen Mauer(III)","text":"<p>Autor: Franz Kafka</p> <p>Zun\u00e4chst muss man sich doch wohl sagen, dass damals Leistungen vollbracht worden sind, die wenig hinter dem Turmbau von Babel zur\u00fcckstehen, an Gottgef\u00e4lligkeit allerdings wenigstens nach menschlicher Rechnung geradezu das Gegenteil jenes Baues darstellen.</p> <ul> <li>zun\u00e4chst muss man ... sagen, dass ... Leistungen vollbracht worden sind, die ... zur\u00fcckstehen, an ... nach ... etw darstellen.</li> <li>vollbringen == durchsetzen == erreichen == erzielen == schaffen == umsetzen == vollenden</li> <li>zur\u00fcckstehen hinter</li> </ul> <p>Seine Beweise bestanden nicht nur aus Schriften und Berichten, sondern er wollte auch am Orte selbst Untersuchungen angestellt und dabei gefunden haben, dass der Bau an der Schw\u00e4che des Fundaments scheiterte und scheitern musste.</p> <ul> <li>die Untersuchungen anstellen == make investigation</li> </ul> <p>In dieser Hinsicht allerdings war unsere Zeit jener l\u00e4ngst vergangenen weit \u00fcberlegen. Fast jeder gebildete Zeitgenosse war Maurer vom Fach und in der Folge der Fundamentierung untr\u00fcglich. Dahin zielte aber der Gelehrte gar nicht, sondern er behauptete, erst die gro\u00dfe Mauer werde zum erstenmal in der Menschenzeit ein sicheres Fundament f\u00fcr einen neuen Babelturm schaffen.</p> <ul> <li>untr\u00fcglich == zweifelsfrei == unzweifelhaft</li> <li>zielen == aim </li> </ul> <p>Und wozu waren in dem Werk Pl\u00e4ne, allerdings nebelhafte Pl\u00e4ne des Turmes gezeichnet und Vorschl\u00e4ge bis ins einzelne gemacht, wie man die Volkskraft in dem kr\u00e4ftigen neuen Werk straff zusammenfassen solle?</p> <ul> <li>nebelhaft == nicht deutlich/klar zu erkennen == undeutlich</li> <li>straff == fest == stramm</li> </ul> <p>Das menschliche Wesen, leichtfertig in seinem Grund, von der Natur des auffliegenden Staubes, vertr\u00e4gt keine Fesselung; fesselt es sich selbst, wird es bald wahnsinnig an den Fesseln zu r\u00fctteln anfangen und Mauer, Kette und sich selbst in alle Himmelsrichtungen zerrei\u00dfen.</p> <ul> <li>leichtfertig == frivolous</li> <li>die Natur des auffliegenden Staubes \u27a1\ufe0f Staub == dust</li> <li>die Fesselung vertragen == \u675f\u7f1a</li> <li>sich fesseln</li> </ul>"},{"location":"language/german/beim_bau_der_chinesischen_mauer/text4/","title":"Beim Bau der chinesischen Mauer(IV)","text":"<p>Autor: Franz Kafka</p> <p>Es is m\u00f6glich, dass auch diese, dem Mauerbau sogar gegens\u00e4tzlichen Erw\u00e4gungen von der F\u00fchrung bei der Festsetzung des Teilbaus nicht unber\u00fccksichtigt geblieben sind.</p> <ul> <li>es is m\u00f6glich, dass ... Erw\u00e4gungen von ... bei ... geblieben sind.</li> <li>gegens\u00e4tzlich == kontr\u00e4r == entgegengesetzt</li> <li>die Erw\u00e4gung == consideration</li> </ul> <p>Und deshalb will es dem unbestechlichen Betrachter nicht eingehen.</p> <ul> <li>es geht jm(D) ein == \u67d0\u4eba\u63a5\u53d7\u67d0\u4e8b</li> </ul> <p>Aber der Teilbau war nur ein Notbehelf und unzweckm\u00e4\u00dfig. Bleibt die Folgerung, dass die F\u00fchrerschaft etwas Unzweckm\u00e4\u00dfiges wollte. - Sonderbare Folgerung! - Gewiss, und doch hat sie auch von anderer Seite manche Berechtigung f\u00fcr sich. Heute kann davon vielleicht ohne Gefahr gesprochen werden.</p> <ul> <li>ein Notbehelf == \u6743\u5b9c\u4e4b\u8ba1</li> <li>unzweckm\u00e4\u00dfig = impractical \u27a1\ufe0f zweckm\u00e4\u00dfig = practical</li> </ul> <p>Ein sehr vern\u00fcnftiger Grundsatz, der \u00fcbrigens noch eine weitere Auslegung in einem sp\u00e4ter oft wiederholten Vergleich fand.</p> <ul> <li>vern\u00fcnftig == reasonable</li> <li>Auslegung == Erkl\u00e4rung == Darstellung</li> </ul> <p>Num mag dieser Vergleich w\u00e4hrend des Mauerbaues au\u00dferordentlich treffend gewesen sein.</p> <ul> <li>au\u00dferordentlich == sehr/\u00fcberdurchschnittlich</li> </ul> <p>Auf den wahrheitsgetreuen Bildern der K\u00fcnstler sehen wir diese Gesichter der Verdammnis, die aufgerissenen M\u00e4uler, die mit hoch zugespitzten Z\u00e4hnen besteckten Kiefer, die verkniffenen Augen, die schon nach dem Raub zu schielen scheinen, den das Maul zermalmen und zerrei\u00dfen wird.</p> <ul> <li>wahrheitsgetreu == wahr == wahrhaftig == wahrheitsgem\u00e4\u00df</li> <li>aufrei\u00dfen == zerrei\u00dfen \u27a1\ufe0f einen Brief aufrei\u00dfen</li> <li>der Maul == mouth</li> <li>der Kiefer == jaw</li> <li>der Raub == robbery</li> </ul>"},{"location":"language/german/beim_bau_der_chinesischen_mauer/text5/","title":"Beim Bau der chinesischen Mauer(V)","text":"<p>Autor: Franz Kafka</p> <p>Es gibt bestimmte Fragen, denen man nur mit diesem Mittel gewisserma\u00dfen an den Nerv herankommt - und ich habe dabei gefunden, dass wir Chinesen gewisse volkliche und staatliche Einrichtungen in einzigartiger Klarheit, andere wieder in einzigartiger Unklarheit besitzen.</p> <ul> <li>gewisserma\u00dfen == sozusagen == \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a</li> <li>herankommen</li> <li>einzigartig == individuell == unique</li> </ul> <p>Wir waren freilich - die einzige Neugierde, die uns erf\u00fcllte - immer bestrebt, irgend etwas von der Art zu erfahren.</p> <ul> <li>freilich == nat\u00fcrlich</li> <li>bestreben etw zu tun</li> </ul> <p>Und vor der ganzen Zuschauerschaft seines Todes - alle hindernden W\u00e4nde werden niedergebrochen, und auf den weit und hoch sich schwingenden Freitreppen stehen im Ring die Gro\u00dfen des Reiches - vor allen diesen hat er den Boten abgefertigt.</p> <ul> <li>niederbrechen == zerbrechen</li> <li>auf den weit und hoch sich schwingenden Freitreppen</li> <li>abfertigen == schicken</li> </ul> <p>Diese Auffassung will ich nun durchhaus nicht als eine Tugend gelten lassen, im Gegenteil. Zwar ist sie in der Hauptsache von der Regierung verschuldet, die im \u00e4ltesten Reich der Erde bis heute nicht imstande war, oder es  jedenfalls doch vernachl\u00e4ssigte, die Institution des Kaisertums zu solcher Klarheit auszubilden, dass sie bis an die fernsten Grenzen des Reiches unmittelbar und unabl\u00e4ssig wirken konnte.</p> <ul> <li>vernachl\u00e4ssigen == ignore</li> <li>unabl\u00e4ssig == ausdauernd</li> </ul> <p>Andrerseits aber liegt doch auch darin eine Schw\u00e4che der Vorstellung - oder Glaubenskraft beim Volke, welches nicht dazu gelangt, das Kaisertum aus der Pekinger Versunkenheit in aller Lebendigkeit und Gegenw\u00e4rtigkeit an seine Untertanenbrust zu ziehen, die doch nichts Besseres will, als eben diese Ber\u00fchrung zu f\u00fchlen und an ihr zu vergehen.</p> <ul> <li>Versunkenheit == \u4e13\u5fc3</li> <li>Ber\u00fchrung == Kontakt</li> <li>jm vergeht etw: \u67d0\u4eba\u5931\u53bb\u67d0\u7269</li> </ul> <p>Es gibt vielleicht kein kaisertreueres Volk als das unsrige im S\u00fcden, aber die Treue kommt dem Kaiser nicht zugute.</p> <ul> <li>etw kommt jm zugute \u5bf9\u67d0\u4eba\u6709\u597d\u5904</li> </ul> <p>Keinewegs sittenlos, ich habe solche Sittenreinheit, wie in meiner Heimat kaum jemals auf meinen Reisen angetreoffen.</p> <ul> <li>sittenlos == \u4e0d\u9053\u5fb7\u7684</li> <li>Sittenreinheit == \u9053\u5fb7\u7eaf\u6d01</li> <li>antreffen == treffen</li> </ul> <p>Aber doch ein Leben, das unter keinem gegenw\u00e4rtigen Gesetze steht und nur der Weisung und Warnung gehorcht, die aus alten Zeiten zu uns hin\u00fcberreicht.</p> <ul> <li>gehorchen vi. \u670d\u4ece</li> </ul>"},{"location":"language/german/kultur/text1/","title":"\u00dcber einige Merkmale westlicher Gesellschaft","text":"<p>Merkmale/Gesellschaft/Zusammenhaft der Menschen/Gruppe</p> <p>Gesellschaft/Einzelne/Identit\u00e4t/Ansehen/Lebenskraft</p> <p>Westliche Gesellschaft/Individuum/Bedeutung</p> <p>hohe Scheidungsrate/Zahl/unvollst\u00e4ndige Familien</p> <p>Kinder/Verantwortung</p> <p>Grund/Erziehung/Jugendlichen/Pers\u00f6nlichkeit/Erfolg/F\u00e4higkeit/Mutivation</p> <p>Betonung/Individualit\u00e4t/Freiheit/westliche Gesellschaft</p> <p>Gesellschaft/Kinder/Eltern/Verh\u00e4ltnis/Ergebenheit/Pflicht</p> <p>Westliche Gesellschaft/Kinder-Eltern-Verh\u00e4ltnis/Opfer</p> <p>Kind/Vogel</p> <p>Merkmale/Westliche Gesellschaft/Frauen/W\u00fcrde/Achtung</p> <p>Gesellschaft/Frauen/Macht/M\u00e4nner/Status/Anstrengung/Heirat/Geschlechtverkehr</p> <p>Wert/Aufrichtigkeit/pers\u00f6nliche Redlichkeit/soziale Harmonie</p> <p>Kultur/Japan/China/Aufrichterhaltung/Beziehung/respekvolle Haltung gegen\u00fcber den \u00c4lterer oder Autorit\u00e4tpersonen/\u00c4rger/Eigenempfingdung/Andere</p> <p>Haltung/Charakteristikum des Erwachsenen Menschen/Unehrlichkeit/Heuchelei</p> <p>Westliche Gesellschaft/Meinung offen sagen</p> <p>Notl\u00fcgen?/Sch\u00fcchternheit?/Unterw\u00fcrfigkeit?</p> <p>Westliche Gesellschaft/Unterw\u00fcrfigkeit/Japan und China/Respekt</p> <p>Individuum/Wert/soziale Gruppe/Westliche Menschen/Wertvorstellung/Selbstverwirklichung/Ideal/Andere Gesellschaft zum Gegenteil</p>"},{"location":"language/german/oeko/text1/","title":"\u00d6kostrom - was der Umwelt wirklich nutzt","text":"<p>Deutschen/\u00d6kostrom/Ausbau Erneuerbarer Energie/Stromrechung/Atomkraft</p> <p>Deutschen/beim Stromanbieter/\u00d6kostrom-Tarif</p> <p>Erneuerbare Energie/Kohlenkraftwerken</p> <p>Gr\u00fcner Energie/Steckdosen</p> <p>Verbraucher/Entscheidung/Anteil</p> <p>2013/20 Prozent</p> <p>Nachfrage/\u00d6kostrom</p> <p>Energiewende</p> <p>Wurzeln/Umweltbewegung/Atomdiskussion/Kritierium</p> <p>Stromanbieter/Energiekonzernen/konventionelle Kraftswerk</p> <p>Neubau von Atom-Kohlenkrafswerk </p> <p>Wahl des Stromanbieters/Kosten des neuen Tarifs/Unternehmensphilosophie der Stromanbieter</p> <p>Firmen/\u00d6kostrom-Tarife/\u00d6kostrom-Anlage/Ausbau der erneuerbaren Energie</p> <p>Vielleicht hat das Wurzel in der deutschen Umweltbewegung und ganzen Atomdiskussion der letzten Jahre - das war sicherlich ein gro\u00dfes Kriterium daf\u00fcr.</p> <ul> <li>das Wurzel == die Ursprung == die Ursache</li> </ul> <p>Denn es gibt Firmen, die nur \u00d6kostrom-Tarife anbieten und ausschlie\u00dflich den Bau von \u00d6kostrom-Anlagen unterst\u00fctzen.</p> <ul> <li>ausschlie\u00dflich(adv.) == nur</li> </ul>"},{"location":"language/german/oeko/text2/","title":"Mehr Unabh\u00e4ngigkeit bei Kohle, Gas und \u00d6l","text":"<p>Seit Beginn des russischen Angriffskrieg auf die Ukraine gilt es, schneller von russischen Rohstoffen wie Kohle, Gas und \u00d6l unabh\u00e4ngig zu werden - und gleichzeitig Versorgungssicherheit zu gew\u00e4hrleisten.</p> <ul> <li>gew\u00e4hrleisten == garantieren</li> </ul> <p>Haushalte, Verkehr und Industrie verbrauchen jeweils etwa en Drittel, ein kleinerer Anteil entf\u00e4llt auf Gewerbe, Handel und Dienstleistungen.</p> <ul> <li>etw auf etw entfallen == \u5206\u644a</li> <li>das Gewerbe == Branche == Industrie</li> </ul> <p>F\u00fcr die Gewinnung von Energie werden bisher \u00fcberwiegend fossile Energiequellen wie Kohle, Erdgas und Erd\u00f6l eingesetzt.</p> <ul> <li>\u00fcberwiegend == gr\u00f6\u00dftenteils == in aller Regel == meist == nomalerweise == vorwiegend</li> </ul> <p>Sie werden in Strom oder W\u00e4rme umgewandelt oder als Kraftstoff im Verkehr genutzt.</p> <ul> <li>umwandeln == transformieren == verwandeln == umrechnen</li> </ul> <p>Deutschland hat das Ziel, bis zum Ende des Jahres komplett auf die Einfuhr russischer \u00d6lprodukte zu verzichten.</p> <ul> <li>verzichten == von etw absehen</li> </ul> <p>\u00d6l- und Kohlekraftwerke sollen so ert\u00fcchtigt werden, dass sie jederzeit auf Abruf f\u00fcr den Markt bereitstehen.</p> <ul> <li>ert\u00fcchtigen == Sport treiben == Sport machen == kr\u00e4ftigen</li> <li>bereitstehen == verf\u00fcgbar gemacht == zur Verf\u00fcgung stehen</li> </ul> <p>Mit dem ersten Teil des \"Sommerpakets\" will die Bundesregierung zudem den Winkkraftausbau an Land deutlich schneller planen und genehmigen.</p> <ul> <li>genehmigen == erlauben</li> </ul> <p>Ob und inwiefern eine Verl\u00e4ngerung der Laufzeit von Atomkraftwerken zur Energiesicherheit beitr\u00e4gt.</p> <ul> <li>inwiefern == in welchem Ausma\u00df</li> </ul> <p>Wenn die Ergebnisse vorliegen, kann die Lage gegebenenfalls nue eingesch\u00e4tzt und evaluieret werden.</p> <ul> <li>gegebenenfalls(ggf.) == n\u00f6tigenfalls == wenn n\u00f6tig</li> </ul> <p>Sie sind so ausgerichtet, dass sie Russland mehr schaden als uns selbst.</p> <ul> <li>ausrichten == mit einer Handlung etwas bewirken</li> </ul> <p>Russland ist weitgehend vom westlichen Finanzmarkt abgeschnitten, die russiche Zentralbank kann nicht mehr auf ihre Reverven zugreifen, die russichen Einnahme aus Exporten wurden begrenzt und Russlands M\u00f6glichkeiten, wichtige westliche Technologie zu importieren, beschnitten.</p> <ul> <li>abschneiden == abtrennen == wegschneiden</li> <li>auf etw zugreifen \u6293\u53d6</li> <li>beschneiden == begrenzen</li> </ul> <p>Mit der Einschr\u00e4nkung der \u00d6lexportm\u00f6glichkeiten ergeben sich weitere Einschnitte bei den russichen Einnahme.</p> <ul> <li>sich ergeben == entstehen</li> <li>die Einschnitte(Bruch/Unterbrechung) bei den russichen Einnahme</li> </ul> <p>Auch Privathaushalte sollen mitmachen, denn auf sie entfallen 29 Prozent des gesamten Energieverbrauchs - \u00fcberwiegend f\u00fcr Warmwasser und Heizen.</p> <ul> <li>auf etw entfallen etw</li> </ul> <p>Eigent\u00fcmerinnen und Vermieter sollen Heizungschecks, Heizungsabgleiche machen lassen oder ieffiziente Heizungspumpen austauschen.</p> <ul> <li>austauschen == ersetzen</li> </ul> <p>F\u00fcr Mieterinnen und Mieter soll es einen vertraglichen Spielraum zur Absenkung der Mindestraumtemperatur geben.</p> <ul> <li>das Spielraum == Platz</li> <li>vertraglich == Vertrag(\u5408\u540c/\u6761\u7ea6) + lich</li> </ul>"},{"location":"language/german/oeko/text3/","title":"Die Energiewende und ihre geopolitische Konsequenzen","text":"<p>Die Elektrifizierung von fossilen Rohstoff-Lieferketten, st\u00e4rkt den Zugang zu </p>"},{"location":"language/german/politik/text1/","title":"Tr\u00e4gt Finnland zur Uniper-Rettung bei?","text":"<p>Die Bundesregierung strebt eine schnelle L\u00f6sung zur Rettung des Energiekonzerns Uniper an.</p> <ul> <li>die L\u00f6sung anstreben \u5bfb\u6c42\u89e3\u51b3\u65b9\u6848</li> </ul> <p>Die Verhandlungen zur Rettung des angeschlagenen Gas-Importeurs Uniper laufen seit Tagen.</p> <ul> <li>angeschlagener Konzern \u7834\u4ea7\u7684\u4f01\u4e1a</li> <li>die Verhandlungen laufen</li> </ul> <p>Es m\u00fcsse kurzfristig eine L\u00f6sung f\u00fcr das angeschlagene Unternehmen gefunden werden.</p> <ul> <li>kurzfristig == bald == in Kurzem</li> </ul> <p>Uniper ist unter Druck geraten, nachdem Russland zuletzt die Gaslieferungen nach Deutschland gedrosselt hat.</p> <ul> <li>drosseln == abschw\u00e4chen == bes\u00e4nftigen</li> </ul> <p>Bundeskanzler Olaf Scholz hatte Uniper nach dessen Antrag auf Staatshilfe bereits Unterst\u00fctzung zugesichert.</p> <ul> <li>zusichern == versprechen == zusagen == versichern</li> </ul> <p>Es geh\u00f6rt ja jemandem, auch jemandem, der solvent ist und der st\u00fctzen kann.</p> <ul> <li>solvent == zahlungsf\u00e4hig</li> </ul>"},{"location":"language/german/politik/text10/","title":"Erst das Gesch\u00e4ft, dann die Menschenrechte","text":"<p>Welche, das wage er derzeit nicht vorzuahnen.</p> <ul> <li>wagen zu tun</li> </ul> <p>Die politische Isolation von MBS hielt international nicht lang an, daf\u00fcr ist Saudi-Arabien als Energielieferant und Wirtschaftsmacht zu wichtig.</p> <ul> <li>anhalten == last</li> </ul>"},{"location":"language/german/politik/text11/","title":"Wohngeldreform: Das plant die Bundesregierung","text":"<p>K\u00fcnftig sollen weitaus mehr Menschen als bisher vor finanzieller \u00dcberforderung beim Wohnen gesch\u00fctzt werden.</p> <ul> <li>weitaus + mehr + ... als bisher ... beim ...</li> </ul> <p>Angesichts immer weiter steigender Wohn- und Energiekosten ist die beabsichtigte Gesetze\u00e4nderung dringend erforderlich.</p> <ul> <li>beabsichtigt == die Absicht haben</li> <li>erforderlich == notwendig == n\u00f6tig</li> </ul> <p>Fehlendes Personal in den Wohngeldstellen k\u00f6nne so kurzfristig nicht aufgestockt werden, auch digitale L\u00f6sungen st\u00fcnden noch nicht fl\u00e4chendeckend zur Verf\u00fcgung.</p> <ul> <li>aufstocken == erh\u00f6hen</li> <li>fl\u00e4chendeckend == allerseits == an allen Ecken und Enden</li> </ul> <p>Boycott und Sanktionen des Westens gegen das Land seien stets eher halbherzig.</p> <ul> <li>stets == immer</li> <li>halbherzig == min halber Kraft</li> </ul>"},{"location":"language/german/politik/text2/","title":"Wo bleibt das Machtwort des Kanzlers?","text":"<p>Die Bundesregierung muss sich wegen des Krieges in der Ukraine auf alle denkbaren energiepolitischen Szenarien vorbereiten - auch die einer monatelangen Unterbrechung der Gasstr\u00f6me.</p> <ul> <li>sich auf etw vorbereiten == prepare for</li> </ul> <p>Es gilt, gesellschaftliche Zerw\u00fcrfnisse im Herbst und Winter zu vermeiden, wenn Gasmengen zu knapp werden sollten, um noch alle Anspr\u00fcche von Industrie und Haushalten zu erf\u00fcllen.</p> <ul> <li>gesellschaftliche Zerw\u00fcrfnisse vermeiden == avoid disagreement</li> <li>alle Anspr\u00fcche erf\u00fcllen == meet all demands</li> </ul> <p>Die SPD versucht, das Thema Kleinzureden, indem sie es eine \"Scheindebatte\" nennt - und unterstellt damit dem politischen Gegner eher parteitaktische Motive.</p> <ul> <li>unterstellen \u628a...\u5f3a\u52a0\u7ed9...</li> </ul> <p>CDU-Partei- und -Faktionschef Friedrich Merz springt der FDP bei.</p> <ul> <li>beispringen == helfen</li> </ul> <p>..., bei dem sie einen Keil in die Ampel treiben kann.</p> <ul> <li>einen Keil in etw(A) treiben \u5728...\u4e4b\u95f4\u6253\u5165\u6954\u5b50</li> </ul> <p>H\u00e4lt Scholz sich ein Hintert\u00fcrchen offen?</p> <ul> <li>jd h\u00e4lt sich etw(A) Adj. == \u4fdd\u6301\u4ec0\u4e48\u4ec0\u4e48\u4e1c\u897f\u600e\u4e48\u6837 == keep sth. adj.</li> </ul> <p>Was allerdings erkennbar ausbleibt, ist ein richtiges Machtwort des Kanzlers in Richtung FDP.</p> <ul> <li>ausbleiben == fehlen(\u7269\u505a\u4e3b\u8bed) \u27a1\ufe0f etw fehlt jm</li> </ul> <p>Und erst \u00fcber eine befristete Laufzeitverl\u00e4ngerung sprechen w\u00fcrde, wenn die Sicherheitsbedenken ausger\u00e4umt seien.</p> <ul> <li>befristet == begrenzt \u27a1\ufe0f langfristig / kurzfristig</li> <li>ausr\u00e4umen == resolve</li> </ul> <p>Es is deswegen in der Ampel-Regierung sp\u00fcrbar, in einer solch krisenhaften energiepolitischen Lage keine allzu klaren Festlegungen f\u00fcr die kommenden Monate treffen zu wollen.</p> <ul> <li>sp\u00fcrbar == noticeable</li> <li>allzu == too</li> <li>Festlegungen treffen</li> </ul> <p>Es is davon auszugehen, dass beide Parteien wissen, dass sie wom\u00f6glich in einer sich zuspitzenden Krisensituation im Herbst machen vor\u00fcbergehend neu bewerten m\u00fcssen.</p> <ul> <li>es is davon auszugehen == it can be assumed that ...</li> <li>vor\u00fcbergehend == temporarily</li> <li>bewerten == assess</li> </ul>"},{"location":"language/german/politik/text3/","title":"Merkels Geschenk","text":""},{"location":"language/german/politik/text3/#merkels-karte","title":"Merkels Karte","text":"<p>\"Die Deutschen haben eindeutig Hintergedanken\", meint einer, und ein anderer mutma\u00dft.</p> <ul> <li>mutma\u00dfen == guess</li> </ul> <p>Verwirrenderweise wird im chinesischen Netz noch eine zweite Karte als Merkels Geschenk ausgegeben, die der Brite John Dower 1844 ver\u00f6ffentlicht hatte und die all die auf der anderen Karte ausgeschlossenen Gebiete einschlie\u00dft.</p> <ul> <li>verwirrenderweise == \u4ee4\u4eba\u56f0\u60d1\u7684...</li> </ul> <p>Diese Karte wird entsprechend kontr\u00e4r gedeutet, als Erinnerung im Krim-Konflikt, dass Russland auch China Gebiete abgenommen haben, oder als Ermunterung im Konflikt um die Diaoyu-Inseln.</p> <ul> <li>Gebiete abnehmen \u27a1\ufe0f vt.\u53d6\u4e0b\uff1b\u51cf\u8f7b\uff1b\u5207\u9664</li> <li>Ermunterung == Aufmunterung</li> </ul>"},{"location":"language/german/politik/text3/#merkels-geschenk-fur-xi-erzunt-chinas-blogger","title":"Merkels Geschenk f\u00fcr Xi erz\u00fcnt Chinas Blogger","text":"<p>Am 28. M\u00e4rz schenkt Kanzlerin Angela Merkel(CDU) Pr\u00e4sident Xi Jinping die historische Karte, die viele chinesische Blogger in Aufregung versetzt.</p> <ul> <li>in Aufregung versetzen == w\u00fctend sein</li> </ul> <p>Internetzensoren l\u00f6schen Mikroblogs, die die deutsche Regierungschefin beleidigen und Russland schm\u00e4hen.</p> <ul> <li>l\u00f6schen == eliminieren</li> <li>beleidigen == schm\u00e4hen</li> </ul> <p>Chinesische Geschichtswissenschaftler fordern in dem bizarren Streit dazu auf, sich rational mit der Entwicklung und den Inhalten historischer und geographischer Landkarten Chinas zu besch\u00e4ftigen - und nicht patriotischen Wirrk\u00f6pfen das Feld zu \u00fcberlassen.</p> <ul> <li>jm etw(A) \u00fcberlassen</li> <li>patriotische Wirrk\u00f6pfen</li> </ul>"},{"location":"language/german/politik/text4/","title":"\"China nutzt Pelosi-Besuch als Vorwand\"","text":"<p>China nutzt Pelosi-Besuch als Vorwand.</p> <ul> <li>der Vorwand - die Vorw\u00e4nde == die Ausflucht(-e)</li> </ul> <p>Taiwan wittert ebenfalls Gefahr - und stuft die Man\u00f6ver als Simulation eines Angriffs ein.</p> <ul> <li>wittern == merken</li> <li>ein/stufen == ordnen: Sein Verhalten wird von der Polizei als gef\u00e4hrlich eingestuft.</li> </ul> <p>Es sieht die Insel als Teil der Volksrepublik an und lehnt offizielle Kontakte anderer L\u00e4nder vehement ab.</p> <ul> <li>vehement == heftig</li> </ul> <p>Die Chinesen k\u00f6nnen viel daf\u00fcr tun, die Spannungen zu verringern, indem sie einfach ihre provokanten Milit\u00e4r\u00fcbungen beenden und ihren Ton m\u00e4\u00dfigen.</p> <ul> <li>m\u00e4\u00dfigen == drosseln</li> </ul> <p>Pekings Man\u00f6ver um die demokratische Insel Taiwan erh\u00f6hen nicht nur die Gefahr ungewollter Zwischenf\u00e4lle - sie belasten auch die ohnehin angespannten Beziehungen zwischen China und den USA.</p> <ul> <li>die Gefahr ungewollter Zwischenf\u00e4lle</li> <li>ohnehin angespannten Beziehungen \u672c\u5c31\u7d27\u5f20\u7684\u5173\u7cfb</li> </ul>"},{"location":"language/german/politik/text5/","title":"16 chinesische Kampfjets \u00fcberqueren die Medianlinie","text":"<p>16 chinesische Kampfjets \u00fcberqueren die Medianlinie</p> <ul> <li>\u00fcberqueren == durchfahren == durchqueren</li> </ul> <p>Jetzt meldet das Verteidigungsministerium, dass Kampfjets in seine Luftverteidigungszone eingedrungen seien.</p> <ul> <li>in ... eindringen(vi.) sein == \u4fb5\u5165</li> </ul> <p>Seitdem haben sich sowohl China als auch Taiwan meistens daran gehalten, die Grenze nicht zu \u00fcberschreiten.</p> <ul> <li>sich an etw halten == \u9075\u5b88</li> </ul> <p>Seit der Spaltung zwischen China und Taiwan im Jahr 1949 betrachtet Peking die Insel als abtr\u00fcnniges Gebiet, das es wieder mit dem Festland vereinigen will - notfalls mit millit\u00e4rischer Gewalt.</p> <ul> <li>die Spaltung == split</li> <li>etw als etw betrachten</li> <li>abtr\u00fcnnig == rebellisch</li> <li>notfalls == zur Not == als letzte M\u00f6glichkeit == im \u00e4u\u00dferten Notfall</li> </ul>"},{"location":"language/german/politik/text6/","title":"Bef\u00fcrchtete Eskalation im Taiwankonflikt - deutsche Au\u00dfenpolitiker warnen vor katastrophalen Folgen","text":"<p>Er f\u00fcrchte, dass en chinesischer Angriff auf Taiwan deutlich fr\u00fcher kommen k\u00f6nnte als bisher angenommen.</p> <ul> <li>fr\u00fcher als bisher angenommen == sooner than previously thought</li> </ul> <p>In der entsprechenden Ank\u00fcndigung lie\u00df sie offen, ob sie mit ihrer sechsk\u00f6pfigen Delegation des US-Kongresses einen Zwischenstopp in Taiwan einlegt. Erw\u00e4hnt wurden nur Stationen in Singapur, Malaysia, S\u00fcdkorea und Japan.</p> <ul> <li>erw\u00e4hnen == \u63d0\u53ca</li> </ul> <p>Es ist in unserem ureigenen Interesse, dass es nicht zu einem parallelen Konflikt zwischen Russland und der Ukraine und zwischen China und Taiwan kommt.</p> <ul> <li>ureigen == essenziell == in der Natur der Sache == zu eigen</li> <li>es kommt zu etw == is</li> </ul>"},{"location":"language/german/politik/text7/","title":"Und er kann doch l\u00e4cheln","text":"<p>Die ruppigen Nationalisten der Trump-Regierung hatten das Nachsehen.</p> <ul> <li>das Nachsehen haben == scheitern</li> </ul> <p>Die gr\u00f6\u00dfte Sorge des chinesischen Pr\u00e4sidenten Xi Jinping d\u00fcrfte in Mar-a-Lago gewesen sein, dass ein US-amerikanisches Pendant irgendetwas Unvorhergesehenes sagt oder tut.</p> <ul> <li>unvorhergesehen == \u00fcberraschenderweise</li> </ul> <p>Ob hinter verschlossenen T\u00fcren bei Konfliktthemen in einer h\u00e4rteren Tonlage gesprochen wurde, drang nicht nach au\u00dfen.</p> <ul> <li>dringen nach au\u00dfen == leak out</li> </ul> <p>Xi Jinping brauchte in Amerika auf jeden Fall einen reibungslosen Auftritt, einen respektvollen Empfang und angemessene Worte.</p> <ul> <li>reibungslos == smooth</li> <li>Empfang == reception</li> <li>angemessene Worte == appropriate words</li> </ul> <p>Im Herbst stehen f\u00fcr den chinesischen Pr\u00e4sidenten innenpolitisch richtungsweisende Personalentscheidungen an.</p> <ul> <li>anstehen == zu erledigen sein == zu tun sein</li> </ul>"},{"location":"language/german/politik/text8/","title":"Wirtschaftskrieg mit China w\u00e4re teuer","text":"<p>H\u00f6here Einfuhrz\u00f6lle und andere Handelshemmnisse auf beiden Seiten w\u00fcrden lauf den ifo-Berechung das deutsche Bruttoinlandsprodukt um 0,81 Prozent sinken lassen.</p> <ul> <li>etw um ... Prozent sink lassen</li> </ul> <p>Unternehmen sollte sich nicht ohne Not von wichtigen Handelspartnern abwenden, sondern parallel auf Vorleistungen aus anderen L\u00e4ndern setzen, um einseitige und kristische Abh\u00e4ngigkeiten von bestimmten M\u00e4rkten und autorit\u00e4ren Regimes zu verringern.</p> <ul> <li>sich ohne Not von ... abwenden</li> </ul> <p>Das Handelsabkommen zwischen der EU und den USA k\u00f6nnte die negativen Auswirkungen der Entkopplung des Westens von China auf die deutsche und US-Wirtschaft abfedern, sie aber nicht vollst\u00e4ndig ausgleichen.</p> <ul> <li>abfedern == abbremsen</li> </ul>"},{"location":"language/german/politik/text9/","title":"Nachfrage nach \"Made in Germany\" sinkt","text":"<p>Die horrenden Energiepreise fordern ihren Tribut: Deutsche Exporteure liefern weniger in die USA und nach China.</p> <ul> <li>horrend == viel == \u00fcberm\u00e4\u00dfig</li> </ul> <p>Die zweite Jahresh\u00e4lfte hat f\u00fcr Deutschlands Exporteure mit einem D\u00e4mpfer begonnen.</p> <ul> <li>mit einem D\u00e4mpfer == \u53d7\u5230\u6291\u5236 == abnehmend</li> </ul> <p>Die Nachfrage nach Waren made in Germany aus wichtigen Absatzm\u00e4rkten wie den USA und China ging zur\u00fcck, der Handel mit Russland kam fast zum Erligen.</p> <ul> <li>Absatzmarkt == \u9500\u552e\u5e02\u573a</li> <li>zum Erliegen == \u4e2d\u65ad</li> </ul> <p>Der Handel ist nicht l\u00e4nger ein Wachstumsmotor, sondern hat sich zu einem Hemmschuh f\u00fcr das deutsche Wachstum entwickelt.</p> <ul> <li>nicht l\u00e4nger</li> <li>Hemmschuh == Behinderung == Blockade == Hemmnis == H\u00fcrde == Bremsschuh</li> </ul> <p>Das negative Vorzeichen bei den Exportzahlen sei keine Eintagsfliege, sondern werde in den kommenden Monaten h\u00e4ufiger auftauchen.</p> <ul> <li>Vorzeichen == Vorbote === Signum</li> <li>Eintagsfliege == \u6619\u82b1\u4e00\u73b0</li> <li>auftauchen == auftreten == verwendet werden</li> </ul> <p>Die Exportzahlen sind also gewisserma\u00dfen ein Vorbote einer sich merklich abschw\u00e4chenden Weltwirtschaft.</p> <ul> <li>gewisserma\u00dfen == sozusagen \u67d0\u79cd\u7a0b\u5ea6\u4e0a</li> <li>Vorbote == Signum</li> </ul> <p>Im Vergleich zum von der Pandemie gepr\u00e4gten Vorjahr f\u00e4llt die Juli-Bilanz vers\u00f6hnlicher aus.</p> <ul> <li>vers\u00f6hnlich == friedlich</li> </ul> <p>Weil weniger Erdgas aus Russland nach Deutschland str\u00f6mte.</p> <ul> <li>str\u00f6men == flie\u00dfen</li> </ul>"},{"location":"language/german/politiksystem/text1/","title":"Wahl des Bundeskanzlers","text":"<p>Danach wird der Bundeskanzler auf Vorschlag des Bundespr\u00e4sidenten vom Bundestag ohne Aussprache gew\u00e4hlt.</p> <ul> <li>ohne Aussprache == ohne Gespr\u00e4che</li> </ul> <p>So muss das Parlament in einer dritten Phase unverz\u00fcglich erneut abstimmen.</p> <ul> <li>unverz\u00fcglich == sofort</li> </ul> <p>So muss der Bundespr\u00e4sident sie oder ihn binnen sieben Tagen nach der Wahl ernennen.</p> <ul> <li>binnen == im Laufe von == innerhalb == w\u00e4hrend</li> </ul> <p>Die Bundeskanzlerin oder der Bundeskanzler ist dazu angehalten, auf Bitte des Bundespr\u00e4sidenten seine Gesch\u00e4fte bis zur Ernennung seines Nachfolgers weiterzuf\u00fchren.</p> <ul> <li>anhalten == aufhalten == behindern == verz\u00f6gern</li> </ul>"},{"location":"language/german/politiksystem/text2/","title":"Aufgaben des Bundeskanzlers","text":"<p>Das Grundgesetz der Bundesrepublik Deutschland sieht f\u00fcr das Amt des Bundeskanzlers eine starke Position vor.</p> <ul> <li>vorsehen f\u00fcr == ansetzen == vorausplanen</li> </ul> <p>Auf gleiche Weise ist die Entlassung der Bundesminister m\u00f6glich.</p> <ul> <li>Entlassung == Vertragsaufl\u00f6sung == Demission == Absetzung == Abberufung</li> </ul> <p>Innerhalb der von dem Bundeskanzler bestimmten Richtlinien leitet jeder Bundesminister seinen Gesch\u00e4ftsbereich selbstst\u00e4ndig und unter eigener Verantwortung. Diese Arbeitsweise hei\u00dft Ressortprinzip.</p> <ul> <li>selbstst\u00e4ndig == \u81ea\u4e3b\u7684\uff0c\u81ea\u7acb\u7684\uff0c\u72ec\u7acb\u7684(autonom)</li> </ul> <p>Mithilfe der Vertrauensfrage kann sich der Bundeskanzler vergewissern, ob seine Politik vom Bundestag unterst\u00fctzt wird.</p> <ul> <li>sich vergewissern == nachschauen == nachsehen == sichergehen == kontrollieren \u68c0\u67e5\uff0c\u5f04\u6e05\u695a</li> </ul> <p>Das Bundeskabinett ist beschlussf\u00e4hig, wenn einschlie\u00dflich des Bundeskanzlers(oder seines Vertreters) die H\u00e4lfte der Bundesministerinnen und Bundesminister anwesend ist.</p> <ul> <li>beschlussf\u00e4hig == k\u00f6nnen etw beschlie\u00dfen</li> <li>anwesend = pr\u00e4sent == vor Ort zeigen</li> </ul> <p>So darf der Bundeskanzler nicht ohne weiteres in die Befugnisse seiner Minister \"hineinregieren\".</p> <ul> <li>die Befugnis == Bereich</li> <li>hineinregieren</li> </ul> <p>Ministerinnen und Minister k\u00f6nnen sich jedoch anderweitig eine starke Stellung schaffen: durch eigene Leistung, geschickten Umgang mit der \u00d6ffentlichkeit oder starken R\u00fcckhalt bei parlamentarischen oder au\u00dferparlamentarischen Kr\u00e4ften.</p> <ul> <li>anderweitig == in other ways</li> <li>geschichter Umgang mit der \u00d6ffentlichkeit == skillful dealings with public</li> <li>der R\u00fcckhalt == Unterst\u00fctzung</li> </ul>"},{"location":"language/german/tech/text1/","title":"Werben f\u00fcr die Wechselbatterie","text":"<p>Akkurat parkt es ein, millimetergenau f\u00fcr eine Maschine, die aus dem Boden hochf\u00e4hrt und die leere gegen eine volle Batterie austauscht.</p> <ul> <li>akkurat == acurate</li> </ul> <p>Aber es sperren sich nat\u00fcrlich alle Hersteller dagegen, weil keiner seine Design-Hoheit aufgeben will.</p> <ul> <li>sich sperren gegen == \u6297\u62d2</li> </ul> <p>Ich habe vier Wechsel pro Monat gratis.</p> <ul> <li>gratis == kostenlos == frei</li> </ul> <p>Die Bestseller bei den teuren E-Autos sind zwei Tesla. In den \"Top Ten\" stehen zwar auch drei Nio-Modelle; doch das Beste rangiert auf Platz sechs. Und von den Deutschen ist nur der BMW iX3 unter den beliebtesten zehn E-Autos.</p>"},{"location":"language/german/tech/text2/","title":"Was Mercedes anders macht als Tesla","text":"<p>Damit k\u00f6nnen Fahrzeuge ihr Umfeld abtasten, um Abst\u00e4nde und Geschwindigkeiten von anderen Verkehrsteilnehmern zu ermitteln.</p> <ul> <li>abtasten == abf\u00fchlen == scannen</li> <li>ermitteln == ausfindig machen == aufkl\u00e4ren</li> </ul> <p>Die Partnerschaft sei f\u00fcr die Branche wegweisend, meint der Gr\u00fcnder und Chef von Luminar.</p> <ul> <li>wegweisend == vision\u00e4r == zukunftstr\u00e4chtig == zukunftsweisend</li> </ul> <p>Im vergangenen Jahr schaffte das Unternehmen sogar die bis dahin verwendeten einfacheren Radar-Sensoren bei Model 3 und Model Y ersatzlos ab.</p> <ul> <li>abschaffen == aufheben == aufl\u00f6sen</li> <li>ersatzlos == without replacing</li> </ul> <p>Im vierten Quartal 2021 im Schnitt alle 4,3 Millionen Meilen in einen Unfall verwickelt.</p> <ul> <li>verwickeln in einen Unfall(A) \u5377\u5165\u4e00\u573a\u4ea4\u901a\u4e8b\u6545</li> <li>im Schnitt alle ... \u5e73\u5747</li> </ul>"}]}